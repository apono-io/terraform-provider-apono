/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aponoapi

import (
	"encoding/json"
	"fmt"
)

// ApproverPolicyGroupsRelationshipTerraformV1 the model 'ApproverPolicyGroupsRelationshipTerraformV1'
type ApproverPolicyGroupsRelationshipTerraformV1 string

// List of ApproverPolicyGroupsRelationshipTerraformV1
const (
	APPROVERPOLICYGROUPSRELATIONSHIPTERRAFORMV1_ANY_OF ApproverPolicyGroupsRelationshipTerraformV1 = "ANY_OF"
	APPROVERPOLICYGROUPSRELATIONSHIPTERRAFORMV1_ALL_OF ApproverPolicyGroupsRelationshipTerraformV1 = "ALL_OF"
)

// All allowed values of ApproverPolicyGroupsRelationshipTerraformV1 enum
var AllowedApproverPolicyGroupsRelationshipTerraformV1EnumValues = []ApproverPolicyGroupsRelationshipTerraformV1{
	"ANY_OF",
	"ALL_OF",
}

func (v *ApproverPolicyGroupsRelationshipTerraformV1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApproverPolicyGroupsRelationshipTerraformV1(value)
	for _, existing := range AllowedApproverPolicyGroupsRelationshipTerraformV1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApproverPolicyGroupsRelationshipTerraformV1", value)
}

// NewApproverPolicyGroupsRelationshipTerraformV1FromValue returns a pointer to a valid ApproverPolicyGroupsRelationshipTerraformV1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApproverPolicyGroupsRelationshipTerraformV1FromValue(v string) (*ApproverPolicyGroupsRelationshipTerraformV1, error) {
	ev := ApproverPolicyGroupsRelationshipTerraformV1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApproverPolicyGroupsRelationshipTerraformV1: valid values are %v", v, AllowedApproverPolicyGroupsRelationshipTerraformV1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApproverPolicyGroupsRelationshipTerraformV1) IsValid() bool {
	for _, existing := range AllowedApproverPolicyGroupsRelationshipTerraformV1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApproverPolicyGroupsRelationshipTerraformV1 value
func (v ApproverPolicyGroupsRelationshipTerraformV1) Ptr() *ApproverPolicyGroupsRelationshipTerraformV1 {
	return &v
}

type NullableApproverPolicyGroupsRelationshipTerraformV1 struct {
	value *ApproverPolicyGroupsRelationshipTerraformV1
	isSet bool
}

func (v NullableApproverPolicyGroupsRelationshipTerraformV1) Get() *ApproverPolicyGroupsRelationshipTerraformV1 {
	return v.value
}

func (v *NullableApproverPolicyGroupsRelationshipTerraformV1) Set(val *ApproverPolicyGroupsRelationshipTerraformV1) {
	v.value = val
	v.isSet = true
}

func (v NullableApproverPolicyGroupsRelationshipTerraformV1) IsSet() bool {
	return v.isSet
}

func (v *NullableApproverPolicyGroupsRelationshipTerraformV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproverPolicyGroupsRelationshipTerraformV1(val *ApproverPolicyGroupsRelationshipTerraformV1) *NullableApproverPolicyGroupsRelationshipTerraformV1 {
	return &NullableApproverPolicyGroupsRelationshipTerraformV1{value: val, isSet: true}
}

func (v NullableApproverPolicyGroupsRelationshipTerraformV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproverPolicyGroupsRelationshipTerraformV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
