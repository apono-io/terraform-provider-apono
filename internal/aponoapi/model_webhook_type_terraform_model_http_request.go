/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aponoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the WebhookTypeTerraformModelHttpRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookTypeTerraformModelHttpRequest{}

// WebhookTypeTerraformModelHttpRequest struct for WebhookTypeTerraformModelHttpRequest
type WebhookTypeTerraformModelHttpRequest struct {
	Url     string                      `json:"url"`
	Method  WebhookMethodTerraformModel `json:"method"`
	Headers map[string]string           `json:"headers"`
}

type _WebhookTypeTerraformModelHttpRequest WebhookTypeTerraformModelHttpRequest

// NewWebhookTypeTerraformModelHttpRequest instantiates a new WebhookTypeTerraformModelHttpRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookTypeTerraformModelHttpRequest(url string, method WebhookMethodTerraformModel, headers map[string]string) *WebhookTypeTerraformModelHttpRequest {
	this := WebhookTypeTerraformModelHttpRequest{}
	this.Url = url
	this.Method = method
	this.Headers = headers
	return &this
}

// NewWebhookTypeTerraformModelHttpRequestWithDefaults instantiates a new WebhookTypeTerraformModelHttpRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookTypeTerraformModelHttpRequestWithDefaults() *WebhookTypeTerraformModelHttpRequest {
	this := WebhookTypeTerraformModelHttpRequest{}
	return &this
}

// GetUrl returns the Url field value
func (o *WebhookTypeTerraformModelHttpRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *WebhookTypeTerraformModelHttpRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *WebhookTypeTerraformModelHttpRequest) SetUrl(v string) {
	o.Url = v
}

// GetMethod returns the Method field value
func (o *WebhookTypeTerraformModelHttpRequest) GetMethod() WebhookMethodTerraformModel {
	if o == nil {
		var ret WebhookMethodTerraformModel
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *WebhookTypeTerraformModelHttpRequest) GetMethodOk() (*WebhookMethodTerraformModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *WebhookTypeTerraformModelHttpRequest) SetMethod(v WebhookMethodTerraformModel) {
	o.Method = v
}

// GetHeaders returns the Headers field value
func (o *WebhookTypeTerraformModelHttpRequest) GetHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *WebhookTypeTerraformModelHttpRequest) GetHeadersOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Headers, true
}

// SetHeaders sets field value
func (o *WebhookTypeTerraformModelHttpRequest) SetHeaders(v map[string]string) {
	o.Headers = v
}

func (o WebhookTypeTerraformModelHttpRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookTypeTerraformModelHttpRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["method"] = o.Method
	toSerialize["headers"] = o.Headers
	return toSerialize, nil
}

func (o *WebhookTypeTerraformModelHttpRequest) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"method",
		"headers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookTypeTerraformModelHttpRequest := _WebhookTypeTerraformModelHttpRequest{}

	err = json.Unmarshal(bytes, &varWebhookTypeTerraformModelHttpRequest)

	if err != nil {
		return err
	}

	*o = WebhookTypeTerraformModelHttpRequest(varWebhookTypeTerraformModelHttpRequest)

	return err
}

type NullableWebhookTypeTerraformModelHttpRequest struct {
	value *WebhookTypeTerraformModelHttpRequest
	isSet bool
}

func (v NullableWebhookTypeTerraformModelHttpRequest) Get() *WebhookTypeTerraformModelHttpRequest {
	return v.value
}

func (v *NullableWebhookTypeTerraformModelHttpRequest) Set(val *WebhookTypeTerraformModelHttpRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookTypeTerraformModelHttpRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookTypeTerraformModelHttpRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookTypeTerraformModelHttpRequest(val *WebhookTypeTerraformModelHttpRequest) *NullableWebhookTypeTerraformModelHttpRequest {
	return &NullableWebhookTypeTerraformModelHttpRequest{value: val, isSet: true}
}

func (v NullableWebhookTypeTerraformModelHttpRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookTypeTerraformModelHttpRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
