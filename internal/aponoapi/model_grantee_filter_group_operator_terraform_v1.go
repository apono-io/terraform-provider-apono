/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aponoapi

import (
	"encoding/json"
	"fmt"
)

// GranteeFilterGroupOperatorTerraformV1 the model 'GranteeFilterGroupOperatorTerraformV1'
type GranteeFilterGroupOperatorTerraformV1 string

// List of GranteeFilterGroupOperatorTerraformV1
const (
	GRANTEEFILTERGROUPOPERATORTERRAFORMV1_AND GranteeFilterGroupOperatorTerraformV1 = "AND"
	GRANTEEFILTERGROUPOPERATORTERRAFORMV1_OR  GranteeFilterGroupOperatorTerraformV1 = "OR"
)

// All allowed values of GranteeFilterGroupOperatorTerraformV1 enum
var AllowedGranteeFilterGroupOperatorTerraformV1EnumValues = []GranteeFilterGroupOperatorTerraformV1{
	"AND",
	"OR",
}

func (v *GranteeFilterGroupOperatorTerraformV1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GranteeFilterGroupOperatorTerraformV1(value)
	for _, existing := range AllowedGranteeFilterGroupOperatorTerraformV1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GranteeFilterGroupOperatorTerraformV1", value)
}

// NewGranteeFilterGroupOperatorTerraformV1FromValue returns a pointer to a valid GranteeFilterGroupOperatorTerraformV1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGranteeFilterGroupOperatorTerraformV1FromValue(v string) (*GranteeFilterGroupOperatorTerraformV1, error) {
	ev := GranteeFilterGroupOperatorTerraformV1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GranteeFilterGroupOperatorTerraformV1: valid values are %v", v, AllowedGranteeFilterGroupOperatorTerraformV1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GranteeFilterGroupOperatorTerraformV1) IsValid() bool {
	for _, existing := range AllowedGranteeFilterGroupOperatorTerraformV1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GranteeFilterGroupOperatorTerraformV1 value
func (v GranteeFilterGroupOperatorTerraformV1) Ptr() *GranteeFilterGroupOperatorTerraformV1 {
	return &v
}

type NullableGranteeFilterGroupOperatorTerraformV1 struct {
	value *GranteeFilterGroupOperatorTerraformV1
	isSet bool
}

func (v NullableGranteeFilterGroupOperatorTerraformV1) Get() *GranteeFilterGroupOperatorTerraformV1 {
	return v.value
}

func (v *NullableGranteeFilterGroupOperatorTerraformV1) Set(val *GranteeFilterGroupOperatorTerraformV1) {
	v.value = val
	v.isSet = true
}

func (v NullableGranteeFilterGroupOperatorTerraformV1) IsSet() bool {
	return v.isSet
}

func (v *NullableGranteeFilterGroupOperatorTerraformV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGranteeFilterGroupOperatorTerraformV1(val *GranteeFilterGroupOperatorTerraformV1) *NullableGranteeFilterGroupOperatorTerraformV1 {
	return &NullableGranteeFilterGroupOperatorTerraformV1{value: val, isSet: true}
}

func (v NullableGranteeFilterGroupOperatorTerraformV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGranteeFilterGroupOperatorTerraformV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
