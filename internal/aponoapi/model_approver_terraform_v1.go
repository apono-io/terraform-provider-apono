/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aponoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ApproverTerraformV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApproverTerraformV1{}

// ApproverTerraformV1 struct for ApproverTerraformV1
type ApproverTerraformV1 struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

type _ApproverTerraformV1 ApproverTerraformV1

// NewApproverTerraformV1 instantiates a new ApproverTerraformV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApproverTerraformV1(id string, type_ string) *ApproverTerraformV1 {
	this := ApproverTerraformV1{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewApproverTerraformV1WithDefaults instantiates a new ApproverTerraformV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApproverTerraformV1WithDefaults() *ApproverTerraformV1 {
	this := ApproverTerraformV1{}
	return &this
}

// GetId returns the Id field value
func (o *ApproverTerraformV1) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApproverTerraformV1) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApproverTerraformV1) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *ApproverTerraformV1) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApproverTerraformV1) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApproverTerraformV1) SetType(v string) {
	o.Type = v
}

func (o ApproverTerraformV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApproverTerraformV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ApproverTerraformV1) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApproverTerraformV1 := _ApproverTerraformV1{}

	err = json.Unmarshal(bytes, &varApproverTerraformV1)

	if err != nil {
		return err
	}

	*o = ApproverTerraformV1(varApproverTerraformV1)

	return err
}

type NullableApproverTerraformV1 struct {
	value *ApproverTerraformV1
	isSet bool
}

func (v NullableApproverTerraformV1) Get() *ApproverTerraformV1 {
	return v.value
}

func (v *NullableApproverTerraformV1) Set(val *ApproverTerraformV1) {
	v.value = val
	v.isSet = true
}

func (v NullableApproverTerraformV1) IsSet() bool {
	return v.isSet
}

func (v *NullableApproverTerraformV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproverTerraformV1(val *ApproverTerraformV1) *NullableApproverTerraformV1 {
	return &NullableApproverTerraformV1{value: val, isSet: true}
}

func (v NullableApproverTerraformV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproverTerraformV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
