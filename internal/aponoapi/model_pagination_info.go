/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aponoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PaginationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginationInfo{}

// PaginationInfo struct for PaginationInfo
type PaginationInfo struct {
	Total  int32 `json:"total"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type _PaginationInfo PaginationInfo

// NewPaginationInfo instantiates a new PaginationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginationInfo(total int32, limit int32, offset int32) *PaginationInfo {
	this := PaginationInfo{}
	this.Total = total
	this.Limit = limit
	this.Offset = offset
	return &this
}

// NewPaginationInfoWithDefaults instantiates a new PaginationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginationInfoWithDefaults() *PaginationInfo {
	this := PaginationInfo{}
	return &this
}

// GetTotal returns the Total field value
func (o *PaginationInfo) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *PaginationInfo) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *PaginationInfo) SetTotal(v int32) {
	o.Total = v
}

// GetLimit returns the Limit field value
func (o *PaginationInfo) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *PaginationInfo) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *PaginationInfo) SetLimit(v int32) {
	o.Limit = v
}

// GetOffset returns the Offset field value
func (o *PaginationInfo) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *PaginationInfo) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *PaginationInfo) SetOffset(v int32) {
	o.Offset = v
}

func (o PaginationInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	toSerialize["limit"] = o.Limit
	toSerialize["offset"] = o.Offset
	return toSerialize, nil
}

func (o *PaginationInfo) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
		"limit",
		"offset",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaginationInfo := _PaginationInfo{}

	err = json.Unmarshal(bytes, &varPaginationInfo)

	if err != nil {
		return err
	}

	*o = PaginationInfo(varPaginationInfo)

	return err
}

type NullablePaginationInfo struct {
	value *PaginationInfo
	isSet bool
}

func (v NullablePaginationInfo) Get() *PaginationInfo {
	return v.value
}

func (v *NullablePaginationInfo) Set(val *PaginationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginationInfo(val *PaginationInfo) *NullablePaginationInfo {
	return &NullablePaginationInfo{value: val, isSet: true}
}

func (v NullablePaginationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
