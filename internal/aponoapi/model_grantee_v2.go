/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aponoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the GranteeV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GranteeV2{}

// GranteeV2 struct for GranteeV2
type GranteeV2 struct {
	LogicalOperator  GranteeFilterGroupOperatorTerraformV1 `json:"logical_operator"`
	AttributeFilters []AttributeFilterTerraformV1          `json:"attribute_filters"`
}

type _GranteeV2 GranteeV2

// NewGranteeV2 instantiates a new GranteeV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGranteeV2(logicalOperator GranteeFilterGroupOperatorTerraformV1, attributeFilters []AttributeFilterTerraformV1) *GranteeV2 {
	this := GranteeV2{}
	this.LogicalOperator = logicalOperator
	this.AttributeFilters = attributeFilters
	return &this
}

// NewGranteeV2WithDefaults instantiates a new GranteeV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGranteeV2WithDefaults() *GranteeV2 {
	this := GranteeV2{}
	return &this
}

// GetLogicalOperator returns the LogicalOperator field value
func (o *GranteeV2) GetLogicalOperator() GranteeFilterGroupOperatorTerraformV1 {
	if o == nil {
		var ret GranteeFilterGroupOperatorTerraformV1
		return ret
	}

	return o.LogicalOperator
}

// GetLogicalOperatorOk returns a tuple with the LogicalOperator field value
// and a boolean to check if the value has been set.
func (o *GranteeV2) GetLogicalOperatorOk() (*GranteeFilterGroupOperatorTerraformV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogicalOperator, true
}

// SetLogicalOperator sets field value
func (o *GranteeV2) SetLogicalOperator(v GranteeFilterGroupOperatorTerraformV1) {
	o.LogicalOperator = v
}

// GetAttributeFilters returns the AttributeFilters field value
func (o *GranteeV2) GetAttributeFilters() []AttributeFilterTerraformV1 {
	if o == nil {
		var ret []AttributeFilterTerraformV1
		return ret
	}

	return o.AttributeFilters
}

// GetAttributeFiltersOk returns a tuple with the AttributeFilters field value
// and a boolean to check if the value has been set.
func (o *GranteeV2) GetAttributeFiltersOk() ([]AttributeFilterTerraformV1, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttributeFilters, true
}

// SetAttributeFilters sets field value
func (o *GranteeV2) SetAttributeFilters(v []AttributeFilterTerraformV1) {
	o.AttributeFilters = v
}

func (o GranteeV2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GranteeV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["logical_operator"] = o.LogicalOperator
	toSerialize["attribute_filters"] = o.AttributeFilters
	return toSerialize, nil
}

func (o *GranteeV2) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"logical_operator",
		"attribute_filters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGranteeV2 := _GranteeV2{}

	err = json.Unmarshal(bytes, &varGranteeV2)

	if err != nil {
		return err
	}

	*o = GranteeV2(varGranteeV2)

	return err
}

type NullableGranteeV2 struct {
	value *GranteeV2
	isSet bool
}

func (v NullableGranteeV2) Get() *GranteeV2 {
	return v.value
}

func (v *NullableGranteeV2) Set(val *GranteeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableGranteeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableGranteeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGranteeV2(val *GranteeV2) *NullableGranteeV2 {
	return &NullableGranteeV2{value: val, isSet: true}
}

func (v NullableGranteeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGranteeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
