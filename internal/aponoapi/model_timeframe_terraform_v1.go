/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aponoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the TimeframeTerraformV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeframeTerraformV1{}

// TimeframeTerraformV1 struct for TimeframeTerraformV1
type TimeframeTerraformV1 struct {
	StartOfDayTimeInSeconds int64       `json:"start_of_day_time_in_seconds"`
	EndOfDayTimeInSeconds   int64       `json:"end_of_day_time_in_seconds"`
	DaysInWeek              []DayOfWeek `json:"days_in_week"`
	TimeZone                string      `json:"time_zone"`
}

type _TimeframeTerraformV1 TimeframeTerraformV1

// NewTimeframeTerraformV1 instantiates a new TimeframeTerraformV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeframeTerraformV1(startOfDayTimeInSeconds int64, endOfDayTimeInSeconds int64, daysInWeek []DayOfWeek, timeZone string) *TimeframeTerraformV1 {
	this := TimeframeTerraformV1{}
	this.StartOfDayTimeInSeconds = startOfDayTimeInSeconds
	this.EndOfDayTimeInSeconds = endOfDayTimeInSeconds
	this.DaysInWeek = daysInWeek
	this.TimeZone = timeZone
	return &this
}

// NewTimeframeTerraformV1WithDefaults instantiates a new TimeframeTerraformV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeframeTerraformV1WithDefaults() *TimeframeTerraformV1 {
	this := TimeframeTerraformV1{}
	return &this
}

// GetStartOfDayTimeInSeconds returns the StartOfDayTimeInSeconds field value
func (o *TimeframeTerraformV1) GetStartOfDayTimeInSeconds() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartOfDayTimeInSeconds
}

// GetStartOfDayTimeInSecondsOk returns a tuple with the StartOfDayTimeInSeconds field value
// and a boolean to check if the value has been set.
func (o *TimeframeTerraformV1) GetStartOfDayTimeInSecondsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartOfDayTimeInSeconds, true
}

// SetStartOfDayTimeInSeconds sets field value
func (o *TimeframeTerraformV1) SetStartOfDayTimeInSeconds(v int64) {
	o.StartOfDayTimeInSeconds = v
}

// GetEndOfDayTimeInSeconds returns the EndOfDayTimeInSeconds field value
func (o *TimeframeTerraformV1) GetEndOfDayTimeInSeconds() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EndOfDayTimeInSeconds
}

// GetEndOfDayTimeInSecondsOk returns a tuple with the EndOfDayTimeInSeconds field value
// and a boolean to check if the value has been set.
func (o *TimeframeTerraformV1) GetEndOfDayTimeInSecondsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndOfDayTimeInSeconds, true
}

// SetEndOfDayTimeInSeconds sets field value
func (o *TimeframeTerraformV1) SetEndOfDayTimeInSeconds(v int64) {
	o.EndOfDayTimeInSeconds = v
}

// GetDaysInWeek returns the DaysInWeek field value
func (o *TimeframeTerraformV1) GetDaysInWeek() []DayOfWeek {
	if o == nil {
		var ret []DayOfWeek
		return ret
	}

	return o.DaysInWeek
}

// GetDaysInWeekOk returns a tuple with the DaysInWeek field value
// and a boolean to check if the value has been set.
func (o *TimeframeTerraformV1) GetDaysInWeekOk() ([]DayOfWeek, bool) {
	if o == nil {
		return nil, false
	}
	return o.DaysInWeek, true
}

// SetDaysInWeek sets field value
func (o *TimeframeTerraformV1) SetDaysInWeek(v []DayOfWeek) {
	o.DaysInWeek = v
}

// GetTimeZone returns the TimeZone field value
func (o *TimeframeTerraformV1) GetTimeZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value
// and a boolean to check if the value has been set.
func (o *TimeframeTerraformV1) GetTimeZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeZone, true
}

// SetTimeZone sets field value
func (o *TimeframeTerraformV1) SetTimeZone(v string) {
	o.TimeZone = v
}

func (o TimeframeTerraformV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeframeTerraformV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["start_of_day_time_in_seconds"] = o.StartOfDayTimeInSeconds
	toSerialize["end_of_day_time_in_seconds"] = o.EndOfDayTimeInSeconds
	toSerialize["days_in_week"] = o.DaysInWeek
	toSerialize["time_zone"] = o.TimeZone
	return toSerialize, nil
}

func (o *TimeframeTerraformV1) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"start_of_day_time_in_seconds",
		"end_of_day_time_in_seconds",
		"days_in_week",
		"time_zone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeframeTerraformV1 := _TimeframeTerraformV1{}

	err = json.Unmarshal(bytes, &varTimeframeTerraformV1)

	if err != nil {
		return err
	}

	*o = TimeframeTerraformV1(varTimeframeTerraformV1)

	return err
}

type NullableTimeframeTerraformV1 struct {
	value *TimeframeTerraformV1
	isSet bool
}

func (v NullableTimeframeTerraformV1) Get() *TimeframeTerraformV1 {
	return v.value
}

func (v *NullableTimeframeTerraformV1) Set(val *TimeframeTerraformV1) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeframeTerraformV1) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeframeTerraformV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeframeTerraformV1(val *TimeframeTerraformV1) *NullableTimeframeTerraformV1 {
	return &NullableTimeframeTerraformV1{value: val, isSet: true}
}

func (v NullableTimeframeTerraformV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeframeTerraformV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
