/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aponoapi

import (
	"encoding/json"
	"fmt"
)

// ApproverConditionGroupOperatorTerraformV1 the model 'ApproverConditionGroupOperatorTerraformV1'
type ApproverConditionGroupOperatorTerraformV1 string

// List of ApproverConditionGroupOperatorTerraformV1
const (
	APPROVERCONDITIONGROUPOPERATORTERRAFORMV1_AND ApproverConditionGroupOperatorTerraformV1 = "AND"
	APPROVERCONDITIONGROUPOPERATORTERRAFORMV1_OR  ApproverConditionGroupOperatorTerraformV1 = "OR"
)

// All allowed values of ApproverConditionGroupOperatorTerraformV1 enum
var AllowedApproverConditionGroupOperatorTerraformV1EnumValues = []ApproverConditionGroupOperatorTerraformV1{
	"AND",
	"OR",
}

func (v *ApproverConditionGroupOperatorTerraformV1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApproverConditionGroupOperatorTerraformV1(value)
	for _, existing := range AllowedApproverConditionGroupOperatorTerraformV1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApproverConditionGroupOperatorTerraformV1", value)
}

// NewApproverConditionGroupOperatorTerraformV1FromValue returns a pointer to a valid ApproverConditionGroupOperatorTerraformV1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApproverConditionGroupOperatorTerraformV1FromValue(v string) (*ApproverConditionGroupOperatorTerraformV1, error) {
	ev := ApproverConditionGroupOperatorTerraformV1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApproverConditionGroupOperatorTerraformV1: valid values are %v", v, AllowedApproverConditionGroupOperatorTerraformV1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApproverConditionGroupOperatorTerraformV1) IsValid() bool {
	for _, existing := range AllowedApproverConditionGroupOperatorTerraformV1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApproverConditionGroupOperatorTerraformV1 value
func (v ApproverConditionGroupOperatorTerraformV1) Ptr() *ApproverConditionGroupOperatorTerraformV1 {
	return &v
}

type NullableApproverConditionGroupOperatorTerraformV1 struct {
	value *ApproverConditionGroupOperatorTerraformV1
	isSet bool
}

func (v NullableApproverConditionGroupOperatorTerraformV1) Get() *ApproverConditionGroupOperatorTerraformV1 {
	return v.value
}

func (v *NullableApproverConditionGroupOperatorTerraformV1) Set(val *ApproverConditionGroupOperatorTerraformV1) {
	v.value = val
	v.isSet = true
}

func (v NullableApproverConditionGroupOperatorTerraformV1) IsSet() bool {
	return v.isSet
}

func (v *NullableApproverConditionGroupOperatorTerraformV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproverConditionGroupOperatorTerraformV1(val *ApproverConditionGroupOperatorTerraformV1) *NullableApproverConditionGroupOperatorTerraformV1 {
	return &NullableApproverConditionGroupOperatorTerraformV1{value: val, isSet: true}
}

func (v NullableApproverConditionGroupOperatorTerraformV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproverConditionGroupOperatorTerraformV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
