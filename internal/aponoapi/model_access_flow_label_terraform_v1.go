/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aponoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AccessFlowLabelTerraformV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessFlowLabelTerraformV1{}

// AccessFlowLabelTerraformV1 struct for AccessFlowLabelTerraformV1
type AccessFlowLabelTerraformV1 struct {
	Name string `json:"name"`
}

type _AccessFlowLabelTerraformV1 AccessFlowLabelTerraformV1

// NewAccessFlowLabelTerraformV1 instantiates a new AccessFlowLabelTerraformV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessFlowLabelTerraformV1(name string) *AccessFlowLabelTerraformV1 {
	this := AccessFlowLabelTerraformV1{}
	this.Name = name
	return &this
}

// NewAccessFlowLabelTerraformV1WithDefaults instantiates a new AccessFlowLabelTerraformV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessFlowLabelTerraformV1WithDefaults() *AccessFlowLabelTerraformV1 {
	this := AccessFlowLabelTerraformV1{}
	return &this
}

// GetName returns the Name field value
func (o *AccessFlowLabelTerraformV1) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AccessFlowLabelTerraformV1) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AccessFlowLabelTerraformV1) SetName(v string) {
	o.Name = v
}

func (o AccessFlowLabelTerraformV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessFlowLabelTerraformV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *AccessFlowLabelTerraformV1) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessFlowLabelTerraformV1 := _AccessFlowLabelTerraformV1{}

	err = json.Unmarshal(bytes, &varAccessFlowLabelTerraformV1)

	if err != nil {
		return err
	}

	*o = AccessFlowLabelTerraformV1(varAccessFlowLabelTerraformV1)

	return err
}

type NullableAccessFlowLabelTerraformV1 struct {
	value *AccessFlowLabelTerraformV1
	isSet bool
}

func (v NullableAccessFlowLabelTerraformV1) Get() *AccessFlowLabelTerraformV1 {
	return v.value
}

func (v *NullableAccessFlowLabelTerraformV1) Set(val *AccessFlowLabelTerraformV1) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessFlowLabelTerraformV1) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessFlowLabelTerraformV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessFlowLabelTerraformV1(val *AccessFlowLabelTerraformV1) *NullableAccessFlowLabelTerraformV1 {
	return &NullableAccessFlowLabelTerraformV1{value: val, isSet: true}
}

func (v NullableAccessFlowLabelTerraformV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessFlowLabelTerraformV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
