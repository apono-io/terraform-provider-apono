/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aponoapi

import (
	"encoding/json"
	"fmt"
)

// IntegrationStatus the model 'IntegrationStatus'
type IntegrationStatus string

// List of IntegrationStatus
const (
	INTEGRATIONSTATUS_INITIALIZING IntegrationStatus = "Initializing"
	INTEGRATIONSTATUS_REFRESHING   IntegrationStatus = "Refreshing"
	INTEGRATIONSTATUS_ACTIVE       IntegrationStatus = "Active"
	INTEGRATIONSTATUS_ERROR        IntegrationStatus = "Error"
	INTEGRATIONSTATUS_WARNING      IntegrationStatus = "Warning"
	INTEGRATIONSTATUS_DISABLED     IntegrationStatus = "Disabled"
)

// All allowed values of IntegrationStatus enum
var AllowedIntegrationStatusEnumValues = []IntegrationStatus{
	"Initializing",
	"Refreshing",
	"Active",
	"Error",
	"Warning",
	"Disabled",
}

func (v *IntegrationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntegrationStatus(value)
	for _, existing := range AllowedIntegrationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntegrationStatus", value)
}

// NewIntegrationStatusFromValue returns a pointer to a valid IntegrationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntegrationStatusFromValue(v string) (*IntegrationStatus, error) {
	ev := IntegrationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntegrationStatus: valid values are %v", v, AllowedIntegrationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntegrationStatus) IsValid() bool {
	for _, existing := range AllowedIntegrationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntegrationStatus value
func (v IntegrationStatus) Ptr() *IntegrationStatus {
	return &v
}

type NullableIntegrationStatus struct {
	value *IntegrationStatus
	isSet bool
}

func (v NullableIntegrationStatus) Get() *IntegrationStatus {
	return v.value
}

func (v *NullableIntegrationStatus) Set(val *IntegrationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationStatus(val *IntegrationStatus) *NullableIntegrationStatus {
	return &NullableIntegrationStatus{value: val, isSet: true}
}

func (v NullableIntegrationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
