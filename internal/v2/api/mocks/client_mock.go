// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/apono-io/terraform-provider-apono/internal/v2/api/client"

	mock "github.com/stretchr/testify/mock"
)

// Invoker is an autogenerated mock type for the Invoker type
type Invoker struct {
	mock.Mock
}

type Invoker_Expecter struct {
	mock *mock.Mock
}

func (_m *Invoker) EXPECT() *Invoker_Expecter {
	return &Invoker_Expecter{mock: &_m.Mock}
}

// AddGroupMemberV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) AddGroupMemberV1(ctx context.Context, params client.AddGroupMemberV1Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupMemberV1")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.AddGroupMemberV1Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_AddGroupMemberV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupMemberV1'
type Invoker_AddGroupMemberV1_Call struct {
	*mock.Call
}

// AddGroupMemberV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.AddGroupMemberV1Params
func (_e *Invoker_Expecter) AddGroupMemberV1(ctx interface{}, params interface{}) *Invoker_AddGroupMemberV1_Call {
	return &Invoker_AddGroupMemberV1_Call{Call: _e.mock.On("AddGroupMemberV1", ctx, params)}
}

func (_c *Invoker_AddGroupMemberV1_Call) Run(run func(ctx context.Context, params client.AddGroupMemberV1Params)) *Invoker_AddGroupMemberV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.AddGroupMemberV1Params))
	})
	return _c
}

func (_c *Invoker_AddGroupMemberV1_Call) Return(_a0 error) *Invoker_AddGroupMemberV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_AddGroupMemberV1_Call) RunAndReturn(run func(context.Context, client.AddGroupMemberV1Params) error) *Invoker_AddGroupMemberV1_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessFlowV2 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateAccessFlowV2(ctx context.Context, request *client.AccessFlowUpsertV2) (*client.AccessFlowV2, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessFlowV2")
	}

	var r0 *client.AccessFlowV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.AccessFlowUpsertV2) (*client.AccessFlowV2, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.AccessFlowUpsertV2) *client.AccessFlowV2); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessFlowV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.AccessFlowUpsertV2) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateAccessFlowV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessFlowV2'
type Invoker_CreateAccessFlowV2_Call struct {
	*mock.Call
}

// CreateAccessFlowV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.AccessFlowUpsertV2
func (_e *Invoker_Expecter) CreateAccessFlowV2(ctx interface{}, request interface{}) *Invoker_CreateAccessFlowV2_Call {
	return &Invoker_CreateAccessFlowV2_Call{Call: _e.mock.On("CreateAccessFlowV2", ctx, request)}
}

func (_c *Invoker_CreateAccessFlowV2_Call) Run(run func(ctx context.Context, request *client.AccessFlowUpsertV2)) *Invoker_CreateAccessFlowV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.AccessFlowUpsertV2))
	})
	return _c
}

func (_c *Invoker_CreateAccessFlowV2_Call) Return(_a0 *client.AccessFlowV2, _a1 error) *Invoker_CreateAccessFlowV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateAccessFlowV2_Call) RunAndReturn(run func(context.Context, *client.AccessFlowUpsertV2) (*client.AccessFlowV2, error)) *Invoker_CreateAccessFlowV2_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessScopesV1 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateAccessScopesV1(ctx context.Context, request *client.UpsertAccessScopeV1) (*client.AccessScopeV1, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessScopesV1")
	}

	var r0 *client.AccessScopeV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertAccessScopeV1) (*client.AccessScopeV1, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertAccessScopeV1) *client.AccessScopeV1); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessScopeV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpsertAccessScopeV1) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateAccessScopesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessScopesV1'
type Invoker_CreateAccessScopesV1_Call struct {
	*mock.Call
}

// CreateAccessScopesV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpsertAccessScopeV1
func (_e *Invoker_Expecter) CreateAccessScopesV1(ctx interface{}, request interface{}) *Invoker_CreateAccessScopesV1_Call {
	return &Invoker_CreateAccessScopesV1_Call{Call: _e.mock.On("CreateAccessScopesV1", ctx, request)}
}

func (_c *Invoker_CreateAccessScopesV1_Call) Run(run func(ctx context.Context, request *client.UpsertAccessScopeV1)) *Invoker_CreateAccessScopesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpsertAccessScopeV1))
	})
	return _c
}

func (_c *Invoker_CreateAccessScopesV1_Call) Return(_a0 *client.AccessScopeV1, _a1 error) *Invoker_CreateAccessScopesV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateAccessScopesV1_Call) RunAndReturn(run func(context.Context, *client.UpsertAccessScopeV1) (*client.AccessScopeV1, error)) *Invoker_CreateAccessScopesV1_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBundleV2 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateBundleV2(ctx context.Context, request *client.UpsertBundleV2) (*client.BundleV2, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateBundleV2")
	}

	var r0 *client.BundleV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertBundleV2) (*client.BundleV2, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertBundleV2) *client.BundleV2); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BundleV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpsertBundleV2) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateBundleV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBundleV2'
type Invoker_CreateBundleV2_Call struct {
	*mock.Call
}

// CreateBundleV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpsertBundleV2
func (_e *Invoker_Expecter) CreateBundleV2(ctx interface{}, request interface{}) *Invoker_CreateBundleV2_Call {
	return &Invoker_CreateBundleV2_Call{Call: _e.mock.On("CreateBundleV2", ctx, request)}
}

func (_c *Invoker_CreateBundleV2_Call) Run(run func(ctx context.Context, request *client.UpsertBundleV2)) *Invoker_CreateBundleV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpsertBundleV2))
	})
	return _c
}

func (_c *Invoker_CreateBundleV2_Call) Return(_a0 *client.BundleV2, _a1 error) *Invoker_CreateBundleV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateBundleV2_Call) RunAndReturn(run func(context.Context, *client.UpsertBundleV2) (*client.BundleV2, error)) *Invoker_CreateBundleV2_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupV1 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateGroupV1(ctx context.Context, request *client.CreateGroupV1) (*client.GroupV1, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupV1")
	}

	var r0 *client.GroupV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateGroupV1) (*client.GroupV1, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateGroupV1) *client.GroupV1); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GroupV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.CreateGroupV1) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateGroupV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupV1'
type Invoker_CreateGroupV1_Call struct {
	*mock.Call
}

// CreateGroupV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.CreateGroupV1
func (_e *Invoker_Expecter) CreateGroupV1(ctx interface{}, request interface{}) *Invoker_CreateGroupV1_Call {
	return &Invoker_CreateGroupV1_Call{Call: _e.mock.On("CreateGroupV1", ctx, request)}
}

func (_c *Invoker_CreateGroupV1_Call) Run(run func(ctx context.Context, request *client.CreateGroupV1)) *Invoker_CreateGroupV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.CreateGroupV1))
	})
	return _c
}

func (_c *Invoker_CreateGroupV1_Call) Return(_a0 *client.GroupV1, _a1 error) *Invoker_CreateGroupV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateGroupV1_Call) RunAndReturn(run func(context.Context, *client.CreateGroupV1) (*client.GroupV1, error)) *Invoker_CreateGroupV1_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIntegrationV4 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateIntegrationV4(ctx context.Context, request *client.CreateIntegrationV4) (*client.IntegrationV4, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateIntegrationV4")
	}

	var r0 *client.IntegrationV4
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateIntegrationV4) (*client.IntegrationV4, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateIntegrationV4) *client.IntegrationV4); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.IntegrationV4)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.CreateIntegrationV4) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateIntegrationV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIntegrationV4'
type Invoker_CreateIntegrationV4_Call struct {
	*mock.Call
}

// CreateIntegrationV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.CreateIntegrationV4
func (_e *Invoker_Expecter) CreateIntegrationV4(ctx interface{}, request interface{}) *Invoker_CreateIntegrationV4_Call {
	return &Invoker_CreateIntegrationV4_Call{Call: _e.mock.On("CreateIntegrationV4", ctx, request)}
}

func (_c *Invoker_CreateIntegrationV4_Call) Run(run func(ctx context.Context, request *client.CreateIntegrationV4)) *Invoker_CreateIntegrationV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.CreateIntegrationV4))
	})
	return _c
}

func (_c *Invoker_CreateIntegrationV4_Call) Return(_a0 *client.IntegrationV4, _a1 error) *Invoker_CreateIntegrationV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateIntegrationV4_Call) RunAndReturn(run func(context.Context, *client.CreateIntegrationV4) (*client.IntegrationV4, error)) *Invoker_CreateIntegrationV4_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessFlowV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteAccessFlowV2(ctx context.Context, params client.DeleteAccessFlowV2Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessFlowV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteAccessFlowV2Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_DeleteAccessFlowV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessFlowV2'
type Invoker_DeleteAccessFlowV2_Call struct {
	*mock.Call
}

// DeleteAccessFlowV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteAccessFlowV2Params
func (_e *Invoker_Expecter) DeleteAccessFlowV2(ctx interface{}, params interface{}) *Invoker_DeleteAccessFlowV2_Call {
	return &Invoker_DeleteAccessFlowV2_Call{Call: _e.mock.On("DeleteAccessFlowV2", ctx, params)}
}

func (_c *Invoker_DeleteAccessFlowV2_Call) Run(run func(ctx context.Context, params client.DeleteAccessFlowV2Params)) *Invoker_DeleteAccessFlowV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteAccessFlowV2Params))
	})
	return _c
}

func (_c *Invoker_DeleteAccessFlowV2_Call) Return(_a0 error) *Invoker_DeleteAccessFlowV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_DeleteAccessFlowV2_Call) RunAndReturn(run func(context.Context, client.DeleteAccessFlowV2Params) error) *Invoker_DeleteAccessFlowV2_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessScopesV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteAccessScopesV1(ctx context.Context, params client.DeleteAccessScopesV1Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessScopesV1")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteAccessScopesV1Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_DeleteAccessScopesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessScopesV1'
type Invoker_DeleteAccessScopesV1_Call struct {
	*mock.Call
}

// DeleteAccessScopesV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteAccessScopesV1Params
func (_e *Invoker_Expecter) DeleteAccessScopesV1(ctx interface{}, params interface{}) *Invoker_DeleteAccessScopesV1_Call {
	return &Invoker_DeleteAccessScopesV1_Call{Call: _e.mock.On("DeleteAccessScopesV1", ctx, params)}
}

func (_c *Invoker_DeleteAccessScopesV1_Call) Run(run func(ctx context.Context, params client.DeleteAccessScopesV1Params)) *Invoker_DeleteAccessScopesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteAccessScopesV1Params))
	})
	return _c
}

func (_c *Invoker_DeleteAccessScopesV1_Call) Return(_a0 error) *Invoker_DeleteAccessScopesV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_DeleteAccessScopesV1_Call) RunAndReturn(run func(context.Context, client.DeleteAccessScopesV1Params) error) *Invoker_DeleteAccessScopesV1_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBundleV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteBundleV2(ctx context.Context, params client.DeleteBundleV2Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBundleV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteBundleV2Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_DeleteBundleV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBundleV2'
type Invoker_DeleteBundleV2_Call struct {
	*mock.Call
}

// DeleteBundleV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteBundleV2Params
func (_e *Invoker_Expecter) DeleteBundleV2(ctx interface{}, params interface{}) *Invoker_DeleteBundleV2_Call {
	return &Invoker_DeleteBundleV2_Call{Call: _e.mock.On("DeleteBundleV2", ctx, params)}
}

func (_c *Invoker_DeleteBundleV2_Call) Run(run func(ctx context.Context, params client.DeleteBundleV2Params)) *Invoker_DeleteBundleV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteBundleV2Params))
	})
	return _c
}

func (_c *Invoker_DeleteBundleV2_Call) Return(_a0 error) *Invoker_DeleteBundleV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_DeleteBundleV2_Call) RunAndReturn(run func(context.Context, client.DeleteBundleV2Params) error) *Invoker_DeleteBundleV2_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConnectorV3 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteConnectorV3(ctx context.Context, params client.DeleteConnectorV3Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnectorV3")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteConnectorV3Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_DeleteConnectorV3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConnectorV3'
type Invoker_DeleteConnectorV3_Call struct {
	*mock.Call
}

// DeleteConnectorV3 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteConnectorV3Params
func (_e *Invoker_Expecter) DeleteConnectorV3(ctx interface{}, params interface{}) *Invoker_DeleteConnectorV3_Call {
	return &Invoker_DeleteConnectorV3_Call{Call: _e.mock.On("DeleteConnectorV3", ctx, params)}
}

func (_c *Invoker_DeleteConnectorV3_Call) Run(run func(ctx context.Context, params client.DeleteConnectorV3Params)) *Invoker_DeleteConnectorV3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteConnectorV3Params))
	})
	return _c
}

func (_c *Invoker_DeleteConnectorV3_Call) Return(_a0 error) *Invoker_DeleteConnectorV3_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_DeleteConnectorV3_Call) RunAndReturn(run func(context.Context, client.DeleteConnectorV3Params) error) *Invoker_DeleteConnectorV3_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteGroupV1(ctx context.Context, params client.DeleteGroupV1Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupV1")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteGroupV1Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_DeleteGroupV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupV1'
type Invoker_DeleteGroupV1_Call struct {
	*mock.Call
}

// DeleteGroupV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteGroupV1Params
func (_e *Invoker_Expecter) DeleteGroupV1(ctx interface{}, params interface{}) *Invoker_DeleteGroupV1_Call {
	return &Invoker_DeleteGroupV1_Call{Call: _e.mock.On("DeleteGroupV1", ctx, params)}
}

func (_c *Invoker_DeleteGroupV1_Call) Run(run func(ctx context.Context, params client.DeleteGroupV1Params)) *Invoker_DeleteGroupV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteGroupV1Params))
	})
	return _c
}

func (_c *Invoker_DeleteGroupV1_Call) Return(_a0 error) *Invoker_DeleteGroupV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_DeleteGroupV1_Call) RunAndReturn(run func(context.Context, client.DeleteGroupV1Params) error) *Invoker_DeleteGroupV1_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIntegrationV4 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteIntegrationV4(ctx context.Context, params client.DeleteIntegrationV4Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntegrationV4")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteIntegrationV4Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_DeleteIntegrationV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIntegrationV4'
type Invoker_DeleteIntegrationV4_Call struct {
	*mock.Call
}

// DeleteIntegrationV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteIntegrationV4Params
func (_e *Invoker_Expecter) DeleteIntegrationV4(ctx interface{}, params interface{}) *Invoker_DeleteIntegrationV4_Call {
	return &Invoker_DeleteIntegrationV4_Call{Call: _e.mock.On("DeleteIntegrationV4", ctx, params)}
}

func (_c *Invoker_DeleteIntegrationV4_Call) Run(run func(ctx context.Context, params client.DeleteIntegrationV4Params)) *Invoker_DeleteIntegrationV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteIntegrationV4Params))
	})
	return _c
}

func (_c *Invoker_DeleteIntegrationV4_Call) Return(_a0 error) *Invoker_DeleteIntegrationV4_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_DeleteIntegrationV4_Call) RunAndReturn(run func(context.Context, client.DeleteIntegrationV4Params) error) *Invoker_DeleteIntegrationV4_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessFlowV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetAccessFlowV2(ctx context.Context, params client.GetAccessFlowV2Params) (*client.AccessFlowV2, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessFlowV2")
	}

	var r0 *client.AccessFlowV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessFlowV2Params) (*client.AccessFlowV2, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessFlowV2Params) *client.AccessFlowV2); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessFlowV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetAccessFlowV2Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetAccessFlowV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessFlowV2'
type Invoker_GetAccessFlowV2_Call struct {
	*mock.Call
}

// GetAccessFlowV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetAccessFlowV2Params
func (_e *Invoker_Expecter) GetAccessFlowV2(ctx interface{}, params interface{}) *Invoker_GetAccessFlowV2_Call {
	return &Invoker_GetAccessFlowV2_Call{Call: _e.mock.On("GetAccessFlowV2", ctx, params)}
}

func (_c *Invoker_GetAccessFlowV2_Call) Run(run func(ctx context.Context, params client.GetAccessFlowV2Params)) *Invoker_GetAccessFlowV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetAccessFlowV2Params))
	})
	return _c
}

func (_c *Invoker_GetAccessFlowV2_Call) Return(_a0 *client.AccessFlowV2, _a1 error) *Invoker_GetAccessFlowV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetAccessFlowV2_Call) RunAndReturn(run func(context.Context, client.GetAccessFlowV2Params) (*client.AccessFlowV2, error)) *Invoker_GetAccessFlowV2_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessScopesV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetAccessScopesV1(ctx context.Context, params client.GetAccessScopesV1Params) (*client.AccessScopeV1, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessScopesV1")
	}

	var r0 *client.AccessScopeV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessScopesV1Params) (*client.AccessScopeV1, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessScopesV1Params) *client.AccessScopeV1); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessScopeV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetAccessScopesV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetAccessScopesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessScopesV1'
type Invoker_GetAccessScopesV1_Call struct {
	*mock.Call
}

// GetAccessScopesV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetAccessScopesV1Params
func (_e *Invoker_Expecter) GetAccessScopesV1(ctx interface{}, params interface{}) *Invoker_GetAccessScopesV1_Call {
	return &Invoker_GetAccessScopesV1_Call{Call: _e.mock.On("GetAccessScopesV1", ctx, params)}
}

func (_c *Invoker_GetAccessScopesV1_Call) Run(run func(ctx context.Context, params client.GetAccessScopesV1Params)) *Invoker_GetAccessScopesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetAccessScopesV1Params))
	})
	return _c
}

func (_c *Invoker_GetAccessScopesV1_Call) Return(_a0 *client.AccessScopeV1, _a1 error) *Invoker_GetAccessScopesV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetAccessScopesV1_Call) RunAndReturn(run func(context.Context, client.GetAccessScopesV1Params) (*client.AccessScopeV1, error)) *Invoker_GetAccessScopesV1_Call {
	_c.Call.Return(run)
	return _c
}

// GetBundleV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetBundleV2(ctx context.Context, params client.GetBundleV2Params) (*client.BundleV2, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetBundleV2")
	}

	var r0 *client.BundleV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetBundleV2Params) (*client.BundleV2, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetBundleV2Params) *client.BundleV2); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BundleV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetBundleV2Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetBundleV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBundleV2'
type Invoker_GetBundleV2_Call struct {
	*mock.Call
}

// GetBundleV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetBundleV2Params
func (_e *Invoker_Expecter) GetBundleV2(ctx interface{}, params interface{}) *Invoker_GetBundleV2_Call {
	return &Invoker_GetBundleV2_Call{Call: _e.mock.On("GetBundleV2", ctx, params)}
}

func (_c *Invoker_GetBundleV2_Call) Run(run func(ctx context.Context, params client.GetBundleV2Params)) *Invoker_GetBundleV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetBundleV2Params))
	})
	return _c
}

func (_c *Invoker_GetBundleV2_Call) Return(_a0 *client.BundleV2, _a1 error) *Invoker_GetBundleV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetBundleV2_Call) RunAndReturn(run func(context.Context, client.GetBundleV2Params) (*client.BundleV2, error)) *Invoker_GetBundleV2_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectorV3 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetConnectorV3(ctx context.Context, params client.GetConnectorV3Params) (*client.ConnectorV3, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectorV3")
	}

	var r0 *client.ConnectorV3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetConnectorV3Params) (*client.ConnectorV3, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetConnectorV3Params) *client.ConnectorV3); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ConnectorV3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetConnectorV3Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetConnectorV3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectorV3'
type Invoker_GetConnectorV3_Call struct {
	*mock.Call
}

// GetConnectorV3 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetConnectorV3Params
func (_e *Invoker_Expecter) GetConnectorV3(ctx interface{}, params interface{}) *Invoker_GetConnectorV3_Call {
	return &Invoker_GetConnectorV3_Call{Call: _e.mock.On("GetConnectorV3", ctx, params)}
}

func (_c *Invoker_GetConnectorV3_Call) Run(run func(ctx context.Context, params client.GetConnectorV3Params)) *Invoker_GetConnectorV3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetConnectorV3Params))
	})
	return _c
}

func (_c *Invoker_GetConnectorV3_Call) Return(_a0 *client.ConnectorV3, _a1 error) *Invoker_GetConnectorV3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetConnectorV3_Call) RunAndReturn(run func(context.Context, client.GetConnectorV3Params) (*client.ConnectorV3, error)) *Invoker_GetConnectorV3_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetGroupV1(ctx context.Context, params client.GetGroupV1Params) (*client.GroupV1, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupV1")
	}

	var r0 *client.GroupV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetGroupV1Params) (*client.GroupV1, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetGroupV1Params) *client.GroupV1); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GroupV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetGroupV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetGroupV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupV1'
type Invoker_GetGroupV1_Call struct {
	*mock.Call
}

// GetGroupV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetGroupV1Params
func (_e *Invoker_Expecter) GetGroupV1(ctx interface{}, params interface{}) *Invoker_GetGroupV1_Call {
	return &Invoker_GetGroupV1_Call{Call: _e.mock.On("GetGroupV1", ctx, params)}
}

func (_c *Invoker_GetGroupV1_Call) Run(run func(ctx context.Context, params client.GetGroupV1Params)) *Invoker_GetGroupV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetGroupV1Params))
	})
	return _c
}

func (_c *Invoker_GetGroupV1_Call) Return(_a0 *client.GroupV1, _a1 error) *Invoker_GetGroupV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetGroupV1_Call) RunAndReturn(run func(context.Context, client.GetGroupV1Params) (*client.GroupV1, error)) *Invoker_GetGroupV1_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntegrationsByIdV4 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetIntegrationsByIdV4(ctx context.Context, params client.GetIntegrationsByIdV4Params) (*client.IntegrationV4, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationsByIdV4")
	}

	var r0 *client.IntegrationV4
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetIntegrationsByIdV4Params) (*client.IntegrationV4, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetIntegrationsByIdV4Params) *client.IntegrationV4); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.IntegrationV4)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetIntegrationsByIdV4Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetIntegrationsByIdV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntegrationsByIdV4'
type Invoker_GetIntegrationsByIdV4_Call struct {
	*mock.Call
}

// GetIntegrationsByIdV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetIntegrationsByIdV4Params
func (_e *Invoker_Expecter) GetIntegrationsByIdV4(ctx interface{}, params interface{}) *Invoker_GetIntegrationsByIdV4_Call {
	return &Invoker_GetIntegrationsByIdV4_Call{Call: _e.mock.On("GetIntegrationsByIdV4", ctx, params)}
}

func (_c *Invoker_GetIntegrationsByIdV4_Call) Run(run func(ctx context.Context, params client.GetIntegrationsByIdV4Params)) *Invoker_GetIntegrationsByIdV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetIntegrationsByIdV4Params))
	})
	return _c
}

func (_c *Invoker_GetIntegrationsByIdV4_Call) Return(_a0 *client.IntegrationV4, _a1 error) *Invoker_GetIntegrationsByIdV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetIntegrationsByIdV4_Call) RunAndReturn(run func(context.Context, client.GetIntegrationsByIdV4Params) (*client.IntegrationV4, error)) *Invoker_GetIntegrationsByIdV4_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, params
func (_m *Invoker) GetUser(ctx context.Context, params client.GetUserParams) (*client.UserModel, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *client.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetUserParams) (*client.UserModel, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetUserParams) *client.UserModel); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetUserParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type Invoker_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetUserParams
func (_e *Invoker_Expecter) GetUser(ctx interface{}, params interface{}) *Invoker_GetUser_Call {
	return &Invoker_GetUser_Call{Call: _e.mock.On("GetUser", ctx, params)}
}

func (_c *Invoker_GetUser_Call) Run(run func(ctx context.Context, params client.GetUserParams)) *Invoker_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetUserParams))
	})
	return _c
}

func (_c *Invoker_GetUser_Call) Return(_a0 *client.UserModel, _a1 error) *Invoker_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetUser_Call) RunAndReturn(run func(context.Context, client.GetUserParams) (*client.UserModel, error)) *Invoker_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessFlowsV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListAccessFlowsV2(ctx context.Context, params client.ListAccessFlowsV2Params) (*client.PublicApiListResponseAccessFlowPublicV2Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessFlowsV2")
	}

	var r0 *client.PublicApiListResponseAccessFlowPublicV2Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessFlowsV2Params) (*client.PublicApiListResponseAccessFlowPublicV2Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessFlowsV2Params) *client.PublicApiListResponseAccessFlowPublicV2Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseAccessFlowPublicV2Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListAccessFlowsV2Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListAccessFlowsV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessFlowsV2'
type Invoker_ListAccessFlowsV2_Call struct {
	*mock.Call
}

// ListAccessFlowsV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListAccessFlowsV2Params
func (_e *Invoker_Expecter) ListAccessFlowsV2(ctx interface{}, params interface{}) *Invoker_ListAccessFlowsV2_Call {
	return &Invoker_ListAccessFlowsV2_Call{Call: _e.mock.On("ListAccessFlowsV2", ctx, params)}
}

func (_c *Invoker_ListAccessFlowsV2_Call) Run(run func(ctx context.Context, params client.ListAccessFlowsV2Params)) *Invoker_ListAccessFlowsV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListAccessFlowsV2Params))
	})
	return _c
}

func (_c *Invoker_ListAccessFlowsV2_Call) Return(_a0 *client.PublicApiListResponseAccessFlowPublicV2Model, _a1 error) *Invoker_ListAccessFlowsV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListAccessFlowsV2_Call) RunAndReturn(run func(context.Context, client.ListAccessFlowsV2Params) (*client.PublicApiListResponseAccessFlowPublicV2Model, error)) *Invoker_ListAccessFlowsV2_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessScopesV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListAccessScopesV1(ctx context.Context, params client.ListAccessScopesV1Params) (*client.PublicApiListResponseAccessScopePublicV1Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessScopesV1")
	}

	var r0 *client.PublicApiListResponseAccessScopePublicV1Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessScopesV1Params) (*client.PublicApiListResponseAccessScopePublicV1Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessScopesV1Params) *client.PublicApiListResponseAccessScopePublicV1Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseAccessScopePublicV1Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListAccessScopesV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListAccessScopesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessScopesV1'
type Invoker_ListAccessScopesV1_Call struct {
	*mock.Call
}

// ListAccessScopesV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListAccessScopesV1Params
func (_e *Invoker_Expecter) ListAccessScopesV1(ctx interface{}, params interface{}) *Invoker_ListAccessScopesV1_Call {
	return &Invoker_ListAccessScopesV1_Call{Call: _e.mock.On("ListAccessScopesV1", ctx, params)}
}

func (_c *Invoker_ListAccessScopesV1_Call) Run(run func(ctx context.Context, params client.ListAccessScopesV1Params)) *Invoker_ListAccessScopesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListAccessScopesV1Params))
	})
	return _c
}

func (_c *Invoker_ListAccessScopesV1_Call) Return(_a0 *client.PublicApiListResponseAccessScopePublicV1Model, _a1 error) *Invoker_ListAccessScopesV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListAccessScopesV1_Call) RunAndReturn(run func(context.Context, client.ListAccessScopesV1Params) (*client.PublicApiListResponseAccessScopePublicV1Model, error)) *Invoker_ListAccessScopesV1_Call {
	_c.Call.Return(run)
	return _c
}

// ListBundlesV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListBundlesV2(ctx context.Context, params client.ListBundlesV2Params) (*client.PublicApiListResponseBundlePublicV2Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListBundlesV2")
	}

	var r0 *client.PublicApiListResponseBundlePublicV2Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListBundlesV2Params) (*client.PublicApiListResponseBundlePublicV2Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListBundlesV2Params) *client.PublicApiListResponseBundlePublicV2Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseBundlePublicV2Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListBundlesV2Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListBundlesV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBundlesV2'
type Invoker_ListBundlesV2_Call struct {
	*mock.Call
}

// ListBundlesV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListBundlesV2Params
func (_e *Invoker_Expecter) ListBundlesV2(ctx interface{}, params interface{}) *Invoker_ListBundlesV2_Call {
	return &Invoker_ListBundlesV2_Call{Call: _e.mock.On("ListBundlesV2", ctx, params)}
}

func (_c *Invoker_ListBundlesV2_Call) Run(run func(ctx context.Context, params client.ListBundlesV2Params)) *Invoker_ListBundlesV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListBundlesV2Params))
	})
	return _c
}

func (_c *Invoker_ListBundlesV2_Call) Return(_a0 *client.PublicApiListResponseBundlePublicV2Model, _a1 error) *Invoker_ListBundlesV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListBundlesV2_Call) RunAndReturn(run func(context.Context, client.ListBundlesV2Params) (*client.PublicApiListResponseBundlePublicV2Model, error)) *Invoker_ListBundlesV2_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectorsV3 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListConnectorsV3(ctx context.Context, params client.ListConnectorsV3Params) (*client.PublicApiListResponseConnectorPublicV3Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectorsV3")
	}

	var r0 *client.PublicApiListResponseConnectorPublicV3Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListConnectorsV3Params) (*client.PublicApiListResponseConnectorPublicV3Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListConnectorsV3Params) *client.PublicApiListResponseConnectorPublicV3Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseConnectorPublicV3Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListConnectorsV3Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListConnectorsV3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectorsV3'
type Invoker_ListConnectorsV3_Call struct {
	*mock.Call
}

// ListConnectorsV3 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListConnectorsV3Params
func (_e *Invoker_Expecter) ListConnectorsV3(ctx interface{}, params interface{}) *Invoker_ListConnectorsV3_Call {
	return &Invoker_ListConnectorsV3_Call{Call: _e.mock.On("ListConnectorsV3", ctx, params)}
}

func (_c *Invoker_ListConnectorsV3_Call) Run(run func(ctx context.Context, params client.ListConnectorsV3Params)) *Invoker_ListConnectorsV3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListConnectorsV3Params))
	})
	return _c
}

func (_c *Invoker_ListConnectorsV3_Call) Return(_a0 *client.PublicApiListResponseConnectorPublicV3Model, _a1 error) *Invoker_ListConnectorsV3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListConnectorsV3_Call) RunAndReturn(run func(context.Context, client.ListConnectorsV3Params) (*client.PublicApiListResponseConnectorPublicV3Model, error)) *Invoker_ListConnectorsV3_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupMembersV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListGroupMembersV1(ctx context.Context, params client.ListGroupMembersV1Params) (*client.PublicApiListResponseGroupMemberPublicV1Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupMembersV1")
	}

	var r0 *client.PublicApiListResponseGroupMemberPublicV1Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListGroupMembersV1Params) (*client.PublicApiListResponseGroupMemberPublicV1Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListGroupMembersV1Params) *client.PublicApiListResponseGroupMemberPublicV1Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseGroupMemberPublicV1Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListGroupMembersV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListGroupMembersV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupMembersV1'
type Invoker_ListGroupMembersV1_Call struct {
	*mock.Call
}

// ListGroupMembersV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListGroupMembersV1Params
func (_e *Invoker_Expecter) ListGroupMembersV1(ctx interface{}, params interface{}) *Invoker_ListGroupMembersV1_Call {
	return &Invoker_ListGroupMembersV1_Call{Call: _e.mock.On("ListGroupMembersV1", ctx, params)}
}

func (_c *Invoker_ListGroupMembersV1_Call) Run(run func(ctx context.Context, params client.ListGroupMembersV1Params)) *Invoker_ListGroupMembersV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListGroupMembersV1Params))
	})
	return _c
}

func (_c *Invoker_ListGroupMembersV1_Call) Return(_a0 *client.PublicApiListResponseGroupMemberPublicV1Model, _a1 error) *Invoker_ListGroupMembersV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListGroupMembersV1_Call) RunAndReturn(run func(context.Context, client.ListGroupMembersV1Params) (*client.PublicApiListResponseGroupMemberPublicV1Model, error)) *Invoker_ListGroupMembersV1_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListGroupsV1(ctx context.Context, params client.ListGroupsV1Params) (*client.PublicApiListResponseGroupPublicV1Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupsV1")
	}

	var r0 *client.PublicApiListResponseGroupPublicV1Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListGroupsV1Params) (*client.PublicApiListResponseGroupPublicV1Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListGroupsV1Params) *client.PublicApiListResponseGroupPublicV1Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseGroupPublicV1Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListGroupsV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListGroupsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsV1'
type Invoker_ListGroupsV1_Call struct {
	*mock.Call
}

// ListGroupsV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListGroupsV1Params
func (_e *Invoker_Expecter) ListGroupsV1(ctx interface{}, params interface{}) *Invoker_ListGroupsV1_Call {
	return &Invoker_ListGroupsV1_Call{Call: _e.mock.On("ListGroupsV1", ctx, params)}
}

func (_c *Invoker_ListGroupsV1_Call) Run(run func(ctx context.Context, params client.ListGroupsV1Params)) *Invoker_ListGroupsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListGroupsV1Params))
	})
	return _c
}

func (_c *Invoker_ListGroupsV1_Call) Return(_a0 *client.PublicApiListResponseGroupPublicV1Model, _a1 error) *Invoker_ListGroupsV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListGroupsV1_Call) RunAndReturn(run func(context.Context, client.ListGroupsV1Params) (*client.PublicApiListResponseGroupPublicV1Model, error)) *Invoker_ListGroupsV1_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntegrationsV4 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListIntegrationsV4(ctx context.Context, params client.ListIntegrationsV4Params) (*client.PublicApiListResponseIntegrationPublicV4Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListIntegrationsV4")
	}

	var r0 *client.PublicApiListResponseIntegrationPublicV4Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListIntegrationsV4Params) (*client.PublicApiListResponseIntegrationPublicV4Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListIntegrationsV4Params) *client.PublicApiListResponseIntegrationPublicV4Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseIntegrationPublicV4Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListIntegrationsV4Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListIntegrationsV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntegrationsV4'
type Invoker_ListIntegrationsV4_Call struct {
	*mock.Call
}

// ListIntegrationsV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListIntegrationsV4Params
func (_e *Invoker_Expecter) ListIntegrationsV4(ctx interface{}, params interface{}) *Invoker_ListIntegrationsV4_Call {
	return &Invoker_ListIntegrationsV4_Call{Call: _e.mock.On("ListIntegrationsV4", ctx, params)}
}

func (_c *Invoker_ListIntegrationsV4_Call) Run(run func(ctx context.Context, params client.ListIntegrationsV4Params)) *Invoker_ListIntegrationsV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListIntegrationsV4Params))
	})
	return _c
}

func (_c *Invoker_ListIntegrationsV4_Call) Return(_a0 *client.PublicApiListResponseIntegrationPublicV4Model, _a1 error) *Invoker_ListIntegrationsV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListIntegrationsV4_Call) RunAndReturn(run func(context.Context, client.ListIntegrationsV4Params) (*client.PublicApiListResponseIntegrationPublicV4Model, error)) *Invoker_ListIntegrationsV4_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx
func (_m *Invoker) ListUsers(ctx context.Context) (*client.PaginatedResponseUserModel, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *client.PaginatedResponseUserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*client.PaginatedResponseUserModel, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *client.PaginatedResponseUserModel); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseUserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type Invoker_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Invoker_Expecter) ListUsers(ctx interface{}) *Invoker_ListUsers_Call {
	return &Invoker_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx)}
}

func (_c *Invoker_ListUsers_Call) Run(run func(ctx context.Context)) *Invoker_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Invoker_ListUsers_Call) Return(_a0 *client.PaginatedResponseUserModel, _a1 error) *Invoker_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListUsers_Call) RunAndReturn(run func(context.Context) (*client.PaginatedResponseUserModel, error)) *Invoker_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupMemberV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) RemoveGroupMemberV1(ctx context.Context, params client.RemoveGroupMemberV1Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupMemberV1")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.RemoveGroupMemberV1Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_RemoveGroupMemberV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupMemberV1'
type Invoker_RemoveGroupMemberV1_Call struct {
	*mock.Call
}

// RemoveGroupMemberV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.RemoveGroupMemberV1Params
func (_e *Invoker_Expecter) RemoveGroupMemberV1(ctx interface{}, params interface{}) *Invoker_RemoveGroupMemberV1_Call {
	return &Invoker_RemoveGroupMemberV1_Call{Call: _e.mock.On("RemoveGroupMemberV1", ctx, params)}
}

func (_c *Invoker_RemoveGroupMemberV1_Call) Run(run func(ctx context.Context, params client.RemoveGroupMemberV1Params)) *Invoker_RemoveGroupMemberV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.RemoveGroupMemberV1Params))
	})
	return _c
}

func (_c *Invoker_RemoveGroupMemberV1_Call) Return(_a0 error) *Invoker_RemoveGroupMemberV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_RemoveGroupMemberV1_Call) RunAndReturn(run func(context.Context, client.RemoveGroupMemberV1Params) error) *Invoker_RemoveGroupMemberV1_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessFlowV2 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateAccessFlowV2(ctx context.Context, request *client.AccessFlowUpsertV2, params client.UpdateAccessFlowV2Params) (*client.AccessFlowV2, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessFlowV2")
	}

	var r0 *client.AccessFlowV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.AccessFlowUpsertV2, client.UpdateAccessFlowV2Params) (*client.AccessFlowV2, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.AccessFlowUpsertV2, client.UpdateAccessFlowV2Params) *client.AccessFlowV2); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessFlowV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.AccessFlowUpsertV2, client.UpdateAccessFlowV2Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateAccessFlowV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessFlowV2'
type Invoker_UpdateAccessFlowV2_Call struct {
	*mock.Call
}

// UpdateAccessFlowV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.AccessFlowUpsertV2
//   - params client.UpdateAccessFlowV2Params
func (_e *Invoker_Expecter) UpdateAccessFlowV2(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateAccessFlowV2_Call {
	return &Invoker_UpdateAccessFlowV2_Call{Call: _e.mock.On("UpdateAccessFlowV2", ctx, request, params)}
}

func (_c *Invoker_UpdateAccessFlowV2_Call) Run(run func(ctx context.Context, request *client.AccessFlowUpsertV2, params client.UpdateAccessFlowV2Params)) *Invoker_UpdateAccessFlowV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.AccessFlowUpsertV2), args[2].(client.UpdateAccessFlowV2Params))
	})
	return _c
}

func (_c *Invoker_UpdateAccessFlowV2_Call) Return(_a0 *client.AccessFlowV2, _a1 error) *Invoker_UpdateAccessFlowV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateAccessFlowV2_Call) RunAndReturn(run func(context.Context, *client.AccessFlowUpsertV2, client.UpdateAccessFlowV2Params) (*client.AccessFlowV2, error)) *Invoker_UpdateAccessFlowV2_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessScopesV1 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateAccessScopesV1(ctx context.Context, request *client.UpsertAccessScopeV1, params client.UpdateAccessScopesV1Params) (*client.AccessScopeV1, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessScopesV1")
	}

	var r0 *client.AccessScopeV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertAccessScopeV1, client.UpdateAccessScopesV1Params) (*client.AccessScopeV1, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertAccessScopeV1, client.UpdateAccessScopesV1Params) *client.AccessScopeV1); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessScopeV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpsertAccessScopeV1, client.UpdateAccessScopesV1Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateAccessScopesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessScopesV1'
type Invoker_UpdateAccessScopesV1_Call struct {
	*mock.Call
}

// UpdateAccessScopesV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpsertAccessScopeV1
//   - params client.UpdateAccessScopesV1Params
func (_e *Invoker_Expecter) UpdateAccessScopesV1(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateAccessScopesV1_Call {
	return &Invoker_UpdateAccessScopesV1_Call{Call: _e.mock.On("UpdateAccessScopesV1", ctx, request, params)}
}

func (_c *Invoker_UpdateAccessScopesV1_Call) Run(run func(ctx context.Context, request *client.UpsertAccessScopeV1, params client.UpdateAccessScopesV1Params)) *Invoker_UpdateAccessScopesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpsertAccessScopeV1), args[2].(client.UpdateAccessScopesV1Params))
	})
	return _c
}

func (_c *Invoker_UpdateAccessScopesV1_Call) Return(_a0 *client.AccessScopeV1, _a1 error) *Invoker_UpdateAccessScopesV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateAccessScopesV1_Call) RunAndReturn(run func(context.Context, *client.UpsertAccessScopeV1, client.UpdateAccessScopesV1Params) (*client.AccessScopeV1, error)) *Invoker_UpdateAccessScopesV1_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBundleV2 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateBundleV2(ctx context.Context, request *client.UpsertBundleV2, params client.UpdateBundleV2Params) (*client.BundleV2, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBundleV2")
	}

	var r0 *client.BundleV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertBundleV2, client.UpdateBundleV2Params) (*client.BundleV2, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertBundleV2, client.UpdateBundleV2Params) *client.BundleV2); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BundleV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpsertBundleV2, client.UpdateBundleV2Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateBundleV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBundleV2'
type Invoker_UpdateBundleV2_Call struct {
	*mock.Call
}

// UpdateBundleV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpsertBundleV2
//   - params client.UpdateBundleV2Params
func (_e *Invoker_Expecter) UpdateBundleV2(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateBundleV2_Call {
	return &Invoker_UpdateBundleV2_Call{Call: _e.mock.On("UpdateBundleV2", ctx, request, params)}
}

func (_c *Invoker_UpdateBundleV2_Call) Run(run func(ctx context.Context, request *client.UpsertBundleV2, params client.UpdateBundleV2Params)) *Invoker_UpdateBundleV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpsertBundleV2), args[2].(client.UpdateBundleV2Params))
	})
	return _c
}

func (_c *Invoker_UpdateBundleV2_Call) Return(_a0 *client.BundleV2, _a1 error) *Invoker_UpdateBundleV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateBundleV2_Call) RunAndReturn(run func(context.Context, *client.UpsertBundleV2, client.UpdateBundleV2Params) (*client.BundleV2, error)) *Invoker_UpdateBundleV2_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConnectorV3 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateConnectorV3(ctx context.Context, request *client.UpsertConnectorV3, params client.UpdateConnectorV3Params) (*client.ConnectorV3, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectorV3")
	}

	var r0 *client.ConnectorV3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertConnectorV3, client.UpdateConnectorV3Params) (*client.ConnectorV3, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertConnectorV3, client.UpdateConnectorV3Params) *client.ConnectorV3); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ConnectorV3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpsertConnectorV3, client.UpdateConnectorV3Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateConnectorV3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConnectorV3'
type Invoker_UpdateConnectorV3_Call struct {
	*mock.Call
}

// UpdateConnectorV3 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpsertConnectorV3
//   - params client.UpdateConnectorV3Params
func (_e *Invoker_Expecter) UpdateConnectorV3(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateConnectorV3_Call {
	return &Invoker_UpdateConnectorV3_Call{Call: _e.mock.On("UpdateConnectorV3", ctx, request, params)}
}

func (_c *Invoker_UpdateConnectorV3_Call) Run(run func(ctx context.Context, request *client.UpsertConnectorV3, params client.UpdateConnectorV3Params)) *Invoker_UpdateConnectorV3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpsertConnectorV3), args[2].(client.UpdateConnectorV3Params))
	})
	return _c
}

func (_c *Invoker_UpdateConnectorV3_Call) Return(_a0 *client.ConnectorV3, _a1 error) *Invoker_UpdateConnectorV3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateConnectorV3_Call) RunAndReturn(run func(context.Context, *client.UpsertConnectorV3, client.UpdateConnectorV3Params) (*client.ConnectorV3, error)) *Invoker_UpdateConnectorV3_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupMembersV1 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateGroupMembersV1(ctx context.Context, request *client.UpdateGroupMembersV1, params client.UpdateGroupMembersV1Params) error {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupMembersV1")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateGroupMembersV1, client.UpdateGroupMembersV1Params) error); ok {
		r0 = rf(ctx, request, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_UpdateGroupMembersV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupMembersV1'
type Invoker_UpdateGroupMembersV1_Call struct {
	*mock.Call
}

// UpdateGroupMembersV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpdateGroupMembersV1
//   - params client.UpdateGroupMembersV1Params
func (_e *Invoker_Expecter) UpdateGroupMembersV1(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateGroupMembersV1_Call {
	return &Invoker_UpdateGroupMembersV1_Call{Call: _e.mock.On("UpdateGroupMembersV1", ctx, request, params)}
}

func (_c *Invoker_UpdateGroupMembersV1_Call) Run(run func(ctx context.Context, request *client.UpdateGroupMembersV1, params client.UpdateGroupMembersV1Params)) *Invoker_UpdateGroupMembersV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpdateGroupMembersV1), args[2].(client.UpdateGroupMembersV1Params))
	})
	return _c
}

func (_c *Invoker_UpdateGroupMembersV1_Call) Return(_a0 error) *Invoker_UpdateGroupMembersV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_UpdateGroupMembersV1_Call) RunAndReturn(run func(context.Context, *client.UpdateGroupMembersV1, client.UpdateGroupMembersV1Params) error) *Invoker_UpdateGroupMembersV1_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupV1 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateGroupV1(ctx context.Context, request *client.UpdateGroupV1, params client.UpdateGroupV1Params) (*client.GroupV1, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupV1")
	}

	var r0 *client.GroupV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateGroupV1, client.UpdateGroupV1Params) (*client.GroupV1, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateGroupV1, client.UpdateGroupV1Params) *client.GroupV1); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GroupV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpdateGroupV1, client.UpdateGroupV1Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateGroupV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupV1'
type Invoker_UpdateGroupV1_Call struct {
	*mock.Call
}

// UpdateGroupV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpdateGroupV1
//   - params client.UpdateGroupV1Params
func (_e *Invoker_Expecter) UpdateGroupV1(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateGroupV1_Call {
	return &Invoker_UpdateGroupV1_Call{Call: _e.mock.On("UpdateGroupV1", ctx, request, params)}
}

func (_c *Invoker_UpdateGroupV1_Call) Run(run func(ctx context.Context, request *client.UpdateGroupV1, params client.UpdateGroupV1Params)) *Invoker_UpdateGroupV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpdateGroupV1), args[2].(client.UpdateGroupV1Params))
	})
	return _c
}

func (_c *Invoker_UpdateGroupV1_Call) Return(_a0 *client.GroupV1, _a1 error) *Invoker_UpdateGroupV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateGroupV1_Call) RunAndReturn(run func(context.Context, *client.UpdateGroupV1, client.UpdateGroupV1Params) (*client.GroupV1, error)) *Invoker_UpdateGroupV1_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIntegrationV4 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateIntegrationV4(ctx context.Context, request *client.UpdateIntegrationV4, params client.UpdateIntegrationV4Params) (*client.IntegrationV4, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIntegrationV4")
	}

	var r0 *client.IntegrationV4
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateIntegrationV4, client.UpdateIntegrationV4Params) (*client.IntegrationV4, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateIntegrationV4, client.UpdateIntegrationV4Params) *client.IntegrationV4); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.IntegrationV4)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpdateIntegrationV4, client.UpdateIntegrationV4Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateIntegrationV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIntegrationV4'
type Invoker_UpdateIntegrationV4_Call struct {
	*mock.Call
}

// UpdateIntegrationV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpdateIntegrationV4
//   - params client.UpdateIntegrationV4Params
func (_e *Invoker_Expecter) UpdateIntegrationV4(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateIntegrationV4_Call {
	return &Invoker_UpdateIntegrationV4_Call{Call: _e.mock.On("UpdateIntegrationV4", ctx, request, params)}
}

func (_c *Invoker_UpdateIntegrationV4_Call) Run(run func(ctx context.Context, request *client.UpdateIntegrationV4, params client.UpdateIntegrationV4Params)) *Invoker_UpdateIntegrationV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpdateIntegrationV4), args[2].(client.UpdateIntegrationV4Params))
	})
	return _c
}

func (_c *Invoker_UpdateIntegrationV4_Call) Return(_a0 *client.IntegrationV4, _a1 error) *Invoker_UpdateIntegrationV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateIntegrationV4_Call) RunAndReturn(run func(context.Context, *client.UpdateIntegrationV4, client.UpdateIntegrationV4Params) (*client.IntegrationV4, error)) *Invoker_UpdateIntegrationV4_Call {
	_c.Call.Return(run)
	return _c
}

// NewInvoker creates a new instance of Invoker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvoker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Invoker {
	mock := &Invoker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
