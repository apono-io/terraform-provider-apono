// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/apono-io/terraform-provider-apono/internal/v2/api/client"

	mock "github.com/stretchr/testify/mock"
)

// Invoker is an autogenerated mock type for the Invoker type
type Invoker struct {
	mock.Mock
}

type Invoker_Expecter struct {
	mock *mock.Mock
}

func (_m *Invoker) EXPECT() *Invoker_Expecter {
	return &Invoker_Expecter{mock: &_m.Mock}
}

// AddGroupMemberV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) AddGroupMemberV1(ctx context.Context, params client.AddGroupMemberV1Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupMemberV1")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.AddGroupMemberV1Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_AddGroupMemberV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupMemberV1'
type Invoker_AddGroupMemberV1_Call struct {
	*mock.Call
}

// AddGroupMemberV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.AddGroupMemberV1Params
func (_e *Invoker_Expecter) AddGroupMemberV1(ctx interface{}, params interface{}) *Invoker_AddGroupMemberV1_Call {
	return &Invoker_AddGroupMemberV1_Call{Call: _e.mock.On("AddGroupMemberV1", ctx, params)}
}

func (_c *Invoker_AddGroupMemberV1_Call) Run(run func(ctx context.Context, params client.AddGroupMemberV1Params)) *Invoker_AddGroupMemberV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.AddGroupMemberV1Params))
	})
	return _c
}

func (_c *Invoker_AddGroupMemberV1_Call) Return(_a0 error) *Invoker_AddGroupMemberV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_AddGroupMemberV1_Call) RunAndReturn(run func(context.Context, client.AddGroupMemberV1Params) error) *Invoker_AddGroupMemberV1_Call {
	_c.Call.Return(run)
	return _c
}

// BulkDeleteAttributesFormIdentities provides a mock function with given fields: ctx, request
func (_m *Invoker) BulkDeleteAttributesFormIdentities(ctx context.Context, request []client.IdentityAttributeKeysModel) (*client.IdentitiesAttributesResponseModel, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for BulkDeleteAttributesFormIdentities")
	}

	var r0 *client.IdentitiesAttributesResponseModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []client.IdentityAttributeKeysModel) (*client.IdentitiesAttributesResponseModel, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []client.IdentityAttributeKeysModel) *client.IdentitiesAttributesResponseModel); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.IdentitiesAttributesResponseModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []client.IdentityAttributeKeysModel) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_BulkDeleteAttributesFormIdentities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDeleteAttributesFormIdentities'
type Invoker_BulkDeleteAttributesFormIdentities_Call struct {
	*mock.Call
}

// BulkDeleteAttributesFormIdentities is a helper method to define mock.On call
//   - ctx context.Context
//   - request []client.IdentityAttributeKeysModel
func (_e *Invoker_Expecter) BulkDeleteAttributesFormIdentities(ctx interface{}, request interface{}) *Invoker_BulkDeleteAttributesFormIdentities_Call {
	return &Invoker_BulkDeleteAttributesFormIdentities_Call{Call: _e.mock.On("BulkDeleteAttributesFormIdentities", ctx, request)}
}

func (_c *Invoker_BulkDeleteAttributesFormIdentities_Call) Run(run func(ctx context.Context, request []client.IdentityAttributeKeysModel)) *Invoker_BulkDeleteAttributesFormIdentities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]client.IdentityAttributeKeysModel))
	})
	return _c
}

func (_c *Invoker_BulkDeleteAttributesFormIdentities_Call) Return(_a0 *client.IdentitiesAttributesResponseModel, _a1 error) *Invoker_BulkDeleteAttributesFormIdentities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_BulkDeleteAttributesFormIdentities_Call) RunAndReturn(run func(context.Context, []client.IdentityAttributeKeysModel) (*client.IdentitiesAttributesResponseModel, error)) *Invoker_BulkDeleteAttributesFormIdentities_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUpsertAttributesForIdentities provides a mock function with given fields: ctx, request
func (_m *Invoker) BulkUpsertAttributesForIdentities(ctx context.Context, request []client.IdentityAttributeModel) (*client.IdentitiesAttributesResponseModel, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpsertAttributesForIdentities")
	}

	var r0 *client.IdentitiesAttributesResponseModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []client.IdentityAttributeModel) (*client.IdentitiesAttributesResponseModel, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []client.IdentityAttributeModel) *client.IdentitiesAttributesResponseModel); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.IdentitiesAttributesResponseModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []client.IdentityAttributeModel) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_BulkUpsertAttributesForIdentities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpsertAttributesForIdentities'
type Invoker_BulkUpsertAttributesForIdentities_Call struct {
	*mock.Call
}

// BulkUpsertAttributesForIdentities is a helper method to define mock.On call
//   - ctx context.Context
//   - request []client.IdentityAttributeModel
func (_e *Invoker_Expecter) BulkUpsertAttributesForIdentities(ctx interface{}, request interface{}) *Invoker_BulkUpsertAttributesForIdentities_Call {
	return &Invoker_BulkUpsertAttributesForIdentities_Call{Call: _e.mock.On("BulkUpsertAttributesForIdentities", ctx, request)}
}

func (_c *Invoker_BulkUpsertAttributesForIdentities_Call) Run(run func(ctx context.Context, request []client.IdentityAttributeModel)) *Invoker_BulkUpsertAttributesForIdentities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]client.IdentityAttributeModel))
	})
	return _c
}

func (_c *Invoker_BulkUpsertAttributesForIdentities_Call) Return(_a0 *client.IdentitiesAttributesResponseModel, _a1 error) *Invoker_BulkUpsertAttributesForIdentities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_BulkUpsertAttributesForIdentities_Call) RunAndReturn(run func(context.Context, []client.IdentityAttributeModel) (*client.IdentitiesAttributesResponseModel, error)) *Invoker_BulkUpsertAttributesForIdentities_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessBundle provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateAccessBundle(ctx context.Context, request *client.UpsertAccessBundleV1) (*client.AccessBundleV1, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessBundle")
	}

	var r0 *client.AccessBundleV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertAccessBundleV1) (*client.AccessBundleV1, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertAccessBundleV1) *client.AccessBundleV1); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessBundleV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpsertAccessBundleV1) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateAccessBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessBundle'
type Invoker_CreateAccessBundle_Call struct {
	*mock.Call
}

// CreateAccessBundle is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpsertAccessBundleV1
func (_e *Invoker_Expecter) CreateAccessBundle(ctx interface{}, request interface{}) *Invoker_CreateAccessBundle_Call {
	return &Invoker_CreateAccessBundle_Call{Call: _e.mock.On("CreateAccessBundle", ctx, request)}
}

func (_c *Invoker_CreateAccessBundle_Call) Run(run func(ctx context.Context, request *client.UpsertAccessBundleV1)) *Invoker_CreateAccessBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpsertAccessBundleV1))
	})
	return _c
}

func (_c *Invoker_CreateAccessBundle_Call) Return(_a0 *client.AccessBundleV1, _a1 error) *Invoker_CreateAccessBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateAccessBundle_Call) RunAndReturn(run func(context.Context, *client.UpsertAccessBundleV1) (*client.AccessBundleV1, error)) *Invoker_CreateAccessBundle_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessFlowV1 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateAccessFlowV1(ctx context.Context, request *client.UpsertAccessFlowV1) (*client.AccessFlowV1, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessFlowV1")
	}

	var r0 *client.AccessFlowV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertAccessFlowV1) (*client.AccessFlowV1, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertAccessFlowV1) *client.AccessFlowV1); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessFlowV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpsertAccessFlowV1) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateAccessFlowV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessFlowV1'
type Invoker_CreateAccessFlowV1_Call struct {
	*mock.Call
}

// CreateAccessFlowV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpsertAccessFlowV1
func (_e *Invoker_Expecter) CreateAccessFlowV1(ctx interface{}, request interface{}) *Invoker_CreateAccessFlowV1_Call {
	return &Invoker_CreateAccessFlowV1_Call{Call: _e.mock.On("CreateAccessFlowV1", ctx, request)}
}

func (_c *Invoker_CreateAccessFlowV1_Call) Run(run func(ctx context.Context, request *client.UpsertAccessFlowV1)) *Invoker_CreateAccessFlowV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpsertAccessFlowV1))
	})
	return _c
}

func (_c *Invoker_CreateAccessFlowV1_Call) Return(_a0 *client.AccessFlowV1, _a1 error) *Invoker_CreateAccessFlowV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateAccessFlowV1_Call) RunAndReturn(run func(context.Context, *client.UpsertAccessFlowV1) (*client.AccessFlowV1, error)) *Invoker_CreateAccessFlowV1_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessFlowV2 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateAccessFlowV2(ctx context.Context, request *client.AccessFlowUpsertPublicV2Model) (*client.AccessFlowPublicV2Model, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessFlowV2")
	}

	var r0 *client.AccessFlowPublicV2Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.AccessFlowUpsertPublicV2Model) (*client.AccessFlowPublicV2Model, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.AccessFlowUpsertPublicV2Model) *client.AccessFlowPublicV2Model); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessFlowPublicV2Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.AccessFlowUpsertPublicV2Model) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateAccessFlowV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessFlowV2'
type Invoker_CreateAccessFlowV2_Call struct {
	*mock.Call
}

// CreateAccessFlowV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.AccessFlowUpsertPublicV2Model
func (_e *Invoker_Expecter) CreateAccessFlowV2(ctx interface{}, request interface{}) *Invoker_CreateAccessFlowV2_Call {
	return &Invoker_CreateAccessFlowV2_Call{Call: _e.mock.On("CreateAccessFlowV2", ctx, request)}
}

func (_c *Invoker_CreateAccessFlowV2_Call) Run(run func(ctx context.Context, request *client.AccessFlowUpsertPublicV2Model)) *Invoker_CreateAccessFlowV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.AccessFlowUpsertPublicV2Model))
	})
	return _c
}

func (_c *Invoker_CreateAccessFlowV2_Call) Return(_a0 *client.AccessFlowPublicV2Model, _a1 error) *Invoker_CreateAccessFlowV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateAccessFlowV2_Call) RunAndReturn(run func(context.Context, *client.AccessFlowUpsertPublicV2Model) (*client.AccessFlowPublicV2Model, error)) *Invoker_CreateAccessFlowV2_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessRequest provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateAccessRequest(ctx context.Context, request *client.CreateAccessRequest) (*client.AccessRequest, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessRequest")
	}

	var r0 *client.AccessRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateAccessRequest) (*client.AccessRequest, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateAccessRequest) *client.AccessRequest); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.CreateAccessRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateAccessRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessRequest'
type Invoker_CreateAccessRequest_Call struct {
	*mock.Call
}

// CreateAccessRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.CreateAccessRequest
func (_e *Invoker_Expecter) CreateAccessRequest(ctx interface{}, request interface{}) *Invoker_CreateAccessRequest_Call {
	return &Invoker_CreateAccessRequest_Call{Call: _e.mock.On("CreateAccessRequest", ctx, request)}
}

func (_c *Invoker_CreateAccessRequest_Call) Run(run func(ctx context.Context, request *client.CreateAccessRequest)) *Invoker_CreateAccessRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.CreateAccessRequest))
	})
	return _c
}

func (_c *Invoker_CreateAccessRequest_Call) Return(_a0 *client.AccessRequest, _a1 error) *Invoker_CreateAccessRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateAccessRequest_Call) RunAndReturn(run func(context.Context, *client.CreateAccessRequest) (*client.AccessRequest, error)) *Invoker_CreateAccessRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessRequestV4 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateAccessRequestV4(ctx context.Context, request *client.CreateAccessRequestV4) ([]client.AccessRequestV4, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessRequestV4")
	}

	var r0 []client.AccessRequestV4
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateAccessRequestV4) ([]client.AccessRequestV4, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateAccessRequestV4) []client.AccessRequestV4); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.AccessRequestV4)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.CreateAccessRequestV4) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateAccessRequestV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessRequestV4'
type Invoker_CreateAccessRequestV4_Call struct {
	*mock.Call
}

// CreateAccessRequestV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.CreateAccessRequestV4
func (_e *Invoker_Expecter) CreateAccessRequestV4(ctx interface{}, request interface{}) *Invoker_CreateAccessRequestV4_Call {
	return &Invoker_CreateAccessRequestV4_Call{Call: _e.mock.On("CreateAccessRequestV4", ctx, request)}
}

func (_c *Invoker_CreateAccessRequestV4_Call) Run(run func(ctx context.Context, request *client.CreateAccessRequestV4)) *Invoker_CreateAccessRequestV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.CreateAccessRequestV4))
	})
	return _c
}

func (_c *Invoker_CreateAccessRequestV4_Call) Return(_a0 []client.AccessRequestV4, _a1 error) *Invoker_CreateAccessRequestV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateAccessRequestV4_Call) RunAndReturn(run func(context.Context, *client.CreateAccessRequestV4) ([]client.AccessRequestV4, error)) *Invoker_CreateAccessRequestV4_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessScopesV1 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateAccessScopesV1(ctx context.Context, request *client.UpsertAccessScopeV1) (*client.AccessScopeV1, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessScopesV1")
	}

	var r0 *client.AccessScopeV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertAccessScopeV1) (*client.AccessScopeV1, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertAccessScopeV1) *client.AccessScopeV1); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessScopeV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpsertAccessScopeV1) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateAccessScopesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessScopesV1'
type Invoker_CreateAccessScopesV1_Call struct {
	*mock.Call
}

// CreateAccessScopesV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpsertAccessScopeV1
func (_e *Invoker_Expecter) CreateAccessScopesV1(ctx interface{}, request interface{}) *Invoker_CreateAccessScopesV1_Call {
	return &Invoker_CreateAccessScopesV1_Call{Call: _e.mock.On("CreateAccessScopesV1", ctx, request)}
}

func (_c *Invoker_CreateAccessScopesV1_Call) Run(run func(ctx context.Context, request *client.UpsertAccessScopeV1)) *Invoker_CreateAccessScopesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpsertAccessScopeV1))
	})
	return _c
}

func (_c *Invoker_CreateAccessScopesV1_Call) Return(_a0 *client.AccessScopeV1, _a1 error) *Invoker_CreateAccessScopesV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateAccessScopesV1_Call) RunAndReturn(run func(context.Context, *client.UpsertAccessScopeV1) (*client.AccessScopeV1, error)) *Invoker_CreateAccessScopesV1_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBundleV2 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateBundleV2(ctx context.Context, request *client.UpsertBundlePublicV2Model) (*client.BundlePublicV2Model, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateBundleV2")
	}

	var r0 *client.BundlePublicV2Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertBundlePublicV2Model) (*client.BundlePublicV2Model, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertBundlePublicV2Model) *client.BundlePublicV2Model); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BundlePublicV2Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpsertBundlePublicV2Model) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateBundleV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBundleV2'
type Invoker_CreateBundleV2_Call struct {
	*mock.Call
}

// CreateBundleV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpsertBundlePublicV2Model
func (_e *Invoker_Expecter) CreateBundleV2(ctx interface{}, request interface{}) *Invoker_CreateBundleV2_Call {
	return &Invoker_CreateBundleV2_Call{Call: _e.mock.On("CreateBundleV2", ctx, request)}
}

func (_c *Invoker_CreateBundleV2_Call) Run(run func(ctx context.Context, request *client.UpsertBundlePublicV2Model)) *Invoker_CreateBundleV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpsertBundlePublicV2Model))
	})
	return _c
}

func (_c *Invoker_CreateBundleV2_Call) Return(_a0 *client.BundlePublicV2Model, _a1 error) *Invoker_CreateBundleV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateBundleV2_Call) RunAndReturn(run func(context.Context, *client.UpsertBundlePublicV2Model) (*client.BundlePublicV2Model, error)) *Invoker_CreateBundleV2_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupV1 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateGroupV1(ctx context.Context, request *client.CreateGroupV1) (*client.GroupV1, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupV1")
	}

	var r0 *client.GroupV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateGroupV1) (*client.GroupV1, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateGroupV1) *client.GroupV1); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GroupV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.CreateGroupV1) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateGroupV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupV1'
type Invoker_CreateGroupV1_Call struct {
	*mock.Call
}

// CreateGroupV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.CreateGroupV1
func (_e *Invoker_Expecter) CreateGroupV1(ctx interface{}, request interface{}) *Invoker_CreateGroupV1_Call {
	return &Invoker_CreateGroupV1_Call{Call: _e.mock.On("CreateGroupV1", ctx, request)}
}

func (_c *Invoker_CreateGroupV1_Call) Run(run func(ctx context.Context, request *client.CreateGroupV1)) *Invoker_CreateGroupV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.CreateGroupV1))
	})
	return _c
}

func (_c *Invoker_CreateGroupV1_Call) Return(_a0 *client.GroupV1, _a1 error) *Invoker_CreateGroupV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateGroupV1_Call) RunAndReturn(run func(context.Context, *client.CreateGroupV1) (*client.GroupV1, error)) *Invoker_CreateGroupV1_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIntegrationV2 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateIntegrationV2(ctx context.Context, request *client.CreateIntegration) (*client.Integration, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateIntegrationV2")
	}

	var r0 *client.Integration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateIntegration) (*client.Integration, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateIntegration) *client.Integration); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Integration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.CreateIntegration) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateIntegrationV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIntegrationV2'
type Invoker_CreateIntegrationV2_Call struct {
	*mock.Call
}

// CreateIntegrationV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.CreateIntegration
func (_e *Invoker_Expecter) CreateIntegrationV2(ctx interface{}, request interface{}) *Invoker_CreateIntegrationV2_Call {
	return &Invoker_CreateIntegrationV2_Call{Call: _e.mock.On("CreateIntegrationV2", ctx, request)}
}

func (_c *Invoker_CreateIntegrationV2_Call) Run(run func(ctx context.Context, request *client.CreateIntegration)) *Invoker_CreateIntegrationV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.CreateIntegration))
	})
	return _c
}

func (_c *Invoker_CreateIntegrationV2_Call) Return(_a0 *client.Integration, _a1 error) *Invoker_CreateIntegrationV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateIntegrationV2_Call) RunAndReturn(run func(context.Context, *client.CreateIntegration) (*client.Integration, error)) *Invoker_CreateIntegrationV2_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIntegrationV4 provides a mock function with given fields: ctx, request
func (_m *Invoker) CreateIntegrationV4(ctx context.Context, request *client.CreateIntegrationV4) (*client.IntegrationV4, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateIntegrationV4")
	}

	var r0 *client.IntegrationV4
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateIntegrationV4) (*client.IntegrationV4, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.CreateIntegrationV4) *client.IntegrationV4); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.IntegrationV4)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.CreateIntegrationV4) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_CreateIntegrationV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIntegrationV4'
type Invoker_CreateIntegrationV4_Call struct {
	*mock.Call
}

// CreateIntegrationV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.CreateIntegrationV4
func (_e *Invoker_Expecter) CreateIntegrationV4(ctx interface{}, request interface{}) *Invoker_CreateIntegrationV4_Call {
	return &Invoker_CreateIntegrationV4_Call{Call: _e.mock.On("CreateIntegrationV4", ctx, request)}
}

func (_c *Invoker_CreateIntegrationV4_Call) Run(run func(ctx context.Context, request *client.CreateIntegrationV4)) *Invoker_CreateIntegrationV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.CreateIntegrationV4))
	})
	return _c
}

func (_c *Invoker_CreateIntegrationV4_Call) Return(_a0 *client.IntegrationV4, _a1 error) *Invoker_CreateIntegrationV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_CreateIntegrationV4_Call) RunAndReturn(run func(context.Context, *client.CreateIntegrationV4) (*client.IntegrationV4, error)) *Invoker_CreateIntegrationV4_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessBundle provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteAccessBundle(ctx context.Context, params client.DeleteAccessBundleParams) (*client.MessageResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessBundle")
	}

	var r0 *client.MessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteAccessBundleParams) (*client.MessageResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteAccessBundleParams) *client.MessageResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.MessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.DeleteAccessBundleParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_DeleteAccessBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessBundle'
type Invoker_DeleteAccessBundle_Call struct {
	*mock.Call
}

// DeleteAccessBundle is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteAccessBundleParams
func (_e *Invoker_Expecter) DeleteAccessBundle(ctx interface{}, params interface{}) *Invoker_DeleteAccessBundle_Call {
	return &Invoker_DeleteAccessBundle_Call{Call: _e.mock.On("DeleteAccessBundle", ctx, params)}
}

func (_c *Invoker_DeleteAccessBundle_Call) Run(run func(ctx context.Context, params client.DeleteAccessBundleParams)) *Invoker_DeleteAccessBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteAccessBundleParams))
	})
	return _c
}

func (_c *Invoker_DeleteAccessBundle_Call) Return(_a0 *client.MessageResponse, _a1 error) *Invoker_DeleteAccessBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_DeleteAccessBundle_Call) RunAndReturn(run func(context.Context, client.DeleteAccessBundleParams) (*client.MessageResponse, error)) *Invoker_DeleteAccessBundle_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessFlowV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteAccessFlowV1(ctx context.Context, params client.DeleteAccessFlowV1Params) (*client.MessageResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessFlowV1")
	}

	var r0 *client.MessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteAccessFlowV1Params) (*client.MessageResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteAccessFlowV1Params) *client.MessageResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.MessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.DeleteAccessFlowV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_DeleteAccessFlowV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessFlowV1'
type Invoker_DeleteAccessFlowV1_Call struct {
	*mock.Call
}

// DeleteAccessFlowV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteAccessFlowV1Params
func (_e *Invoker_Expecter) DeleteAccessFlowV1(ctx interface{}, params interface{}) *Invoker_DeleteAccessFlowV1_Call {
	return &Invoker_DeleteAccessFlowV1_Call{Call: _e.mock.On("DeleteAccessFlowV1", ctx, params)}
}

func (_c *Invoker_DeleteAccessFlowV1_Call) Run(run func(ctx context.Context, params client.DeleteAccessFlowV1Params)) *Invoker_DeleteAccessFlowV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteAccessFlowV1Params))
	})
	return _c
}

func (_c *Invoker_DeleteAccessFlowV1_Call) Return(_a0 *client.MessageResponse, _a1 error) *Invoker_DeleteAccessFlowV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_DeleteAccessFlowV1_Call) RunAndReturn(run func(context.Context, client.DeleteAccessFlowV1Params) (*client.MessageResponse, error)) *Invoker_DeleteAccessFlowV1_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessFlowV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteAccessFlowV2(ctx context.Context, params client.DeleteAccessFlowV2Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessFlowV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteAccessFlowV2Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_DeleteAccessFlowV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessFlowV2'
type Invoker_DeleteAccessFlowV2_Call struct {
	*mock.Call
}

// DeleteAccessFlowV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteAccessFlowV2Params
func (_e *Invoker_Expecter) DeleteAccessFlowV2(ctx interface{}, params interface{}) *Invoker_DeleteAccessFlowV2_Call {
	return &Invoker_DeleteAccessFlowV2_Call{Call: _e.mock.On("DeleteAccessFlowV2", ctx, params)}
}

func (_c *Invoker_DeleteAccessFlowV2_Call) Run(run func(ctx context.Context, params client.DeleteAccessFlowV2Params)) *Invoker_DeleteAccessFlowV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteAccessFlowV2Params))
	})
	return _c
}

func (_c *Invoker_DeleteAccessFlowV2_Call) Return(_a0 error) *Invoker_DeleteAccessFlowV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_DeleteAccessFlowV2_Call) RunAndReturn(run func(context.Context, client.DeleteAccessFlowV2Params) error) *Invoker_DeleteAccessFlowV2_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessScopesV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteAccessScopesV1(ctx context.Context, params client.DeleteAccessScopesV1Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessScopesV1")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteAccessScopesV1Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_DeleteAccessScopesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessScopesV1'
type Invoker_DeleteAccessScopesV1_Call struct {
	*mock.Call
}

// DeleteAccessScopesV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteAccessScopesV1Params
func (_e *Invoker_Expecter) DeleteAccessScopesV1(ctx interface{}, params interface{}) *Invoker_DeleteAccessScopesV1_Call {
	return &Invoker_DeleteAccessScopesV1_Call{Call: _e.mock.On("DeleteAccessScopesV1", ctx, params)}
}

func (_c *Invoker_DeleteAccessScopesV1_Call) Run(run func(ctx context.Context, params client.DeleteAccessScopesV1Params)) *Invoker_DeleteAccessScopesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteAccessScopesV1Params))
	})
	return _c
}

func (_c *Invoker_DeleteAccessScopesV1_Call) Return(_a0 error) *Invoker_DeleteAccessScopesV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_DeleteAccessScopesV1_Call) RunAndReturn(run func(context.Context, client.DeleteAccessScopesV1Params) error) *Invoker_DeleteAccessScopesV1_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBundleV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteBundleV2(ctx context.Context, params client.DeleteBundleV2Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBundleV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteBundleV2Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_DeleteBundleV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBundleV2'
type Invoker_DeleteBundleV2_Call struct {
	*mock.Call
}

// DeleteBundleV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteBundleV2Params
func (_e *Invoker_Expecter) DeleteBundleV2(ctx interface{}, params interface{}) *Invoker_DeleteBundleV2_Call {
	return &Invoker_DeleteBundleV2_Call{Call: _e.mock.On("DeleteBundleV2", ctx, params)}
}

func (_c *Invoker_DeleteBundleV2_Call) Run(run func(ctx context.Context, params client.DeleteBundleV2Params)) *Invoker_DeleteBundleV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteBundleV2Params))
	})
	return _c
}

func (_c *Invoker_DeleteBundleV2_Call) Return(_a0 error) *Invoker_DeleteBundleV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_DeleteBundleV2_Call) RunAndReturn(run func(context.Context, client.DeleteBundleV2Params) error) *Invoker_DeleteBundleV2_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConnectorV3 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteConnectorV3(ctx context.Context, params client.DeleteConnectorV3Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnectorV3")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteConnectorV3Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_DeleteConnectorV3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConnectorV3'
type Invoker_DeleteConnectorV3_Call struct {
	*mock.Call
}

// DeleteConnectorV3 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteConnectorV3Params
func (_e *Invoker_Expecter) DeleteConnectorV3(ctx interface{}, params interface{}) *Invoker_DeleteConnectorV3_Call {
	return &Invoker_DeleteConnectorV3_Call{Call: _e.mock.On("DeleteConnectorV3", ctx, params)}
}

func (_c *Invoker_DeleteConnectorV3_Call) Run(run func(ctx context.Context, params client.DeleteConnectorV3Params)) *Invoker_DeleteConnectorV3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteConnectorV3Params))
	})
	return _c
}

func (_c *Invoker_DeleteConnectorV3_Call) Return(_a0 error) *Invoker_DeleteConnectorV3_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_DeleteConnectorV3_Call) RunAndReturn(run func(context.Context, client.DeleteConnectorV3Params) error) *Invoker_DeleteConnectorV3_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteGroupV1(ctx context.Context, params client.DeleteGroupV1Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupV1")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteGroupV1Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_DeleteGroupV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupV1'
type Invoker_DeleteGroupV1_Call struct {
	*mock.Call
}

// DeleteGroupV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteGroupV1Params
func (_e *Invoker_Expecter) DeleteGroupV1(ctx interface{}, params interface{}) *Invoker_DeleteGroupV1_Call {
	return &Invoker_DeleteGroupV1_Call{Call: _e.mock.On("DeleteGroupV1", ctx, params)}
}

func (_c *Invoker_DeleteGroupV1_Call) Run(run func(ctx context.Context, params client.DeleteGroupV1Params)) *Invoker_DeleteGroupV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteGroupV1Params))
	})
	return _c
}

func (_c *Invoker_DeleteGroupV1_Call) Return(_a0 error) *Invoker_DeleteGroupV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_DeleteGroupV1_Call) RunAndReturn(run func(context.Context, client.DeleteGroupV1Params) error) *Invoker_DeleteGroupV1_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIntegrationV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteIntegrationV2(ctx context.Context, params client.DeleteIntegrationV2Params) (*client.MessageResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntegrationV2")
	}

	var r0 *client.MessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteIntegrationV2Params) (*client.MessageResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteIntegrationV2Params) *client.MessageResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.MessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.DeleteIntegrationV2Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_DeleteIntegrationV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIntegrationV2'
type Invoker_DeleteIntegrationV2_Call struct {
	*mock.Call
}

// DeleteIntegrationV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteIntegrationV2Params
func (_e *Invoker_Expecter) DeleteIntegrationV2(ctx interface{}, params interface{}) *Invoker_DeleteIntegrationV2_Call {
	return &Invoker_DeleteIntegrationV2_Call{Call: _e.mock.On("DeleteIntegrationV2", ctx, params)}
}

func (_c *Invoker_DeleteIntegrationV2_Call) Run(run func(ctx context.Context, params client.DeleteIntegrationV2Params)) *Invoker_DeleteIntegrationV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteIntegrationV2Params))
	})
	return _c
}

func (_c *Invoker_DeleteIntegrationV2_Call) Return(_a0 *client.MessageResponse, _a1 error) *Invoker_DeleteIntegrationV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_DeleteIntegrationV2_Call) RunAndReturn(run func(context.Context, client.DeleteIntegrationV2Params) (*client.MessageResponse, error)) *Invoker_DeleteIntegrationV2_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIntegrationV4 provides a mock function with given fields: ctx, params
func (_m *Invoker) DeleteIntegrationV4(ctx context.Context, params client.DeleteIntegrationV4Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntegrationV4")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeleteIntegrationV4Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_DeleteIntegrationV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIntegrationV4'
type Invoker_DeleteIntegrationV4_Call struct {
	*mock.Call
}

// DeleteIntegrationV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.DeleteIntegrationV4Params
func (_e *Invoker_Expecter) DeleteIntegrationV4(ctx interface{}, params interface{}) *Invoker_DeleteIntegrationV4_Call {
	return &Invoker_DeleteIntegrationV4_Call{Call: _e.mock.On("DeleteIntegrationV4", ctx, params)}
}

func (_c *Invoker_DeleteIntegrationV4_Call) Run(run func(ctx context.Context, params client.DeleteIntegrationV4Params)) *Invoker_DeleteIntegrationV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeleteIntegrationV4Params))
	})
	return _c
}

func (_c *Invoker_DeleteIntegrationV4_Call) Return(_a0 error) *Invoker_DeleteIntegrationV4_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_DeleteIntegrationV4_Call) RunAndReturn(run func(context.Context, client.DeleteIntegrationV4Params) error) *Invoker_DeleteIntegrationV4_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessBundle provides a mock function with given fields: ctx, params
func (_m *Invoker) GetAccessBundle(ctx context.Context, params client.GetAccessBundleParams) (*client.AccessBundleV1, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessBundle")
	}

	var r0 *client.AccessBundleV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessBundleParams) (*client.AccessBundleV1, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessBundleParams) *client.AccessBundleV1); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessBundleV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetAccessBundleParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetAccessBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessBundle'
type Invoker_GetAccessBundle_Call struct {
	*mock.Call
}

// GetAccessBundle is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetAccessBundleParams
func (_e *Invoker_Expecter) GetAccessBundle(ctx interface{}, params interface{}) *Invoker_GetAccessBundle_Call {
	return &Invoker_GetAccessBundle_Call{Call: _e.mock.On("GetAccessBundle", ctx, params)}
}

func (_c *Invoker_GetAccessBundle_Call) Run(run func(ctx context.Context, params client.GetAccessBundleParams)) *Invoker_GetAccessBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetAccessBundleParams))
	})
	return _c
}

func (_c *Invoker_GetAccessBundle_Call) Return(_a0 *client.AccessBundleV1, _a1 error) *Invoker_GetAccessBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetAccessBundle_Call) RunAndReturn(run func(context.Context, client.GetAccessBundleParams) (*client.AccessBundleV1, error)) *Invoker_GetAccessBundle_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessFlowV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetAccessFlowV1(ctx context.Context, params client.GetAccessFlowV1Params) (*client.AccessFlowV1, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessFlowV1")
	}

	var r0 *client.AccessFlowV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessFlowV1Params) (*client.AccessFlowV1, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessFlowV1Params) *client.AccessFlowV1); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessFlowV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetAccessFlowV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetAccessFlowV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessFlowV1'
type Invoker_GetAccessFlowV1_Call struct {
	*mock.Call
}

// GetAccessFlowV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetAccessFlowV1Params
func (_e *Invoker_Expecter) GetAccessFlowV1(ctx interface{}, params interface{}) *Invoker_GetAccessFlowV1_Call {
	return &Invoker_GetAccessFlowV1_Call{Call: _e.mock.On("GetAccessFlowV1", ctx, params)}
}

func (_c *Invoker_GetAccessFlowV1_Call) Run(run func(ctx context.Context, params client.GetAccessFlowV1Params)) *Invoker_GetAccessFlowV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetAccessFlowV1Params))
	})
	return _c
}

func (_c *Invoker_GetAccessFlowV1_Call) Return(_a0 *client.AccessFlowV1, _a1 error) *Invoker_GetAccessFlowV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetAccessFlowV1_Call) RunAndReturn(run func(context.Context, client.GetAccessFlowV1Params) (*client.AccessFlowV1, error)) *Invoker_GetAccessFlowV1_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessFlowV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetAccessFlowV2(ctx context.Context, params client.GetAccessFlowV2Params) (*client.AccessFlowPublicV2Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessFlowV2")
	}

	var r0 *client.AccessFlowPublicV2Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessFlowV2Params) (*client.AccessFlowPublicV2Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessFlowV2Params) *client.AccessFlowPublicV2Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessFlowPublicV2Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetAccessFlowV2Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetAccessFlowV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessFlowV2'
type Invoker_GetAccessFlowV2_Call struct {
	*mock.Call
}

// GetAccessFlowV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetAccessFlowV2Params
func (_e *Invoker_Expecter) GetAccessFlowV2(ctx interface{}, params interface{}) *Invoker_GetAccessFlowV2_Call {
	return &Invoker_GetAccessFlowV2_Call{Call: _e.mock.On("GetAccessFlowV2", ctx, params)}
}

func (_c *Invoker_GetAccessFlowV2_Call) Run(run func(ctx context.Context, params client.GetAccessFlowV2Params)) *Invoker_GetAccessFlowV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetAccessFlowV2Params))
	})
	return _c
}

func (_c *Invoker_GetAccessFlowV2_Call) Return(_a0 *client.AccessFlowPublicV2Model, _a1 error) *Invoker_GetAccessFlowV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetAccessFlowV2_Call) RunAndReturn(run func(context.Context, client.GetAccessFlowV2Params) (*client.AccessFlowPublicV2Model, error)) *Invoker_GetAccessFlowV2_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessRequest provides a mock function with given fields: ctx, params
func (_m *Invoker) GetAccessRequest(ctx context.Context, params client.GetAccessRequestParams) (*client.AccessRequest, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessRequest")
	}

	var r0 *client.AccessRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessRequestParams) (*client.AccessRequest, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessRequestParams) *client.AccessRequest); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetAccessRequestParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetAccessRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessRequest'
type Invoker_GetAccessRequest_Call struct {
	*mock.Call
}

// GetAccessRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetAccessRequestParams
func (_e *Invoker_Expecter) GetAccessRequest(ctx interface{}, params interface{}) *Invoker_GetAccessRequest_Call {
	return &Invoker_GetAccessRequest_Call{Call: _e.mock.On("GetAccessRequest", ctx, params)}
}

func (_c *Invoker_GetAccessRequest_Call) Run(run func(ctx context.Context, params client.GetAccessRequestParams)) *Invoker_GetAccessRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetAccessRequestParams))
	})
	return _c
}

func (_c *Invoker_GetAccessRequest_Call) Return(_a0 *client.AccessRequest, _a1 error) *Invoker_GetAccessRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetAccessRequest_Call) RunAndReturn(run func(context.Context, client.GetAccessRequestParams) (*client.AccessRequest, error)) *Invoker_GetAccessRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessRequestDetails provides a mock function with given fields: ctx, params
func (_m *Invoker) GetAccessRequestDetails(ctx context.Context, params client.GetAccessRequestDetailsParams) (*client.ConnectDetailsResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessRequestDetails")
	}

	var r0 *client.ConnectDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessRequestDetailsParams) (*client.ConnectDetailsResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessRequestDetailsParams) *client.ConnectDetailsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ConnectDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetAccessRequestDetailsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetAccessRequestDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessRequestDetails'
type Invoker_GetAccessRequestDetails_Call struct {
	*mock.Call
}

// GetAccessRequestDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetAccessRequestDetailsParams
func (_e *Invoker_Expecter) GetAccessRequestDetails(ctx interface{}, params interface{}) *Invoker_GetAccessRequestDetails_Call {
	return &Invoker_GetAccessRequestDetails_Call{Call: _e.mock.On("GetAccessRequestDetails", ctx, params)}
}

func (_c *Invoker_GetAccessRequestDetails_Call) Run(run func(ctx context.Context, params client.GetAccessRequestDetailsParams)) *Invoker_GetAccessRequestDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetAccessRequestDetailsParams))
	})
	return _c
}

func (_c *Invoker_GetAccessRequestDetails_Call) Return(_a0 *client.ConnectDetailsResponse, _a1 error) *Invoker_GetAccessRequestDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetAccessRequestDetails_Call) RunAndReturn(run func(context.Context, client.GetAccessRequestDetailsParams) (*client.ConnectDetailsResponse, error)) *Invoker_GetAccessRequestDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessRequestEntitlementsV4 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetAccessRequestEntitlementsV4(ctx context.Context, params client.GetAccessRequestEntitlementsV4Params) (*client.PublicApiListResponseAccessRequestEntitlementPublicV4Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessRequestEntitlementsV4")
	}

	var r0 *client.PublicApiListResponseAccessRequestEntitlementPublicV4Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessRequestEntitlementsV4Params) (*client.PublicApiListResponseAccessRequestEntitlementPublicV4Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessRequestEntitlementsV4Params) *client.PublicApiListResponseAccessRequestEntitlementPublicV4Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseAccessRequestEntitlementPublicV4Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetAccessRequestEntitlementsV4Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetAccessRequestEntitlementsV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessRequestEntitlementsV4'
type Invoker_GetAccessRequestEntitlementsV4_Call struct {
	*mock.Call
}

// GetAccessRequestEntitlementsV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetAccessRequestEntitlementsV4Params
func (_e *Invoker_Expecter) GetAccessRequestEntitlementsV4(ctx interface{}, params interface{}) *Invoker_GetAccessRequestEntitlementsV4_Call {
	return &Invoker_GetAccessRequestEntitlementsV4_Call{Call: _e.mock.On("GetAccessRequestEntitlementsV4", ctx, params)}
}

func (_c *Invoker_GetAccessRequestEntitlementsV4_Call) Run(run func(ctx context.Context, params client.GetAccessRequestEntitlementsV4Params)) *Invoker_GetAccessRequestEntitlementsV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetAccessRequestEntitlementsV4Params))
	})
	return _c
}

func (_c *Invoker_GetAccessRequestEntitlementsV4_Call) Return(_a0 *client.PublicApiListResponseAccessRequestEntitlementPublicV4Model, _a1 error) *Invoker_GetAccessRequestEntitlementsV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetAccessRequestEntitlementsV4_Call) RunAndReturn(run func(context.Context, client.GetAccessRequestEntitlementsV4Params) (*client.PublicApiListResponseAccessRequestEntitlementPublicV4Model, error)) *Invoker_GetAccessRequestEntitlementsV4_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessRequestsV4 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetAccessRequestsV4(ctx context.Context, params client.GetAccessRequestsV4Params) (*client.AccessRequestV4, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessRequestsV4")
	}

	var r0 *client.AccessRequestV4
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessRequestsV4Params) (*client.AccessRequestV4, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessRequestsV4Params) *client.AccessRequestV4); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessRequestV4)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetAccessRequestsV4Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetAccessRequestsV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessRequestsV4'
type Invoker_GetAccessRequestsV4_Call struct {
	*mock.Call
}

// GetAccessRequestsV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetAccessRequestsV4Params
func (_e *Invoker_Expecter) GetAccessRequestsV4(ctx interface{}, params interface{}) *Invoker_GetAccessRequestsV4_Call {
	return &Invoker_GetAccessRequestsV4_Call{Call: _e.mock.On("GetAccessRequestsV4", ctx, params)}
}

func (_c *Invoker_GetAccessRequestsV4_Call) Run(run func(ctx context.Context, params client.GetAccessRequestsV4Params)) *Invoker_GetAccessRequestsV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetAccessRequestsV4Params))
	})
	return _c
}

func (_c *Invoker_GetAccessRequestsV4_Call) Return(_a0 *client.AccessRequestV4, _a1 error) *Invoker_GetAccessRequestsV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetAccessRequestsV4_Call) RunAndReturn(run func(context.Context, client.GetAccessRequestsV4Params) (*client.AccessRequestV4, error)) *Invoker_GetAccessRequestsV4_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessScopesV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetAccessScopesV1(ctx context.Context, params client.GetAccessScopesV1Params) (*client.AccessScopeV1, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessScopesV1")
	}

	var r0 *client.AccessScopeV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessScopesV1Params) (*client.AccessScopeV1, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessScopesV1Params) *client.AccessScopeV1); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessScopeV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetAccessScopesV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetAccessScopesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessScopesV1'
type Invoker_GetAccessScopesV1_Call struct {
	*mock.Call
}

// GetAccessScopesV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetAccessScopesV1Params
func (_e *Invoker_Expecter) GetAccessScopesV1(ctx interface{}, params interface{}) *Invoker_GetAccessScopesV1_Call {
	return &Invoker_GetAccessScopesV1_Call{Call: _e.mock.On("GetAccessScopesV1", ctx, params)}
}

func (_c *Invoker_GetAccessScopesV1_Call) Run(run func(ctx context.Context, params client.GetAccessScopesV1Params)) *Invoker_GetAccessScopesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetAccessScopesV1Params))
	})
	return _c
}

func (_c *Invoker_GetAccessScopesV1_Call) Return(_a0 *client.AccessScopeV1, _a1 error) *Invoker_GetAccessScopesV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetAccessScopesV1_Call) RunAndReturn(run func(context.Context, client.GetAccessScopesV1Params) (*client.AccessScopeV1, error)) *Invoker_GetAccessScopesV1_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessSessionAccessDetailsV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetAccessSessionAccessDetailsV1(ctx context.Context, params client.GetAccessSessionAccessDetailsV1Params) (*client.AccessSessionDetailsV1, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessSessionAccessDetailsV1")
	}

	var r0 *client.AccessSessionDetailsV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessSessionAccessDetailsV1Params) (*client.AccessSessionDetailsV1, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessSessionAccessDetailsV1Params) *client.AccessSessionDetailsV1); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessSessionDetailsV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetAccessSessionAccessDetailsV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetAccessSessionAccessDetailsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessSessionAccessDetailsV1'
type Invoker_GetAccessSessionAccessDetailsV1_Call struct {
	*mock.Call
}

// GetAccessSessionAccessDetailsV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetAccessSessionAccessDetailsV1Params
func (_e *Invoker_Expecter) GetAccessSessionAccessDetailsV1(ctx interface{}, params interface{}) *Invoker_GetAccessSessionAccessDetailsV1_Call {
	return &Invoker_GetAccessSessionAccessDetailsV1_Call{Call: _e.mock.On("GetAccessSessionAccessDetailsV1", ctx, params)}
}

func (_c *Invoker_GetAccessSessionAccessDetailsV1_Call) Run(run func(ctx context.Context, params client.GetAccessSessionAccessDetailsV1Params)) *Invoker_GetAccessSessionAccessDetailsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetAccessSessionAccessDetailsV1Params))
	})
	return _c
}

func (_c *Invoker_GetAccessSessionAccessDetailsV1_Call) Return(_a0 *client.AccessSessionDetailsV1, _a1 error) *Invoker_GetAccessSessionAccessDetailsV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetAccessSessionAccessDetailsV1_Call) RunAndReturn(run func(context.Context, client.GetAccessSessionAccessDetailsV1Params) (*client.AccessSessionDetailsV1, error)) *Invoker_GetAccessSessionAccessDetailsV1_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessSessionV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetAccessSessionV1(ctx context.Context, params client.GetAccessSessionV1Params) (*client.AccessSessionV1, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessSessionV1")
	}

	var r0 *client.AccessSessionV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessSessionV1Params) (*client.AccessSessionV1, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetAccessSessionV1Params) *client.AccessSessionV1); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessSessionV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetAccessSessionV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetAccessSessionV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessSessionV1'
type Invoker_GetAccessSessionV1_Call struct {
	*mock.Call
}

// GetAccessSessionV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetAccessSessionV1Params
func (_e *Invoker_Expecter) GetAccessSessionV1(ctx interface{}, params interface{}) *Invoker_GetAccessSessionV1_Call {
	return &Invoker_GetAccessSessionV1_Call{Call: _e.mock.On("GetAccessSessionV1", ctx, params)}
}

func (_c *Invoker_GetAccessSessionV1_Call) Run(run func(ctx context.Context, params client.GetAccessSessionV1Params)) *Invoker_GetAccessSessionV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetAccessSessionV1Params))
	})
	return _c
}

func (_c *Invoker_GetAccessSessionV1_Call) Return(_a0 *client.AccessSessionV1, _a1 error) *Invoker_GetAccessSessionV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetAccessSessionV1_Call) RunAndReturn(run func(context.Context, client.GetAccessSessionV1Params) (*client.AccessSessionV1, error)) *Invoker_GetAccessSessionV1_Call {
	_c.Call.Return(run)
	return _c
}

// GetBundleV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetBundleV2(ctx context.Context, params client.GetBundleV2Params) (*client.BundlePublicV2Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetBundleV2")
	}

	var r0 *client.BundlePublicV2Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetBundleV2Params) (*client.BundlePublicV2Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetBundleV2Params) *client.BundlePublicV2Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BundlePublicV2Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetBundleV2Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetBundleV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBundleV2'
type Invoker_GetBundleV2_Call struct {
	*mock.Call
}

// GetBundleV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetBundleV2Params
func (_e *Invoker_Expecter) GetBundleV2(ctx interface{}, params interface{}) *Invoker_GetBundleV2_Call {
	return &Invoker_GetBundleV2_Call{Call: _e.mock.On("GetBundleV2", ctx, params)}
}

func (_c *Invoker_GetBundleV2_Call) Run(run func(ctx context.Context, params client.GetBundleV2Params)) *Invoker_GetBundleV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetBundleV2Params))
	})
	return _c
}

func (_c *Invoker_GetBundleV2_Call) Return(_a0 *client.BundlePublicV2Model, _a1 error) *Invoker_GetBundleV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetBundleV2_Call) RunAndReturn(run func(context.Context, client.GetBundleV2Params) (*client.BundlePublicV2Model, error)) *Invoker_GetBundleV2_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectorV3 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetConnectorV3(ctx context.Context, params client.GetConnectorV3Params) (*client.ConnectorV3, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectorV3")
	}

	var r0 *client.ConnectorV3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetConnectorV3Params) (*client.ConnectorV3, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetConnectorV3Params) *client.ConnectorV3); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ConnectorV3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetConnectorV3Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetConnectorV3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectorV3'
type Invoker_GetConnectorV3_Call struct {
	*mock.Call
}

// GetConnectorV3 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetConnectorV3Params
func (_e *Invoker_Expecter) GetConnectorV3(ctx interface{}, params interface{}) *Invoker_GetConnectorV3_Call {
	return &Invoker_GetConnectorV3_Call{Call: _e.mock.On("GetConnectorV3", ctx, params)}
}

func (_c *Invoker_GetConnectorV3_Call) Run(run func(ctx context.Context, params client.GetConnectorV3Params)) *Invoker_GetConnectorV3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetConnectorV3Params))
	})
	return _c
}

func (_c *Invoker_GetConnectorV3_Call) Return(_a0 *client.ConnectorV3, _a1 error) *Invoker_GetConnectorV3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetConnectorV3_Call) RunAndReturn(run func(context.Context, client.GetConnectorV3Params) (*client.ConnectorV3, error)) *Invoker_GetConnectorV3_Call {
	_c.Call.Return(run)
	return _c
}

// GetGrantAccessConnectorActionParams provides a mock function with given fields: ctx, request
func (_m *Invoker) GetGrantAccessConnectorActionParams(ctx context.Context, request *client.GetGrantRevokeAccessConnectorActionParamsModel) (*client.ConnectorActionParamsModel, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetGrantAccessConnectorActionParams")
	}

	var r0 *client.ConnectorActionParamsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetGrantRevokeAccessConnectorActionParamsModel) (*client.ConnectorActionParamsModel, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetGrantRevokeAccessConnectorActionParamsModel) *client.ConnectorActionParamsModel); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ConnectorActionParamsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetGrantRevokeAccessConnectorActionParamsModel) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetGrantAccessConnectorActionParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrantAccessConnectorActionParams'
type Invoker_GetGrantAccessConnectorActionParams_Call struct {
	*mock.Call
}

// GetGrantAccessConnectorActionParams is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.GetGrantRevokeAccessConnectorActionParamsModel
func (_e *Invoker_Expecter) GetGrantAccessConnectorActionParams(ctx interface{}, request interface{}) *Invoker_GetGrantAccessConnectorActionParams_Call {
	return &Invoker_GetGrantAccessConnectorActionParams_Call{Call: _e.mock.On("GetGrantAccessConnectorActionParams", ctx, request)}
}

func (_c *Invoker_GetGrantAccessConnectorActionParams_Call) Run(run func(ctx context.Context, request *client.GetGrantRevokeAccessConnectorActionParamsModel)) *Invoker_GetGrantAccessConnectorActionParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.GetGrantRevokeAccessConnectorActionParamsModel))
	})
	return _c
}

func (_c *Invoker_GetGrantAccessConnectorActionParams_Call) Return(_a0 *client.ConnectorActionParamsModel, _a1 error) *Invoker_GetGrantAccessConnectorActionParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetGrantAccessConnectorActionParams_Call) RunAndReturn(run func(context.Context, *client.GetGrantRevokeAccessConnectorActionParamsModel) (*client.ConnectorActionParamsModel, error)) *Invoker_GetGrantAccessConnectorActionParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetGroupV1(ctx context.Context, params client.GetGroupV1Params) (*client.GroupV1, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupV1")
	}

	var r0 *client.GroupV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetGroupV1Params) (*client.GroupV1, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetGroupV1Params) *client.GroupV1); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GroupV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetGroupV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetGroupV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupV1'
type Invoker_GetGroupV1_Call struct {
	*mock.Call
}

// GetGroupV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetGroupV1Params
func (_e *Invoker_Expecter) GetGroupV1(ctx interface{}, params interface{}) *Invoker_GetGroupV1_Call {
	return &Invoker_GetGroupV1_Call{Call: _e.mock.On("GetGroupV1", ctx, params)}
}

func (_c *Invoker_GetGroupV1_Call) Run(run func(ctx context.Context, params client.GetGroupV1Params)) *Invoker_GetGroupV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetGroupV1Params))
	})
	return _c
}

func (_c *Invoker_GetGroupV1_Call) Return(_a0 *client.GroupV1, _a1 error) *Invoker_GetGroupV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetGroupV1_Call) RunAndReturn(run func(context.Context, client.GetGroupV1Params) (*client.GroupV1, error)) *Invoker_GetGroupV1_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntegrationConfig provides a mock function with given fields: ctx, params
func (_m *Invoker) GetIntegrationConfig(ctx context.Context, params client.GetIntegrationConfigParams) (*client.IntegrationConfig, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationConfig")
	}

	var r0 *client.IntegrationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetIntegrationConfigParams) (*client.IntegrationConfig, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetIntegrationConfigParams) *client.IntegrationConfig); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.IntegrationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetIntegrationConfigParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetIntegrationConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntegrationConfig'
type Invoker_GetIntegrationConfig_Call struct {
	*mock.Call
}

// GetIntegrationConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetIntegrationConfigParams
func (_e *Invoker_Expecter) GetIntegrationConfig(ctx interface{}, params interface{}) *Invoker_GetIntegrationConfig_Call {
	return &Invoker_GetIntegrationConfig_Call{Call: _e.mock.On("GetIntegrationConfig", ctx, params)}
}

func (_c *Invoker_GetIntegrationConfig_Call) Run(run func(ctx context.Context, params client.GetIntegrationConfigParams)) *Invoker_GetIntegrationConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetIntegrationConfigParams))
	})
	return _c
}

func (_c *Invoker_GetIntegrationConfig_Call) Return(_a0 *client.IntegrationConfig, _a1 error) *Invoker_GetIntegrationConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetIntegrationConfig_Call) RunAndReturn(run func(context.Context, client.GetIntegrationConfigParams) (*client.IntegrationConfig, error)) *Invoker_GetIntegrationConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntegrationPermissions provides a mock function with given fields: ctx, params
func (_m *Invoker) GetIntegrationPermissions(ctx context.Context, params client.GetIntegrationPermissionsParams) (*client.PaginatedResponsePermissionV3Response, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationPermissions")
	}

	var r0 *client.PaginatedResponsePermissionV3Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetIntegrationPermissionsParams) (*client.PaginatedResponsePermissionV3Response, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetIntegrationPermissionsParams) *client.PaginatedResponsePermissionV3Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponsePermissionV3Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetIntegrationPermissionsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetIntegrationPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntegrationPermissions'
type Invoker_GetIntegrationPermissions_Call struct {
	*mock.Call
}

// GetIntegrationPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetIntegrationPermissionsParams
func (_e *Invoker_Expecter) GetIntegrationPermissions(ctx interface{}, params interface{}) *Invoker_GetIntegrationPermissions_Call {
	return &Invoker_GetIntegrationPermissions_Call{Call: _e.mock.On("GetIntegrationPermissions", ctx, params)}
}

func (_c *Invoker_GetIntegrationPermissions_Call) Run(run func(ctx context.Context, params client.GetIntegrationPermissionsParams)) *Invoker_GetIntegrationPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetIntegrationPermissionsParams))
	})
	return _c
}

func (_c *Invoker_GetIntegrationPermissions_Call) Return(_a0 *client.PaginatedResponsePermissionV3Response, _a1 error) *Invoker_GetIntegrationPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetIntegrationPermissions_Call) RunAndReturn(run func(context.Context, client.GetIntegrationPermissionsParams) (*client.PaginatedResponsePermissionV3Response, error)) *Invoker_GetIntegrationPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntegrationResources provides a mock function with given fields: ctx, params
func (_m *Invoker) GetIntegrationResources(ctx context.Context, params client.GetIntegrationResourcesParams) (*client.PaginatedResponseResourceV3Response, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationResources")
	}

	var r0 *client.PaginatedResponseResourceV3Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetIntegrationResourcesParams) (*client.PaginatedResponseResourceV3Response, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetIntegrationResourcesParams) *client.PaginatedResponseResourceV3Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseResourceV3Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetIntegrationResourcesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetIntegrationResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntegrationResources'
type Invoker_GetIntegrationResources_Call struct {
	*mock.Call
}

// GetIntegrationResources is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetIntegrationResourcesParams
func (_e *Invoker_Expecter) GetIntegrationResources(ctx interface{}, params interface{}) *Invoker_GetIntegrationResources_Call {
	return &Invoker_GetIntegrationResources_Call{Call: _e.mock.On("GetIntegrationResources", ctx, params)}
}

func (_c *Invoker_GetIntegrationResources_Call) Run(run func(ctx context.Context, params client.GetIntegrationResourcesParams)) *Invoker_GetIntegrationResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetIntegrationResourcesParams))
	})
	return _c
}

func (_c *Invoker_GetIntegrationResources_Call) Return(_a0 *client.PaginatedResponseResourceV3Response, _a1 error) *Invoker_GetIntegrationResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetIntegrationResources_Call) RunAndReturn(run func(context.Context, client.GetIntegrationResourcesParams) (*client.PaginatedResponseResourceV3Response, error)) *Invoker_GetIntegrationResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntegrationV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetIntegrationV2(ctx context.Context, params client.GetIntegrationV2Params) (*client.Integration, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationV2")
	}

	var r0 *client.Integration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetIntegrationV2Params) (*client.Integration, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetIntegrationV2Params) *client.Integration); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Integration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetIntegrationV2Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetIntegrationV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntegrationV2'
type Invoker_GetIntegrationV2_Call struct {
	*mock.Call
}

// GetIntegrationV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetIntegrationV2Params
func (_e *Invoker_Expecter) GetIntegrationV2(ctx interface{}, params interface{}) *Invoker_GetIntegrationV2_Call {
	return &Invoker_GetIntegrationV2_Call{Call: _e.mock.On("GetIntegrationV2", ctx, params)}
}

func (_c *Invoker_GetIntegrationV2_Call) Run(run func(ctx context.Context, params client.GetIntegrationV2Params)) *Invoker_GetIntegrationV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetIntegrationV2Params))
	})
	return _c
}

func (_c *Invoker_GetIntegrationV2_Call) Return(_a0 *client.Integration, _a1 error) *Invoker_GetIntegrationV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetIntegrationV2_Call) RunAndReturn(run func(context.Context, client.GetIntegrationV2Params) (*client.Integration, error)) *Invoker_GetIntegrationV2_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntegrationsByIdV4 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetIntegrationsByIdV4(ctx context.Context, params client.GetIntegrationsByIdV4Params) (*client.IntegrationV4, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationsByIdV4")
	}

	var r0 *client.IntegrationV4
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetIntegrationsByIdV4Params) (*client.IntegrationV4, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetIntegrationsByIdV4Params) *client.IntegrationV4); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.IntegrationV4)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetIntegrationsByIdV4Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetIntegrationsByIdV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntegrationsByIdV4'
type Invoker_GetIntegrationsByIdV4_Call struct {
	*mock.Call
}

// GetIntegrationsByIdV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetIntegrationsByIdV4Params
func (_e *Invoker_Expecter) GetIntegrationsByIdV4(ctx interface{}, params interface{}) *Invoker_GetIntegrationsByIdV4_Call {
	return &Invoker_GetIntegrationsByIdV4_Call{Call: _e.mock.On("GetIntegrationsByIdV4", ctx, params)}
}

func (_c *Invoker_GetIntegrationsByIdV4_Call) Run(run func(ctx context.Context, params client.GetIntegrationsByIdV4Params)) *Invoker_GetIntegrationsByIdV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetIntegrationsByIdV4Params))
	})
	return _c
}

func (_c *Invoker_GetIntegrationsByIdV4_Call) Return(_a0 *client.IntegrationV4, _a1 error) *Invoker_GetIntegrationsByIdV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetIntegrationsByIdV4_Call) RunAndReturn(run func(context.Context, client.GetIntegrationsByIdV4Params) (*client.IntegrationV4, error)) *Invoker_GetIntegrationsByIdV4_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceUserTags provides a mock function with given fields: ctx, params
func (_m *Invoker) GetResourceUserTags(ctx context.Context, params client.GetResourceUserTagsParams) (*client.ResourceUserTagsResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceUserTags")
	}

	var r0 *client.ResourceUserTagsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetResourceUserTagsParams) (*client.ResourceUserTagsResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetResourceUserTagsParams) *client.ResourceUserTagsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ResourceUserTagsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetResourceUserTagsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetResourceUserTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceUserTags'
type Invoker_GetResourceUserTags_Call struct {
	*mock.Call
}

// GetResourceUserTags is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetResourceUserTagsParams
func (_e *Invoker_Expecter) GetResourceUserTags(ctx interface{}, params interface{}) *Invoker_GetResourceUserTags_Call {
	return &Invoker_GetResourceUserTags_Call{Call: _e.mock.On("GetResourceUserTags", ctx, params)}
}

func (_c *Invoker_GetResourceUserTags_Call) Run(run func(ctx context.Context, params client.GetResourceUserTagsParams)) *Invoker_GetResourceUserTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetResourceUserTagsParams))
	})
	return _c
}

func (_c *Invoker_GetResourceUserTags_Call) Return(_a0 *client.ResourceUserTagsResponse, _a1 error) *Invoker_GetResourceUserTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetResourceUserTags_Call) RunAndReturn(run func(context.Context, client.GetResourceUserTagsParams) (*client.ResourceUserTagsResponse, error)) *Invoker_GetResourceUserTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetRevokeAccessConnectorActionParams provides a mock function with given fields: ctx, request
func (_m *Invoker) GetRevokeAccessConnectorActionParams(ctx context.Context, request *client.GetGrantRevokeAccessConnectorActionParamsModel) (*client.ConnectorActionParamsModel, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetRevokeAccessConnectorActionParams")
	}

	var r0 *client.ConnectorActionParamsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetGrantRevokeAccessConnectorActionParamsModel) (*client.ConnectorActionParamsModel, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetGrantRevokeAccessConnectorActionParamsModel) *client.ConnectorActionParamsModel); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ConnectorActionParamsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetGrantRevokeAccessConnectorActionParamsModel) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetRevokeAccessConnectorActionParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRevokeAccessConnectorActionParams'
type Invoker_GetRevokeAccessConnectorActionParams_Call struct {
	*mock.Call
}

// GetRevokeAccessConnectorActionParams is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.GetGrantRevokeAccessConnectorActionParamsModel
func (_e *Invoker_Expecter) GetRevokeAccessConnectorActionParams(ctx interface{}, request interface{}) *Invoker_GetRevokeAccessConnectorActionParams_Call {
	return &Invoker_GetRevokeAccessConnectorActionParams_Call{Call: _e.mock.On("GetRevokeAccessConnectorActionParams", ctx, request)}
}

func (_c *Invoker_GetRevokeAccessConnectorActionParams_Call) Run(run func(ctx context.Context, request *client.GetGrantRevokeAccessConnectorActionParamsModel)) *Invoker_GetRevokeAccessConnectorActionParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.GetGrantRevokeAccessConnectorActionParamsModel))
	})
	return _c
}

func (_c *Invoker_GetRevokeAccessConnectorActionParams_Call) Return(_a0 *client.ConnectorActionParamsModel, _a1 error) *Invoker_GetRevokeAccessConnectorActionParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetRevokeAccessConnectorActionParams_Call) RunAndReturn(run func(context.Context, *client.GetGrantRevokeAccessConnectorActionParamsModel) (*client.ConnectorActionParamsModel, error)) *Invoker_GetRevokeAccessConnectorActionParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelectableIntegrations provides a mock function with given fields: ctx, params
func (_m *Invoker) GetSelectableIntegrations(ctx context.Context, params client.GetSelectableIntegrationsParams) (*client.PaginatedResponseSelectableIntegrationV3, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetSelectableIntegrations")
	}

	var r0 *client.PaginatedResponseSelectableIntegrationV3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetSelectableIntegrationsParams) (*client.PaginatedResponseSelectableIntegrationV3, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetSelectableIntegrationsParams) *client.PaginatedResponseSelectableIntegrationV3); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseSelectableIntegrationV3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetSelectableIntegrationsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetSelectableIntegrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelectableIntegrations'
type Invoker_GetSelectableIntegrations_Call struct {
	*mock.Call
}

// GetSelectableIntegrations is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetSelectableIntegrationsParams
func (_e *Invoker_Expecter) GetSelectableIntegrations(ctx interface{}, params interface{}) *Invoker_GetSelectableIntegrations_Call {
	return &Invoker_GetSelectableIntegrations_Call{Call: _e.mock.On("GetSelectableIntegrations", ctx, params)}
}

func (_c *Invoker_GetSelectableIntegrations_Call) Run(run func(ctx context.Context, params client.GetSelectableIntegrationsParams)) *Invoker_GetSelectableIntegrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetSelectableIntegrationsParams))
	})
	return _c
}

func (_c *Invoker_GetSelectableIntegrations_Call) Return(_a0 *client.PaginatedResponseSelectableIntegrationV3, _a1 error) *Invoker_GetSelectableIntegrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetSelectableIntegrations_Call) RunAndReturn(run func(context.Context, client.GetSelectableIntegrationsParams) (*client.PaginatedResponseSelectableIntegrationV3, error)) *Invoker_GetSelectableIntegrations_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelectablePermissions provides a mock function with given fields: ctx, params
func (_m *Invoker) GetSelectablePermissions(ctx context.Context, params client.GetSelectablePermissionsParams) (*client.SelectablePermissionsResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetSelectablePermissions")
	}

	var r0 *client.SelectablePermissionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetSelectablePermissionsParams) (*client.SelectablePermissionsResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetSelectablePermissionsParams) *client.SelectablePermissionsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SelectablePermissionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetSelectablePermissionsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetSelectablePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelectablePermissions'
type Invoker_GetSelectablePermissions_Call struct {
	*mock.Call
}

// GetSelectablePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetSelectablePermissionsParams
func (_e *Invoker_Expecter) GetSelectablePermissions(ctx interface{}, params interface{}) *Invoker_GetSelectablePermissions_Call {
	return &Invoker_GetSelectablePermissions_Call{Call: _e.mock.On("GetSelectablePermissions", ctx, params)}
}

func (_c *Invoker_GetSelectablePermissions_Call) Run(run func(ctx context.Context, params client.GetSelectablePermissionsParams)) *Invoker_GetSelectablePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetSelectablePermissionsParams))
	})
	return _c
}

func (_c *Invoker_GetSelectablePermissions_Call) Return(_a0 *client.SelectablePermissionsResponse, _a1 error) *Invoker_GetSelectablePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetSelectablePermissions_Call) RunAndReturn(run func(context.Context, client.GetSelectablePermissionsParams) (*client.SelectablePermissionsResponse, error)) *Invoker_GetSelectablePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelectableResourceTypes provides a mock function with given fields: ctx, params
func (_m *Invoker) GetSelectableResourceTypes(ctx context.Context, params client.GetSelectableResourceTypesParams) (*client.PaginatedResponseSelectableResourceTypeV3, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetSelectableResourceTypes")
	}

	var r0 *client.PaginatedResponseSelectableResourceTypeV3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetSelectableResourceTypesParams) (*client.PaginatedResponseSelectableResourceTypeV3, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetSelectableResourceTypesParams) *client.PaginatedResponseSelectableResourceTypeV3); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseSelectableResourceTypeV3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetSelectableResourceTypesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetSelectableResourceTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelectableResourceTypes'
type Invoker_GetSelectableResourceTypes_Call struct {
	*mock.Call
}

// GetSelectableResourceTypes is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetSelectableResourceTypesParams
func (_e *Invoker_Expecter) GetSelectableResourceTypes(ctx interface{}, params interface{}) *Invoker_GetSelectableResourceTypes_Call {
	return &Invoker_GetSelectableResourceTypes_Call{Call: _e.mock.On("GetSelectableResourceTypes", ctx, params)}
}

func (_c *Invoker_GetSelectableResourceTypes_Call) Run(run func(ctx context.Context, params client.GetSelectableResourceTypesParams)) *Invoker_GetSelectableResourceTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetSelectableResourceTypesParams))
	})
	return _c
}

func (_c *Invoker_GetSelectableResourceTypes_Call) Return(_a0 *client.PaginatedResponseSelectableResourceTypeV3, _a1 error) *Invoker_GetSelectableResourceTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetSelectableResourceTypes_Call) RunAndReturn(run func(context.Context, client.GetSelectableResourceTypesParams) (*client.PaginatedResponseSelectableResourceTypeV3, error)) *Invoker_GetSelectableResourceTypes_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelectableResources provides a mock function with given fields: ctx, params
func (_m *Invoker) GetSelectableResources(ctx context.Context, params client.GetSelectableResourcesParams) (*client.PaginatedResponseSelectableResourceV3, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetSelectableResources")
	}

	var r0 *client.PaginatedResponseSelectableResourceV3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetSelectableResourcesParams) (*client.PaginatedResponseSelectableResourceV3, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetSelectableResourcesParams) *client.PaginatedResponseSelectableResourceV3); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseSelectableResourceV3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetSelectableResourcesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetSelectableResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelectableResources'
type Invoker_GetSelectableResources_Call struct {
	*mock.Call
}

// GetSelectableResources is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetSelectableResourcesParams
func (_e *Invoker_Expecter) GetSelectableResources(ctx interface{}, params interface{}) *Invoker_GetSelectableResources_Call {
	return &Invoker_GetSelectableResources_Call{Call: _e.mock.On("GetSelectableResources", ctx, params)}
}

func (_c *Invoker_GetSelectableResources_Call) Run(run func(ctx context.Context, params client.GetSelectableResourcesParams)) *Invoker_GetSelectableResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetSelectableResourcesParams))
	})
	return _c
}

func (_c *Invoker_GetSelectableResources_Call) Return(_a0 *client.PaginatedResponseSelectableResourceV3, _a1 error) *Invoker_GetSelectableResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetSelectableResources_Call) RunAndReturn(run func(context.Context, client.GetSelectableResourcesParams) (*client.PaginatedResponseSelectableResourceV3, error)) *Invoker_GetSelectableResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, params
func (_m *Invoker) GetUser(ctx context.Context, params client.GetUserParams) (*client.UserModel, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *client.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetUserParams) (*client.UserModel, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetUserParams) *client.UserModel); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetUserParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type Invoker_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetUserParams
func (_e *Invoker_Expecter) GetUser(ctx interface{}, params interface{}) *Invoker_GetUser_Call {
	return &Invoker_GetUser_Call{Call: _e.mock.On("GetUser", ctx, params)}
}

func (_c *Invoker_GetUser_Call) Run(run func(ctx context.Context, params client.GetUserParams)) *Invoker_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetUserParams))
	})
	return _c
}

func (_c *Invoker_GetUser_Call) Return(_a0 *client.UserModel, _a1 error) *Invoker_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetUser_Call) RunAndReturn(run func(context.Context, client.GetUserParams) (*client.UserModel, error)) *Invoker_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserV3 provides a mock function with given fields: ctx, params
func (_m *Invoker) GetUserV3(ctx context.Context, params client.GetUserV3Params) (*client.UserV3, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetUserV3")
	}

	var r0 *client.UserV3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetUserV3Params) (*client.UserV3, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetUserV3Params) *client.UserV3); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserV3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetUserV3Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_GetUserV3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserV3'
type Invoker_GetUserV3_Call struct {
	*mock.Call
}

// GetUserV3 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.GetUserV3Params
func (_e *Invoker_Expecter) GetUserV3(ctx interface{}, params interface{}) *Invoker_GetUserV3_Call {
	return &Invoker_GetUserV3_Call{Call: _e.mock.On("GetUserV3", ctx, params)}
}

func (_c *Invoker_GetUserV3_Call) Run(run func(ctx context.Context, params client.GetUserV3Params)) *Invoker_GetUserV3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GetUserV3Params))
	})
	return _c
}

func (_c *Invoker_GetUserV3_Call) Return(_a0 *client.UserV3, _a1 error) *Invoker_GetUserV3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_GetUserV3_Call) RunAndReturn(run func(context.Context, client.GetUserV3Params) (*client.UserV3, error)) *Invoker_GetUserV3_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessBundles provides a mock function with given fields: ctx
func (_m *Invoker) ListAccessBundles(ctx context.Context) (*client.PaginatedResponseAccessBundleV1Model, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessBundles")
	}

	var r0 *client.PaginatedResponseAccessBundleV1Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*client.PaginatedResponseAccessBundleV1Model, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *client.PaginatedResponseAccessBundleV1Model); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseAccessBundleV1Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListAccessBundles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessBundles'
type Invoker_ListAccessBundles_Call struct {
	*mock.Call
}

// ListAccessBundles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Invoker_Expecter) ListAccessBundles(ctx interface{}) *Invoker_ListAccessBundles_Call {
	return &Invoker_ListAccessBundles_Call{Call: _e.mock.On("ListAccessBundles", ctx)}
}

func (_c *Invoker_ListAccessBundles_Call) Run(run func(ctx context.Context)) *Invoker_ListAccessBundles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Invoker_ListAccessBundles_Call) Return(_a0 *client.PaginatedResponseAccessBundleV1Model, _a1 error) *Invoker_ListAccessBundles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListAccessBundles_Call) RunAndReturn(run func(context.Context) (*client.PaginatedResponseAccessBundleV1Model, error)) *Invoker_ListAccessBundles_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessFlowsV1 provides a mock function with given fields: ctx
func (_m *Invoker) ListAccessFlowsV1(ctx context.Context) (*client.PaginatedResponseAccessFlowV1Model, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessFlowsV1")
	}

	var r0 *client.PaginatedResponseAccessFlowV1Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*client.PaginatedResponseAccessFlowV1Model, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *client.PaginatedResponseAccessFlowV1Model); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseAccessFlowV1Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListAccessFlowsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessFlowsV1'
type Invoker_ListAccessFlowsV1_Call struct {
	*mock.Call
}

// ListAccessFlowsV1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Invoker_Expecter) ListAccessFlowsV1(ctx interface{}) *Invoker_ListAccessFlowsV1_Call {
	return &Invoker_ListAccessFlowsV1_Call{Call: _e.mock.On("ListAccessFlowsV1", ctx)}
}

func (_c *Invoker_ListAccessFlowsV1_Call) Run(run func(ctx context.Context)) *Invoker_ListAccessFlowsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Invoker_ListAccessFlowsV1_Call) Return(_a0 *client.PaginatedResponseAccessFlowV1Model, _a1 error) *Invoker_ListAccessFlowsV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListAccessFlowsV1_Call) RunAndReturn(run func(context.Context) (*client.PaginatedResponseAccessFlowV1Model, error)) *Invoker_ListAccessFlowsV1_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessFlowsV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListAccessFlowsV2(ctx context.Context, params client.ListAccessFlowsV2Params) (*client.PublicApiListResponseAccessFlowPublicV2Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessFlowsV2")
	}

	var r0 *client.PublicApiListResponseAccessFlowPublicV2Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessFlowsV2Params) (*client.PublicApiListResponseAccessFlowPublicV2Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessFlowsV2Params) *client.PublicApiListResponseAccessFlowPublicV2Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseAccessFlowPublicV2Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListAccessFlowsV2Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListAccessFlowsV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessFlowsV2'
type Invoker_ListAccessFlowsV2_Call struct {
	*mock.Call
}

// ListAccessFlowsV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListAccessFlowsV2Params
func (_e *Invoker_Expecter) ListAccessFlowsV2(ctx interface{}, params interface{}) *Invoker_ListAccessFlowsV2_Call {
	return &Invoker_ListAccessFlowsV2_Call{Call: _e.mock.On("ListAccessFlowsV2", ctx, params)}
}

func (_c *Invoker_ListAccessFlowsV2_Call) Run(run func(ctx context.Context, params client.ListAccessFlowsV2Params)) *Invoker_ListAccessFlowsV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListAccessFlowsV2Params))
	})
	return _c
}

func (_c *Invoker_ListAccessFlowsV2_Call) Return(_a0 *client.PublicApiListResponseAccessFlowPublicV2Model, _a1 error) *Invoker_ListAccessFlowsV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListAccessFlowsV2_Call) RunAndReturn(run func(context.Context, client.ListAccessFlowsV2Params) (*client.PublicApiListResponseAccessFlowPublicV2Model, error)) *Invoker_ListAccessFlowsV2_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessRequests provides a mock function with given fields: ctx, params
func (_m *Invoker) ListAccessRequests(ctx context.Context, params client.ListAccessRequestsParams) (*client.PaginatedResponseAccessRequestV3, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessRequests")
	}

	var r0 *client.PaginatedResponseAccessRequestV3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessRequestsParams) (*client.PaginatedResponseAccessRequestV3, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessRequestsParams) *client.PaginatedResponseAccessRequestV3); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseAccessRequestV3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListAccessRequestsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListAccessRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessRequests'
type Invoker_ListAccessRequests_Call struct {
	*mock.Call
}

// ListAccessRequests is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListAccessRequestsParams
func (_e *Invoker_Expecter) ListAccessRequests(ctx interface{}, params interface{}) *Invoker_ListAccessRequests_Call {
	return &Invoker_ListAccessRequests_Call{Call: _e.mock.On("ListAccessRequests", ctx, params)}
}

func (_c *Invoker_ListAccessRequests_Call) Run(run func(ctx context.Context, params client.ListAccessRequestsParams)) *Invoker_ListAccessRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListAccessRequestsParams))
	})
	return _c
}

func (_c *Invoker_ListAccessRequests_Call) Return(_a0 *client.PaginatedResponseAccessRequestV3, _a1 error) *Invoker_ListAccessRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListAccessRequests_Call) RunAndReturn(run func(context.Context, client.ListAccessRequestsParams) (*client.PaginatedResponseAccessRequestV3, error)) *Invoker_ListAccessRequests_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessRequestsV4 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListAccessRequestsV4(ctx context.Context, params client.ListAccessRequestsV4Params) (*client.PublicApiListResponseAccessRequestV4PublicModel, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessRequestsV4")
	}

	var r0 *client.PublicApiListResponseAccessRequestV4PublicModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessRequestsV4Params) (*client.PublicApiListResponseAccessRequestV4PublicModel, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessRequestsV4Params) *client.PublicApiListResponseAccessRequestV4PublicModel); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseAccessRequestV4PublicModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListAccessRequestsV4Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListAccessRequestsV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessRequestsV4'
type Invoker_ListAccessRequestsV4_Call struct {
	*mock.Call
}

// ListAccessRequestsV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListAccessRequestsV4Params
func (_e *Invoker_Expecter) ListAccessRequestsV4(ctx interface{}, params interface{}) *Invoker_ListAccessRequestsV4_Call {
	return &Invoker_ListAccessRequestsV4_Call{Call: _e.mock.On("ListAccessRequestsV4", ctx, params)}
}

func (_c *Invoker_ListAccessRequestsV4_Call) Run(run func(ctx context.Context, params client.ListAccessRequestsV4Params)) *Invoker_ListAccessRequestsV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListAccessRequestsV4Params))
	})
	return _c
}

func (_c *Invoker_ListAccessRequestsV4_Call) Return(_a0 *client.PublicApiListResponseAccessRequestV4PublicModel, _a1 error) *Invoker_ListAccessRequestsV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListAccessRequestsV4_Call) RunAndReturn(run func(context.Context, client.ListAccessRequestsV4Params) (*client.PublicApiListResponseAccessRequestV4PublicModel, error)) *Invoker_ListAccessRequestsV4_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessScopesV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListAccessScopesV1(ctx context.Context, params client.ListAccessScopesV1Params) (*client.PublicApiListResponseAccessScopePublicV1Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessScopesV1")
	}

	var r0 *client.PublicApiListResponseAccessScopePublicV1Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessScopesV1Params) (*client.PublicApiListResponseAccessScopePublicV1Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessScopesV1Params) *client.PublicApiListResponseAccessScopePublicV1Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseAccessScopePublicV1Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListAccessScopesV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListAccessScopesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessScopesV1'
type Invoker_ListAccessScopesV1_Call struct {
	*mock.Call
}

// ListAccessScopesV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListAccessScopesV1Params
func (_e *Invoker_Expecter) ListAccessScopesV1(ctx interface{}, params interface{}) *Invoker_ListAccessScopesV1_Call {
	return &Invoker_ListAccessScopesV1_Call{Call: _e.mock.On("ListAccessScopesV1", ctx, params)}
}

func (_c *Invoker_ListAccessScopesV1_Call) Run(run func(ctx context.Context, params client.ListAccessScopesV1Params)) *Invoker_ListAccessScopesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListAccessScopesV1Params))
	})
	return _c
}

func (_c *Invoker_ListAccessScopesV1_Call) Return(_a0 *client.PublicApiListResponseAccessScopePublicV1Model, _a1 error) *Invoker_ListAccessScopesV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListAccessScopesV1_Call) RunAndReturn(run func(context.Context, client.ListAccessScopesV1Params) (*client.PublicApiListResponseAccessScopePublicV1Model, error)) *Invoker_ListAccessScopesV1_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessSessionsV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListAccessSessionsV1(ctx context.Context, params client.ListAccessSessionsV1Params) (*client.PublicApiListResponseAccessSessionPublicV1Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessSessionsV1")
	}

	var r0 *client.PublicApiListResponseAccessSessionPublicV1Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessSessionsV1Params) (*client.PublicApiListResponseAccessSessionPublicV1Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAccessSessionsV1Params) *client.PublicApiListResponseAccessSessionPublicV1Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseAccessSessionPublicV1Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListAccessSessionsV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListAccessSessionsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessSessionsV1'
type Invoker_ListAccessSessionsV1_Call struct {
	*mock.Call
}

// ListAccessSessionsV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListAccessSessionsV1Params
func (_e *Invoker_Expecter) ListAccessSessionsV1(ctx interface{}, params interface{}) *Invoker_ListAccessSessionsV1_Call {
	return &Invoker_ListAccessSessionsV1_Call{Call: _e.mock.On("ListAccessSessionsV1", ctx, params)}
}

func (_c *Invoker_ListAccessSessionsV1_Call) Run(run func(ctx context.Context, params client.ListAccessSessionsV1Params)) *Invoker_ListAccessSessionsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListAccessSessionsV1Params))
	})
	return _c
}

func (_c *Invoker_ListAccessSessionsV1_Call) Return(_a0 *client.PublicApiListResponseAccessSessionPublicV1Model, _a1 error) *Invoker_ListAccessSessionsV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListAccessSessionsV1_Call) RunAndReturn(run func(context.Context, client.ListAccessSessionsV1Params) (*client.PublicApiListResponseAccessSessionPublicV1Model, error)) *Invoker_ListAccessSessionsV1_Call {
	_c.Call.Return(run)
	return _c
}

// ListActivity provides a mock function with given fields: ctx, params
func (_m *Invoker) ListActivity(ctx context.Context, params client.ListActivityParams) (*client.PaginatedResponseActivityReportJsonExportModel, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListActivity")
	}

	var r0 *client.PaginatedResponseActivityReportJsonExportModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListActivityParams) (*client.PaginatedResponseActivityReportJsonExportModel, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListActivityParams) *client.PaginatedResponseActivityReportJsonExportModel); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseActivityReportJsonExportModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListActivityParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActivity'
type Invoker_ListActivity_Call struct {
	*mock.Call
}

// ListActivity is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListActivityParams
func (_e *Invoker_Expecter) ListActivity(ctx interface{}, params interface{}) *Invoker_ListActivity_Call {
	return &Invoker_ListActivity_Call{Call: _e.mock.On("ListActivity", ctx, params)}
}

func (_c *Invoker_ListActivity_Call) Run(run func(ctx context.Context, params client.ListActivityParams)) *Invoker_ListActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListActivityParams))
	})
	return _c
}

func (_c *Invoker_ListActivity_Call) Return(_a0 *client.PaginatedResponseActivityReportJsonExportModel, _a1 error) *Invoker_ListActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListActivity_Call) RunAndReturn(run func(context.Context, client.ListActivityParams) (*client.PaginatedResponseActivityReportJsonExportModel, error)) *Invoker_ListActivity_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttributesForIdentities provides a mock function with given fields: ctx, params
func (_m *Invoker) ListAttributesForIdentities(ctx context.Context, params client.ListAttributesForIdentitiesParams) (*client.PaginatedResponseIdentityAttributeModel, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListAttributesForIdentities")
	}

	var r0 *client.PaginatedResponseIdentityAttributeModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAttributesForIdentitiesParams) (*client.PaginatedResponseIdentityAttributeModel, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAttributesForIdentitiesParams) *client.PaginatedResponseIdentityAttributeModel); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseIdentityAttributeModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListAttributesForIdentitiesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListAttributesForIdentities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttributesForIdentities'
type Invoker_ListAttributesForIdentities_Call struct {
	*mock.Call
}

// ListAttributesForIdentities is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListAttributesForIdentitiesParams
func (_e *Invoker_Expecter) ListAttributesForIdentities(ctx interface{}, params interface{}) *Invoker_ListAttributesForIdentities_Call {
	return &Invoker_ListAttributesForIdentities_Call{Call: _e.mock.On("ListAttributesForIdentities", ctx, params)}
}

func (_c *Invoker_ListAttributesForIdentities_Call) Run(run func(ctx context.Context, params client.ListAttributesForIdentitiesParams)) *Invoker_ListAttributesForIdentities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListAttributesForIdentitiesParams))
	})
	return _c
}

func (_c *Invoker_ListAttributesForIdentities_Call) Return(_a0 *client.PaginatedResponseIdentityAttributeModel, _a1 error) *Invoker_ListAttributesForIdentities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListAttributesForIdentities_Call) RunAndReturn(run func(context.Context, client.ListAttributesForIdentitiesParams) (*client.PaginatedResponseIdentityAttributeModel, error)) *Invoker_ListAttributesForIdentities_Call {
	_c.Call.Return(run)
	return _c
}

// ListAvailableBundlesV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListAvailableBundlesV1(ctx context.Context, params client.ListAvailableBundlesV1Params) (*client.PublicApiListResponseAvailableBundlePublicV1Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailableBundlesV1")
	}

	var r0 *client.PublicApiListResponseAvailableBundlePublicV1Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAvailableBundlesV1Params) (*client.PublicApiListResponseAvailableBundlePublicV1Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAvailableBundlesV1Params) *client.PublicApiListResponseAvailableBundlePublicV1Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseAvailableBundlePublicV1Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListAvailableBundlesV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListAvailableBundlesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAvailableBundlesV1'
type Invoker_ListAvailableBundlesV1_Call struct {
	*mock.Call
}

// ListAvailableBundlesV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListAvailableBundlesV1Params
func (_e *Invoker_Expecter) ListAvailableBundlesV1(ctx interface{}, params interface{}) *Invoker_ListAvailableBundlesV1_Call {
	return &Invoker_ListAvailableBundlesV1_Call{Call: _e.mock.On("ListAvailableBundlesV1", ctx, params)}
}

func (_c *Invoker_ListAvailableBundlesV1_Call) Run(run func(ctx context.Context, params client.ListAvailableBundlesV1Params)) *Invoker_ListAvailableBundlesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListAvailableBundlesV1Params))
	})
	return _c
}

func (_c *Invoker_ListAvailableBundlesV1_Call) Return(_a0 *client.PublicApiListResponseAvailableBundlePublicV1Model, _a1 error) *Invoker_ListAvailableBundlesV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListAvailableBundlesV1_Call) RunAndReturn(run func(context.Context, client.ListAvailableBundlesV1Params) (*client.PublicApiListResponseAvailableBundlePublicV1Model, error)) *Invoker_ListAvailableBundlesV1_Call {
	_c.Call.Return(run)
	return _c
}

// ListAvailableEntitlementsV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListAvailableEntitlementsV1(ctx context.Context, params client.ListAvailableEntitlementsV1Params) (*client.PublicApiListResponseAvailableEntitlementPublicV1Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailableEntitlementsV1")
	}

	var r0 *client.PublicApiListResponseAvailableEntitlementPublicV1Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAvailableEntitlementsV1Params) (*client.PublicApiListResponseAvailableEntitlementPublicV1Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListAvailableEntitlementsV1Params) *client.PublicApiListResponseAvailableEntitlementPublicV1Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseAvailableEntitlementPublicV1Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListAvailableEntitlementsV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListAvailableEntitlementsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAvailableEntitlementsV1'
type Invoker_ListAvailableEntitlementsV1_Call struct {
	*mock.Call
}

// ListAvailableEntitlementsV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListAvailableEntitlementsV1Params
func (_e *Invoker_Expecter) ListAvailableEntitlementsV1(ctx interface{}, params interface{}) *Invoker_ListAvailableEntitlementsV1_Call {
	return &Invoker_ListAvailableEntitlementsV1_Call{Call: _e.mock.On("ListAvailableEntitlementsV1", ctx, params)}
}

func (_c *Invoker_ListAvailableEntitlementsV1_Call) Run(run func(ctx context.Context, params client.ListAvailableEntitlementsV1Params)) *Invoker_ListAvailableEntitlementsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListAvailableEntitlementsV1Params))
	})
	return _c
}

func (_c *Invoker_ListAvailableEntitlementsV1_Call) Return(_a0 *client.PublicApiListResponseAvailableEntitlementPublicV1Model, _a1 error) *Invoker_ListAvailableEntitlementsV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListAvailableEntitlementsV1_Call) RunAndReturn(run func(context.Context, client.ListAvailableEntitlementsV1Params) (*client.PublicApiListResponseAvailableEntitlementPublicV1Model, error)) *Invoker_ListAvailableEntitlementsV1_Call {
	_c.Call.Return(run)
	return _c
}

// ListBundlesV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListBundlesV2(ctx context.Context, params client.ListBundlesV2Params) (*client.PublicApiListResponseBundlePublicV2Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListBundlesV2")
	}

	var r0 *client.PublicApiListResponseBundlePublicV2Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListBundlesV2Params) (*client.PublicApiListResponseBundlePublicV2Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListBundlesV2Params) *client.PublicApiListResponseBundlePublicV2Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseBundlePublicV2Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListBundlesV2Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListBundlesV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBundlesV2'
type Invoker_ListBundlesV2_Call struct {
	*mock.Call
}

// ListBundlesV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListBundlesV2Params
func (_e *Invoker_Expecter) ListBundlesV2(ctx interface{}, params interface{}) *Invoker_ListBundlesV2_Call {
	return &Invoker_ListBundlesV2_Call{Call: _e.mock.On("ListBundlesV2", ctx, params)}
}

func (_c *Invoker_ListBundlesV2_Call) Run(run func(ctx context.Context, params client.ListBundlesV2Params)) *Invoker_ListBundlesV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListBundlesV2Params))
	})
	return _c
}

func (_c *Invoker_ListBundlesV2_Call) Return(_a0 *client.PublicApiListResponseBundlePublicV2Model, _a1 error) *Invoker_ListBundlesV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListBundlesV2_Call) RunAndReturn(run func(context.Context, client.ListBundlesV2Params) (*client.PublicApiListResponseBundlePublicV2Model, error)) *Invoker_ListBundlesV2_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectors provides a mock function with given fields: ctx
func (_m *Invoker) ListConnectors(ctx context.Context) ([]client.Connector, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectors")
	}

	var r0 []client.Connector
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]client.Connector, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []client.Connector); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Connector)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListConnectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectors'
type Invoker_ListConnectors_Call struct {
	*mock.Call
}

// ListConnectors is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Invoker_Expecter) ListConnectors(ctx interface{}) *Invoker_ListConnectors_Call {
	return &Invoker_ListConnectors_Call{Call: _e.mock.On("ListConnectors", ctx)}
}

func (_c *Invoker_ListConnectors_Call) Run(run func(ctx context.Context)) *Invoker_ListConnectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Invoker_ListConnectors_Call) Return(_a0 []client.Connector, _a1 error) *Invoker_ListConnectors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListConnectors_Call) RunAndReturn(run func(context.Context) ([]client.Connector, error)) *Invoker_ListConnectors_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectorsV3 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListConnectorsV3(ctx context.Context, params client.ListConnectorsV3Params) (*client.PublicApiListResponseConnectorPublicV3Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectorsV3")
	}

	var r0 *client.PublicApiListResponseConnectorPublicV3Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListConnectorsV3Params) (*client.PublicApiListResponseConnectorPublicV3Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListConnectorsV3Params) *client.PublicApiListResponseConnectorPublicV3Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseConnectorPublicV3Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListConnectorsV3Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListConnectorsV3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectorsV3'
type Invoker_ListConnectorsV3_Call struct {
	*mock.Call
}

// ListConnectorsV3 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListConnectorsV3Params
func (_e *Invoker_Expecter) ListConnectorsV3(ctx interface{}, params interface{}) *Invoker_ListConnectorsV3_Call {
	return &Invoker_ListConnectorsV3_Call{Call: _e.mock.On("ListConnectorsV3", ctx, params)}
}

func (_c *Invoker_ListConnectorsV3_Call) Run(run func(ctx context.Context, params client.ListConnectorsV3Params)) *Invoker_ListConnectorsV3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListConnectorsV3Params))
	})
	return _c
}

func (_c *Invoker_ListConnectorsV3_Call) Return(_a0 *client.PublicApiListResponseConnectorPublicV3Model, _a1 error) *Invoker_ListConnectorsV3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListConnectorsV3_Call) RunAndReturn(run func(context.Context, client.ListConnectorsV3Params) (*client.PublicApiListResponseConnectorPublicV3Model, error)) *Invoker_ListConnectorsV3_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupMembersV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListGroupMembersV1(ctx context.Context, params client.ListGroupMembersV1Params) (*client.PublicApiListResponseGroupMemberPublicV1Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupMembersV1")
	}

	var r0 *client.PublicApiListResponseGroupMemberPublicV1Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListGroupMembersV1Params) (*client.PublicApiListResponseGroupMemberPublicV1Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListGroupMembersV1Params) *client.PublicApiListResponseGroupMemberPublicV1Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseGroupMemberPublicV1Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListGroupMembersV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListGroupMembersV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupMembersV1'
type Invoker_ListGroupMembersV1_Call struct {
	*mock.Call
}

// ListGroupMembersV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListGroupMembersV1Params
func (_e *Invoker_Expecter) ListGroupMembersV1(ctx interface{}, params interface{}) *Invoker_ListGroupMembersV1_Call {
	return &Invoker_ListGroupMembersV1_Call{Call: _e.mock.On("ListGroupMembersV1", ctx, params)}
}

func (_c *Invoker_ListGroupMembersV1_Call) Run(run func(ctx context.Context, params client.ListGroupMembersV1Params)) *Invoker_ListGroupMembersV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListGroupMembersV1Params))
	})
	return _c
}

func (_c *Invoker_ListGroupMembersV1_Call) Return(_a0 *client.PublicApiListResponseGroupMemberPublicV1Model, _a1 error) *Invoker_ListGroupMembersV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListGroupMembersV1_Call) RunAndReturn(run func(context.Context, client.ListGroupMembersV1Params) (*client.PublicApiListResponseGroupMemberPublicV1Model, error)) *Invoker_ListGroupMembersV1_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListGroupsV1(ctx context.Context, params client.ListGroupsV1Params) (*client.PublicApiListResponseGroupPublicV1Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupsV1")
	}

	var r0 *client.PublicApiListResponseGroupPublicV1Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListGroupsV1Params) (*client.PublicApiListResponseGroupPublicV1Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListGroupsV1Params) *client.PublicApiListResponseGroupPublicV1Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseGroupPublicV1Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListGroupsV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListGroupsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsV1'
type Invoker_ListGroupsV1_Call struct {
	*mock.Call
}

// ListGroupsV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListGroupsV1Params
func (_e *Invoker_Expecter) ListGroupsV1(ctx interface{}, params interface{}) *Invoker_ListGroupsV1_Call {
	return &Invoker_ListGroupsV1_Call{Call: _e.mock.On("ListGroupsV1", ctx, params)}
}

func (_c *Invoker_ListGroupsV1_Call) Run(run func(ctx context.Context, params client.ListGroupsV1Params)) *Invoker_ListGroupsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListGroupsV1Params))
	})
	return _c
}

func (_c *Invoker_ListGroupsV1_Call) Return(_a0 *client.PublicApiListResponseGroupPublicV1Model, _a1 error) *Invoker_ListGroupsV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListGroupsV1_Call) RunAndReturn(run func(context.Context, client.ListGroupsV1Params) (*client.PublicApiListResponseGroupPublicV1Model, error)) *Invoker_ListGroupsV1_Call {
	_c.Call.Return(run)
	return _c
}

// ListIdentities provides a mock function with given fields: ctx
func (_m *Invoker) ListIdentities(ctx context.Context) (*client.PaginatedResponseIdentityModelV2, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListIdentities")
	}

	var r0 *client.PaginatedResponseIdentityModelV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*client.PaginatedResponseIdentityModelV2, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *client.PaginatedResponseIdentityModelV2); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseIdentityModelV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListIdentities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIdentities'
type Invoker_ListIdentities_Call struct {
	*mock.Call
}

// ListIdentities is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Invoker_Expecter) ListIdentities(ctx interface{}) *Invoker_ListIdentities_Call {
	return &Invoker_ListIdentities_Call{Call: _e.mock.On("ListIdentities", ctx)}
}

func (_c *Invoker_ListIdentities_Call) Run(run func(ctx context.Context)) *Invoker_ListIdentities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Invoker_ListIdentities_Call) Return(_a0 *client.PaginatedResponseIdentityModelV2, _a1 error) *Invoker_ListIdentities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListIdentities_Call) RunAndReturn(run func(context.Context) (*client.PaginatedResponseIdentityModelV2, error)) *Invoker_ListIdentities_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntegrationConfigs provides a mock function with given fields: ctx
func (_m *Invoker) ListIntegrationConfigs(ctx context.Context) (*client.PaginatedResponseIntegrationConfigPublicModel, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListIntegrationConfigs")
	}

	var r0 *client.PaginatedResponseIntegrationConfigPublicModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*client.PaginatedResponseIntegrationConfigPublicModel, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *client.PaginatedResponseIntegrationConfigPublicModel); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseIntegrationConfigPublicModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListIntegrationConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntegrationConfigs'
type Invoker_ListIntegrationConfigs_Call struct {
	*mock.Call
}

// ListIntegrationConfigs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Invoker_Expecter) ListIntegrationConfigs(ctx interface{}) *Invoker_ListIntegrationConfigs_Call {
	return &Invoker_ListIntegrationConfigs_Call{Call: _e.mock.On("ListIntegrationConfigs", ctx)}
}

func (_c *Invoker_ListIntegrationConfigs_Call) Run(run func(ctx context.Context)) *Invoker_ListIntegrationConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Invoker_ListIntegrationConfigs_Call) Return(_a0 *client.PaginatedResponseIntegrationConfigPublicModel, _a1 error) *Invoker_ListIntegrationConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListIntegrationConfigs_Call) RunAndReturn(run func(context.Context) (*client.PaginatedResponseIntegrationConfigPublicModel, error)) *Invoker_ListIntegrationConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntegrationsV2 provides a mock function with given fields: ctx
func (_m *Invoker) ListIntegrationsV2(ctx context.Context) (*client.PaginatedResponseIntegrationModel, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListIntegrationsV2")
	}

	var r0 *client.PaginatedResponseIntegrationModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*client.PaginatedResponseIntegrationModel, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *client.PaginatedResponseIntegrationModel); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseIntegrationModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListIntegrationsV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntegrationsV2'
type Invoker_ListIntegrationsV2_Call struct {
	*mock.Call
}

// ListIntegrationsV2 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Invoker_Expecter) ListIntegrationsV2(ctx interface{}) *Invoker_ListIntegrationsV2_Call {
	return &Invoker_ListIntegrationsV2_Call{Call: _e.mock.On("ListIntegrationsV2", ctx)}
}

func (_c *Invoker_ListIntegrationsV2_Call) Run(run func(ctx context.Context)) *Invoker_ListIntegrationsV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Invoker_ListIntegrationsV2_Call) Return(_a0 *client.PaginatedResponseIntegrationModel, _a1 error) *Invoker_ListIntegrationsV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListIntegrationsV2_Call) RunAndReturn(run func(context.Context) (*client.PaginatedResponseIntegrationModel, error)) *Invoker_ListIntegrationsV2_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntegrationsV4 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListIntegrationsV4(ctx context.Context, params client.ListIntegrationsV4Params) (*client.PublicApiListResponseIntegrationPublicV4Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListIntegrationsV4")
	}

	var r0 *client.PublicApiListResponseIntegrationPublicV4Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListIntegrationsV4Params) (*client.PublicApiListResponseIntegrationPublicV4Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListIntegrationsV4Params) *client.PublicApiListResponseIntegrationPublicV4Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseIntegrationPublicV4Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListIntegrationsV4Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListIntegrationsV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntegrationsV4'
type Invoker_ListIntegrationsV4_Call struct {
	*mock.Call
}

// ListIntegrationsV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListIntegrationsV4Params
func (_e *Invoker_Expecter) ListIntegrationsV4(ctx interface{}, params interface{}) *Invoker_ListIntegrationsV4_Call {
	return &Invoker_ListIntegrationsV4_Call{Call: _e.mock.On("ListIntegrationsV4", ctx, params)}
}

func (_c *Invoker_ListIntegrationsV4_Call) Run(run func(ctx context.Context, params client.ListIntegrationsV4Params)) *Invoker_ListIntegrationsV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListIntegrationsV4Params))
	})
	return _c
}

func (_c *Invoker_ListIntegrationsV4_Call) Return(_a0 *client.PublicApiListResponseIntegrationPublicV4Model, _a1 error) *Invoker_ListIntegrationsV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListIntegrationsV4_Call) RunAndReturn(run func(context.Context, client.ListIntegrationsV4Params) (*client.PublicApiListResponseIntegrationPublicV4Model, error)) *Invoker_ListIntegrationsV4_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx
func (_m *Invoker) ListUsers(ctx context.Context) (*client.PaginatedResponseUserModel, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *client.PaginatedResponseUserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*client.PaginatedResponseUserModel, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *client.PaginatedResponseUserModel); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaginatedResponseUserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type Invoker_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Invoker_Expecter) ListUsers(ctx interface{}) *Invoker_ListUsers_Call {
	return &Invoker_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx)}
}

func (_c *Invoker_ListUsers_Call) Run(run func(ctx context.Context)) *Invoker_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Invoker_ListUsers_Call) Return(_a0 *client.PaginatedResponseUserModel, _a1 error) *Invoker_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListUsers_Call) RunAndReturn(run func(context.Context) (*client.PaginatedResponseUserModel, error)) *Invoker_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsersV3 provides a mock function with given fields: ctx, params
func (_m *Invoker) ListUsersV3(ctx context.Context, params client.ListUsersV3Params) (*client.PublicApiListResponseUserPublicV3Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersV3")
	}

	var r0 *client.PublicApiListResponseUserPublicV3Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ListUsersV3Params) (*client.PublicApiListResponseUserPublicV3Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ListUsersV3Params) *client.PublicApiListResponseUserPublicV3Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiListResponseUserPublicV3Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ListUsersV3Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ListUsersV3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsersV3'
type Invoker_ListUsersV3_Call struct {
	*mock.Call
}

// ListUsersV3 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ListUsersV3Params
func (_e *Invoker_Expecter) ListUsersV3(ctx interface{}, params interface{}) *Invoker_ListUsersV3_Call {
	return &Invoker_ListUsersV3_Call{Call: _e.mock.On("ListUsersV3", ctx, params)}
}

func (_c *Invoker_ListUsersV3_Call) Run(run func(ctx context.Context, params client.ListUsersV3Params)) *Invoker_ListUsersV3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ListUsersV3Params))
	})
	return _c
}

func (_c *Invoker_ListUsersV3_Call) Return(_a0 *client.PublicApiListResponseUserPublicV3Model, _a1 error) *Invoker_ListUsersV3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ListUsersV3_Call) RunAndReturn(run func(context.Context, client.ListUsersV3Params) (*client.PublicApiListResponseUserPublicV3Model, error)) *Invoker_ListUsersV3_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshIntegrationV2 provides a mock function with given fields: ctx, params
func (_m *Invoker) RefreshIntegrationV2(ctx context.Context, params client.RefreshIntegrationV2Params) (*client.MessageResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for RefreshIntegrationV2")
	}

	var r0 *client.MessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.RefreshIntegrationV2Params) (*client.MessageResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.RefreshIntegrationV2Params) *client.MessageResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.MessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.RefreshIntegrationV2Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_RefreshIntegrationV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshIntegrationV2'
type Invoker_RefreshIntegrationV2_Call struct {
	*mock.Call
}

// RefreshIntegrationV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.RefreshIntegrationV2Params
func (_e *Invoker_Expecter) RefreshIntegrationV2(ctx interface{}, params interface{}) *Invoker_RefreshIntegrationV2_Call {
	return &Invoker_RefreshIntegrationV2_Call{Call: _e.mock.On("RefreshIntegrationV2", ctx, params)}
}

func (_c *Invoker_RefreshIntegrationV2_Call) Run(run func(ctx context.Context, params client.RefreshIntegrationV2Params)) *Invoker_RefreshIntegrationV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.RefreshIntegrationV2Params))
	})
	return _c
}

func (_c *Invoker_RefreshIntegrationV2_Call) Return(_a0 *client.MessageResponse, _a1 error) *Invoker_RefreshIntegrationV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_RefreshIntegrationV2_Call) RunAndReturn(run func(context.Context, client.RefreshIntegrationV2Params) (*client.MessageResponse, error)) *Invoker_RefreshIntegrationV2_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupMemberV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) RemoveGroupMemberV1(ctx context.Context, params client.RemoveGroupMemberV1Params) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupMemberV1")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.RemoveGroupMemberV1Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_RemoveGroupMemberV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupMemberV1'
type Invoker_RemoveGroupMemberV1_Call struct {
	*mock.Call
}

// RemoveGroupMemberV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.RemoveGroupMemberV1Params
func (_e *Invoker_Expecter) RemoveGroupMemberV1(ctx interface{}, params interface{}) *Invoker_RemoveGroupMemberV1_Call {
	return &Invoker_RemoveGroupMemberV1_Call{Call: _e.mock.On("RemoveGroupMemberV1", ctx, params)}
}

func (_c *Invoker_RemoveGroupMemberV1_Call) Run(run func(ctx context.Context, params client.RemoveGroupMemberV1Params)) *Invoker_RemoveGroupMemberV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.RemoveGroupMemberV1Params))
	})
	return _c
}

func (_c *Invoker_RemoveGroupMemberV1_Call) Return(_a0 error) *Invoker_RemoveGroupMemberV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_RemoveGroupMemberV1_Call) RunAndReturn(run func(context.Context, client.RemoveGroupMemberV1Params) error) *Invoker_RemoveGroupMemberV1_Call {
	_c.Call.Return(run)
	return _c
}

// RequestAccessAgainV4 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) RequestAccessAgainV4(ctx context.Context, request *client.RequestAgainV4, params client.RequestAccessAgainV4Params) ([]client.AccessRequestV4, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for RequestAccessAgainV4")
	}

	var r0 []client.AccessRequestV4
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.RequestAgainV4, client.RequestAccessAgainV4Params) ([]client.AccessRequestV4, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.RequestAgainV4, client.RequestAccessAgainV4Params) []client.AccessRequestV4); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.AccessRequestV4)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.RequestAgainV4, client.RequestAccessAgainV4Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_RequestAccessAgainV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestAccessAgainV4'
type Invoker_RequestAccessAgainV4_Call struct {
	*mock.Call
}

// RequestAccessAgainV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.RequestAgainV4
//   - params client.RequestAccessAgainV4Params
func (_e *Invoker_Expecter) RequestAccessAgainV4(ctx interface{}, request interface{}, params interface{}) *Invoker_RequestAccessAgainV4_Call {
	return &Invoker_RequestAccessAgainV4_Call{Call: _e.mock.On("RequestAccessAgainV4", ctx, request, params)}
}

func (_c *Invoker_RequestAccessAgainV4_Call) Run(run func(ctx context.Context, request *client.RequestAgainV4, params client.RequestAccessAgainV4Params)) *Invoker_RequestAccessAgainV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.RequestAgainV4), args[2].(client.RequestAccessAgainV4Params))
	})
	return _c
}

func (_c *Invoker_RequestAccessAgainV4_Call) Return(_a0 []client.AccessRequestV4, _a1 error) *Invoker_RequestAccessAgainV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_RequestAccessAgainV4_Call) RunAndReturn(run func(context.Context, *client.RequestAgainV4, client.RequestAccessAgainV4Params) ([]client.AccessRequestV4, error)) *Invoker_RequestAccessAgainV4_Call {
	_c.Call.Return(run)
	return _c
}

// ResetAccessRequestCredentials provides a mock function with given fields: ctx, params
func (_m *Invoker) ResetAccessRequestCredentials(ctx context.Context, params client.ResetAccessRequestCredentialsParams) (*client.MessageResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ResetAccessRequestCredentials")
	}

	var r0 *client.MessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ResetAccessRequestCredentialsParams) (*client.MessageResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ResetAccessRequestCredentialsParams) *client.MessageResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.MessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ResetAccessRequestCredentialsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ResetAccessRequestCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetAccessRequestCredentials'
type Invoker_ResetAccessRequestCredentials_Call struct {
	*mock.Call
}

// ResetAccessRequestCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ResetAccessRequestCredentialsParams
func (_e *Invoker_Expecter) ResetAccessRequestCredentials(ctx interface{}, params interface{}) *Invoker_ResetAccessRequestCredentials_Call {
	return &Invoker_ResetAccessRequestCredentials_Call{Call: _e.mock.On("ResetAccessRequestCredentials", ctx, params)}
}

func (_c *Invoker_ResetAccessRequestCredentials_Call) Run(run func(ctx context.Context, params client.ResetAccessRequestCredentialsParams)) *Invoker_ResetAccessRequestCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ResetAccessRequestCredentialsParams))
	})
	return _c
}

func (_c *Invoker_ResetAccessRequestCredentials_Call) Return(_a0 *client.MessageResponse, _a1 error) *Invoker_ResetAccessRequestCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ResetAccessRequestCredentials_Call) RunAndReturn(run func(context.Context, client.ResetAccessRequestCredentialsParams) (*client.MessageResponse, error)) *Invoker_ResetAccessRequestCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// ResetAccessSessionCredentialsV1 provides a mock function with given fields: ctx, params
func (_m *Invoker) ResetAccessSessionCredentialsV1(ctx context.Context, params client.ResetAccessSessionCredentialsV1Params) (*client.PublicApiMessageResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ResetAccessSessionCredentialsV1")
	}

	var r0 *client.PublicApiMessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ResetAccessSessionCredentialsV1Params) (*client.PublicApiMessageResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ResetAccessSessionCredentialsV1Params) *client.PublicApiMessageResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiMessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ResetAccessSessionCredentialsV1Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_ResetAccessSessionCredentialsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetAccessSessionCredentialsV1'
type Invoker_ResetAccessSessionCredentialsV1_Call struct {
	*mock.Call
}

// ResetAccessSessionCredentialsV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.ResetAccessSessionCredentialsV1Params
func (_e *Invoker_Expecter) ResetAccessSessionCredentialsV1(ctx interface{}, params interface{}) *Invoker_ResetAccessSessionCredentialsV1_Call {
	return &Invoker_ResetAccessSessionCredentialsV1_Call{Call: _e.mock.On("ResetAccessSessionCredentialsV1", ctx, params)}
}

func (_c *Invoker_ResetAccessSessionCredentialsV1_Call) Run(run func(ctx context.Context, params client.ResetAccessSessionCredentialsV1Params)) *Invoker_ResetAccessSessionCredentialsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ResetAccessSessionCredentialsV1Params))
	})
	return _c
}

func (_c *Invoker_ResetAccessSessionCredentialsV1_Call) Return(_a0 *client.PublicApiMessageResponse, _a1 error) *Invoker_ResetAccessSessionCredentialsV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_ResetAccessSessionCredentialsV1_Call) RunAndReturn(run func(context.Context, client.ResetAccessSessionCredentialsV1Params) (*client.PublicApiMessageResponse, error)) *Invoker_ResetAccessSessionCredentialsV1_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAccessRequestV4 provides a mock function with given fields: ctx, params
func (_m *Invoker) RevokeAccessRequestV4(ctx context.Context, params client.RevokeAccessRequestV4Params) (*client.PublicApiMessageResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAccessRequestV4")
	}

	var r0 *client.PublicApiMessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.RevokeAccessRequestV4Params) (*client.PublicApiMessageResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.RevokeAccessRequestV4Params) *client.PublicApiMessageResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicApiMessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.RevokeAccessRequestV4Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_RevokeAccessRequestV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAccessRequestV4'
type Invoker_RevokeAccessRequestV4_Call struct {
	*mock.Call
}

// RevokeAccessRequestV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - params client.RevokeAccessRequestV4Params
func (_e *Invoker_Expecter) RevokeAccessRequestV4(ctx interface{}, params interface{}) *Invoker_RevokeAccessRequestV4_Call {
	return &Invoker_RevokeAccessRequestV4_Call{Call: _e.mock.On("RevokeAccessRequestV4", ctx, params)}
}

func (_c *Invoker_RevokeAccessRequestV4_Call) Run(run func(ctx context.Context, params client.RevokeAccessRequestV4Params)) *Invoker_RevokeAccessRequestV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.RevokeAccessRequestV4Params))
	})
	return _c
}

func (_c *Invoker_RevokeAccessRequestV4_Call) Return(_a0 *client.PublicApiMessageResponse, _a1 error) *Invoker_RevokeAccessRequestV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_RevokeAccessRequestV4_Call) RunAndReturn(run func(context.Context, client.RevokeAccessRequestV4Params) (*client.PublicApiMessageResponse, error)) *Invoker_RevokeAccessRequestV4_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAccessRequests provides a mock function with given fields: ctx, request
func (_m *Invoker) RevokeAccessRequests(ctx context.Context, request *client.AccessRequestsBulkRevokeRequestV3) (*client.MessageResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAccessRequests")
	}

	var r0 *client.MessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.AccessRequestsBulkRevokeRequestV3) (*client.MessageResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.AccessRequestsBulkRevokeRequestV3) *client.MessageResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.MessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.AccessRequestsBulkRevokeRequestV3) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_RevokeAccessRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAccessRequests'
type Invoker_RevokeAccessRequests_Call struct {
	*mock.Call
}

// RevokeAccessRequests is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.AccessRequestsBulkRevokeRequestV3
func (_e *Invoker_Expecter) RevokeAccessRequests(ctx interface{}, request interface{}) *Invoker_RevokeAccessRequests_Call {
	return &Invoker_RevokeAccessRequests_Call{Call: _e.mock.On("RevokeAccessRequests", ctx, request)}
}

func (_c *Invoker_RevokeAccessRequests_Call) Run(run func(ctx context.Context, request *client.AccessRequestsBulkRevokeRequestV3)) *Invoker_RevokeAccessRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.AccessRequestsBulkRevokeRequestV3))
	})
	return _c
}

func (_c *Invoker_RevokeAccessRequests_Call) Return(_a0 *client.MessageResponse, _a1 error) *Invoker_RevokeAccessRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_RevokeAccessRequests_Call) RunAndReturn(run func(context.Context, *client.AccessRequestsBulkRevokeRequestV3) (*client.MessageResponse, error)) *Invoker_RevokeAccessRequests_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessBundle provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateAccessBundle(ctx context.Context, request *client.UpdateAccessBundleV1, params client.UpdateAccessBundleParams) (*client.AccessBundleV1, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessBundle")
	}

	var r0 *client.AccessBundleV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateAccessBundleV1, client.UpdateAccessBundleParams) (*client.AccessBundleV1, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateAccessBundleV1, client.UpdateAccessBundleParams) *client.AccessBundleV1); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessBundleV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpdateAccessBundleV1, client.UpdateAccessBundleParams) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateAccessBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessBundle'
type Invoker_UpdateAccessBundle_Call struct {
	*mock.Call
}

// UpdateAccessBundle is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpdateAccessBundleV1
//   - params client.UpdateAccessBundleParams
func (_e *Invoker_Expecter) UpdateAccessBundle(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateAccessBundle_Call {
	return &Invoker_UpdateAccessBundle_Call{Call: _e.mock.On("UpdateAccessBundle", ctx, request, params)}
}

func (_c *Invoker_UpdateAccessBundle_Call) Run(run func(ctx context.Context, request *client.UpdateAccessBundleV1, params client.UpdateAccessBundleParams)) *Invoker_UpdateAccessBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpdateAccessBundleV1), args[2].(client.UpdateAccessBundleParams))
	})
	return _c
}

func (_c *Invoker_UpdateAccessBundle_Call) Return(_a0 *client.AccessBundleV1, _a1 error) *Invoker_UpdateAccessBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateAccessBundle_Call) RunAndReturn(run func(context.Context, *client.UpdateAccessBundleV1, client.UpdateAccessBundleParams) (*client.AccessBundleV1, error)) *Invoker_UpdateAccessBundle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessFlowV1 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateAccessFlowV1(ctx context.Context, request *client.UpdateAccessFlowV1, params client.UpdateAccessFlowV1Params) (*client.AccessFlowV1, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessFlowV1")
	}

	var r0 *client.AccessFlowV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateAccessFlowV1, client.UpdateAccessFlowV1Params) (*client.AccessFlowV1, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateAccessFlowV1, client.UpdateAccessFlowV1Params) *client.AccessFlowV1); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessFlowV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpdateAccessFlowV1, client.UpdateAccessFlowV1Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateAccessFlowV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessFlowV1'
type Invoker_UpdateAccessFlowV1_Call struct {
	*mock.Call
}

// UpdateAccessFlowV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpdateAccessFlowV1
//   - params client.UpdateAccessFlowV1Params
func (_e *Invoker_Expecter) UpdateAccessFlowV1(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateAccessFlowV1_Call {
	return &Invoker_UpdateAccessFlowV1_Call{Call: _e.mock.On("UpdateAccessFlowV1", ctx, request, params)}
}

func (_c *Invoker_UpdateAccessFlowV1_Call) Run(run func(ctx context.Context, request *client.UpdateAccessFlowV1, params client.UpdateAccessFlowV1Params)) *Invoker_UpdateAccessFlowV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpdateAccessFlowV1), args[2].(client.UpdateAccessFlowV1Params))
	})
	return _c
}

func (_c *Invoker_UpdateAccessFlowV1_Call) Return(_a0 *client.AccessFlowV1, _a1 error) *Invoker_UpdateAccessFlowV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateAccessFlowV1_Call) RunAndReturn(run func(context.Context, *client.UpdateAccessFlowV1, client.UpdateAccessFlowV1Params) (*client.AccessFlowV1, error)) *Invoker_UpdateAccessFlowV1_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessFlowV2 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateAccessFlowV2(ctx context.Context, request *client.AccessFlowUpsertPublicV2Model, params client.UpdateAccessFlowV2Params) (*client.AccessFlowPublicV2Model, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessFlowV2")
	}

	var r0 *client.AccessFlowPublicV2Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.AccessFlowUpsertPublicV2Model, client.UpdateAccessFlowV2Params) (*client.AccessFlowPublicV2Model, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.AccessFlowUpsertPublicV2Model, client.UpdateAccessFlowV2Params) *client.AccessFlowPublicV2Model); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessFlowPublicV2Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.AccessFlowUpsertPublicV2Model, client.UpdateAccessFlowV2Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateAccessFlowV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessFlowV2'
type Invoker_UpdateAccessFlowV2_Call struct {
	*mock.Call
}

// UpdateAccessFlowV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.AccessFlowUpsertPublicV2Model
//   - params client.UpdateAccessFlowV2Params
func (_e *Invoker_Expecter) UpdateAccessFlowV2(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateAccessFlowV2_Call {
	return &Invoker_UpdateAccessFlowV2_Call{Call: _e.mock.On("UpdateAccessFlowV2", ctx, request, params)}
}

func (_c *Invoker_UpdateAccessFlowV2_Call) Run(run func(ctx context.Context, request *client.AccessFlowUpsertPublicV2Model, params client.UpdateAccessFlowV2Params)) *Invoker_UpdateAccessFlowV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.AccessFlowUpsertPublicV2Model), args[2].(client.UpdateAccessFlowV2Params))
	})
	return _c
}

func (_c *Invoker_UpdateAccessFlowV2_Call) Return(_a0 *client.AccessFlowPublicV2Model, _a1 error) *Invoker_UpdateAccessFlowV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateAccessFlowV2_Call) RunAndReturn(run func(context.Context, *client.AccessFlowUpsertPublicV2Model, client.UpdateAccessFlowV2Params) (*client.AccessFlowPublicV2Model, error)) *Invoker_UpdateAccessFlowV2_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessScopesV1 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateAccessScopesV1(ctx context.Context, request *client.UpsertAccessScopeV1, params client.UpdateAccessScopesV1Params) (*client.AccessScopeV1, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessScopesV1")
	}

	var r0 *client.AccessScopeV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertAccessScopeV1, client.UpdateAccessScopesV1Params) (*client.AccessScopeV1, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertAccessScopeV1, client.UpdateAccessScopesV1Params) *client.AccessScopeV1); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessScopeV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpsertAccessScopeV1, client.UpdateAccessScopesV1Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateAccessScopesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessScopesV1'
type Invoker_UpdateAccessScopesV1_Call struct {
	*mock.Call
}

// UpdateAccessScopesV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpsertAccessScopeV1
//   - params client.UpdateAccessScopesV1Params
func (_e *Invoker_Expecter) UpdateAccessScopesV1(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateAccessScopesV1_Call {
	return &Invoker_UpdateAccessScopesV1_Call{Call: _e.mock.On("UpdateAccessScopesV1", ctx, request, params)}
}

func (_c *Invoker_UpdateAccessScopesV1_Call) Run(run func(ctx context.Context, request *client.UpsertAccessScopeV1, params client.UpdateAccessScopesV1Params)) *Invoker_UpdateAccessScopesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpsertAccessScopeV1), args[2].(client.UpdateAccessScopesV1Params))
	})
	return _c
}

func (_c *Invoker_UpdateAccessScopesV1_Call) Return(_a0 *client.AccessScopeV1, _a1 error) *Invoker_UpdateAccessScopesV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateAccessScopesV1_Call) RunAndReturn(run func(context.Context, *client.UpsertAccessScopeV1, client.UpdateAccessScopesV1Params) (*client.AccessScopeV1, error)) *Invoker_UpdateAccessScopesV1_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBundleV2 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateBundleV2(ctx context.Context, request *client.UpsertBundlePublicV2Model, params client.UpdateBundleV2Params) (*client.BundlePublicV2Model, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBundleV2")
	}

	var r0 *client.BundlePublicV2Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertBundlePublicV2Model, client.UpdateBundleV2Params) (*client.BundlePublicV2Model, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertBundlePublicV2Model, client.UpdateBundleV2Params) *client.BundlePublicV2Model); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BundlePublicV2Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpsertBundlePublicV2Model, client.UpdateBundleV2Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateBundleV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBundleV2'
type Invoker_UpdateBundleV2_Call struct {
	*mock.Call
}

// UpdateBundleV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpsertBundlePublicV2Model
//   - params client.UpdateBundleV2Params
func (_e *Invoker_Expecter) UpdateBundleV2(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateBundleV2_Call {
	return &Invoker_UpdateBundleV2_Call{Call: _e.mock.On("UpdateBundleV2", ctx, request, params)}
}

func (_c *Invoker_UpdateBundleV2_Call) Run(run func(ctx context.Context, request *client.UpsertBundlePublicV2Model, params client.UpdateBundleV2Params)) *Invoker_UpdateBundleV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpsertBundlePublicV2Model), args[2].(client.UpdateBundleV2Params))
	})
	return _c
}

func (_c *Invoker_UpdateBundleV2_Call) Return(_a0 *client.BundlePublicV2Model, _a1 error) *Invoker_UpdateBundleV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateBundleV2_Call) RunAndReturn(run func(context.Context, *client.UpsertBundlePublicV2Model, client.UpdateBundleV2Params) (*client.BundlePublicV2Model, error)) *Invoker_UpdateBundleV2_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConnectorV3 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateConnectorV3(ctx context.Context, request *client.UpsertConnectorV3, params client.UpdateConnectorV3Params) (*client.ConnectorV3, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectorV3")
	}

	var r0 *client.ConnectorV3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertConnectorV3, client.UpdateConnectorV3Params) (*client.ConnectorV3, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpsertConnectorV3, client.UpdateConnectorV3Params) *client.ConnectorV3); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ConnectorV3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpsertConnectorV3, client.UpdateConnectorV3Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateConnectorV3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConnectorV3'
type Invoker_UpdateConnectorV3_Call struct {
	*mock.Call
}

// UpdateConnectorV3 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpsertConnectorV3
//   - params client.UpdateConnectorV3Params
func (_e *Invoker_Expecter) UpdateConnectorV3(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateConnectorV3_Call {
	return &Invoker_UpdateConnectorV3_Call{Call: _e.mock.On("UpdateConnectorV3", ctx, request, params)}
}

func (_c *Invoker_UpdateConnectorV3_Call) Run(run func(ctx context.Context, request *client.UpsertConnectorV3, params client.UpdateConnectorV3Params)) *Invoker_UpdateConnectorV3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpsertConnectorV3), args[2].(client.UpdateConnectorV3Params))
	})
	return _c
}

func (_c *Invoker_UpdateConnectorV3_Call) Return(_a0 *client.ConnectorV3, _a1 error) *Invoker_UpdateConnectorV3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateConnectorV3_Call) RunAndReturn(run func(context.Context, *client.UpsertConnectorV3, client.UpdateConnectorV3Params) (*client.ConnectorV3, error)) *Invoker_UpdateConnectorV3_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupMembersV1 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateGroupMembersV1(ctx context.Context, request *client.UpdateGroupMembersV1, params client.UpdateGroupMembersV1Params) error {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupMembersV1")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateGroupMembersV1, client.UpdateGroupMembersV1Params) error); ok {
		r0 = rf(ctx, request, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invoker_UpdateGroupMembersV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupMembersV1'
type Invoker_UpdateGroupMembersV1_Call struct {
	*mock.Call
}

// UpdateGroupMembersV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpdateGroupMembersV1
//   - params client.UpdateGroupMembersV1Params
func (_e *Invoker_Expecter) UpdateGroupMembersV1(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateGroupMembersV1_Call {
	return &Invoker_UpdateGroupMembersV1_Call{Call: _e.mock.On("UpdateGroupMembersV1", ctx, request, params)}
}

func (_c *Invoker_UpdateGroupMembersV1_Call) Run(run func(ctx context.Context, request *client.UpdateGroupMembersV1, params client.UpdateGroupMembersV1Params)) *Invoker_UpdateGroupMembersV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpdateGroupMembersV1), args[2].(client.UpdateGroupMembersV1Params))
	})
	return _c
}

func (_c *Invoker_UpdateGroupMembersV1_Call) Return(_a0 error) *Invoker_UpdateGroupMembersV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Invoker_UpdateGroupMembersV1_Call) RunAndReturn(run func(context.Context, *client.UpdateGroupMembersV1, client.UpdateGroupMembersV1Params) error) *Invoker_UpdateGroupMembersV1_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupV1 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateGroupV1(ctx context.Context, request *client.UpdateGroupV1, params client.UpdateGroupV1Params) (*client.GroupV1, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupV1")
	}

	var r0 *client.GroupV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateGroupV1, client.UpdateGroupV1Params) (*client.GroupV1, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateGroupV1, client.UpdateGroupV1Params) *client.GroupV1); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GroupV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpdateGroupV1, client.UpdateGroupV1Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateGroupV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupV1'
type Invoker_UpdateGroupV1_Call struct {
	*mock.Call
}

// UpdateGroupV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpdateGroupV1
//   - params client.UpdateGroupV1Params
func (_e *Invoker_Expecter) UpdateGroupV1(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateGroupV1_Call {
	return &Invoker_UpdateGroupV1_Call{Call: _e.mock.On("UpdateGroupV1", ctx, request, params)}
}

func (_c *Invoker_UpdateGroupV1_Call) Run(run func(ctx context.Context, request *client.UpdateGroupV1, params client.UpdateGroupV1Params)) *Invoker_UpdateGroupV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpdateGroupV1), args[2].(client.UpdateGroupV1Params))
	})
	return _c
}

func (_c *Invoker_UpdateGroupV1_Call) Return(_a0 *client.GroupV1, _a1 error) *Invoker_UpdateGroupV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateGroupV1_Call) RunAndReturn(run func(context.Context, *client.UpdateGroupV1, client.UpdateGroupV1Params) (*client.GroupV1, error)) *Invoker_UpdateGroupV1_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIntegrationV2 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateIntegrationV2(ctx context.Context, request *client.UpdateIntegration, params client.UpdateIntegrationV2Params) (*client.Integration, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIntegrationV2")
	}

	var r0 *client.Integration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateIntegration, client.UpdateIntegrationV2Params) (*client.Integration, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateIntegration, client.UpdateIntegrationV2Params) *client.Integration); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Integration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpdateIntegration, client.UpdateIntegrationV2Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateIntegrationV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIntegrationV2'
type Invoker_UpdateIntegrationV2_Call struct {
	*mock.Call
}

// UpdateIntegrationV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpdateIntegration
//   - params client.UpdateIntegrationV2Params
func (_e *Invoker_Expecter) UpdateIntegrationV2(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateIntegrationV2_Call {
	return &Invoker_UpdateIntegrationV2_Call{Call: _e.mock.On("UpdateIntegrationV2", ctx, request, params)}
}

func (_c *Invoker_UpdateIntegrationV2_Call) Run(run func(ctx context.Context, request *client.UpdateIntegration, params client.UpdateIntegrationV2Params)) *Invoker_UpdateIntegrationV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpdateIntegration), args[2].(client.UpdateIntegrationV2Params))
	})
	return _c
}

func (_c *Invoker_UpdateIntegrationV2_Call) Return(_a0 *client.Integration, _a1 error) *Invoker_UpdateIntegrationV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateIntegrationV2_Call) RunAndReturn(run func(context.Context, *client.UpdateIntegration, client.UpdateIntegrationV2Params) (*client.Integration, error)) *Invoker_UpdateIntegrationV2_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIntegrationV4 provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateIntegrationV4(ctx context.Context, request *client.UpdateIntegrationV4, params client.UpdateIntegrationV4Params) (*client.IntegrationV4, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIntegrationV4")
	}

	var r0 *client.IntegrationV4
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateIntegrationV4, client.UpdateIntegrationV4Params) (*client.IntegrationV4, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateIntegrationV4, client.UpdateIntegrationV4Params) *client.IntegrationV4); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.IntegrationV4)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpdateIntegrationV4, client.UpdateIntegrationV4Params) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateIntegrationV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIntegrationV4'
type Invoker_UpdateIntegrationV4_Call struct {
	*mock.Call
}

// UpdateIntegrationV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpdateIntegrationV4
//   - params client.UpdateIntegrationV4Params
func (_e *Invoker_Expecter) UpdateIntegrationV4(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateIntegrationV4_Call {
	return &Invoker_UpdateIntegrationV4_Call{Call: _e.mock.On("UpdateIntegrationV4", ctx, request, params)}
}

func (_c *Invoker_UpdateIntegrationV4_Call) Run(run func(ctx context.Context, request *client.UpdateIntegrationV4, params client.UpdateIntegrationV4Params)) *Invoker_UpdateIntegrationV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpdateIntegrationV4), args[2].(client.UpdateIntegrationV4Params))
	})
	return _c
}

func (_c *Invoker_UpdateIntegrationV4_Call) Return(_a0 *client.IntegrationV4, _a1 error) *Invoker_UpdateIntegrationV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateIntegrationV4_Call) RunAndReturn(run func(context.Context, *client.UpdateIntegrationV4, client.UpdateIntegrationV4Params) (*client.IntegrationV4, error)) *Invoker_UpdateIntegrationV4_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateResourceUserTags provides a mock function with given fields: ctx, request, params
func (_m *Invoker) UpdateResourceUserTags(ctx context.Context, request *client.UpdateResourceUserTagsRequest, params client.UpdateResourceUserTagsParams) (*client.MessageResponse, error) {
	ret := _m.Called(ctx, request, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResourceUserTags")
	}

	var r0 *client.MessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateResourceUserTagsRequest, client.UpdateResourceUserTagsParams) (*client.MessageResponse, error)); ok {
		return rf(ctx, request, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpdateResourceUserTagsRequest, client.UpdateResourceUserTagsParams) *client.MessageResponse); ok {
		r0 = rf(ctx, request, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.MessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpdateResourceUserTagsRequest, client.UpdateResourceUserTagsParams) error); ok {
		r1 = rf(ctx, request, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoker_UpdateResourceUserTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateResourceUserTags'
type Invoker_UpdateResourceUserTags_Call struct {
	*mock.Call
}

// UpdateResourceUserTags is a helper method to define mock.On call
//   - ctx context.Context
//   - request *client.UpdateResourceUserTagsRequest
//   - params client.UpdateResourceUserTagsParams
func (_e *Invoker_Expecter) UpdateResourceUserTags(ctx interface{}, request interface{}, params interface{}) *Invoker_UpdateResourceUserTags_Call {
	return &Invoker_UpdateResourceUserTags_Call{Call: _e.mock.On("UpdateResourceUserTags", ctx, request, params)}
}

func (_c *Invoker_UpdateResourceUserTags_Call) Run(run func(ctx context.Context, request *client.UpdateResourceUserTagsRequest, params client.UpdateResourceUserTagsParams)) *Invoker_UpdateResourceUserTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpdateResourceUserTagsRequest), args[2].(client.UpdateResourceUserTagsParams))
	})
	return _c
}

func (_c *Invoker_UpdateResourceUserTags_Call) Return(_a0 *client.MessageResponse, _a1 error) *Invoker_UpdateResourceUserTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Invoker_UpdateResourceUserTags_Call) RunAndReturn(run func(context.Context, *client.UpdateResourceUserTagsRequest, client.UpdateResourceUserTagsParams) (*client.MessageResponse, error)) *Invoker_UpdateResourceUserTags_Call {
	_c.Call.Return(run)
	return _c
}

// NewInvoker creates a new instance of Invoker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvoker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Invoker {
	mock := &Invoker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
