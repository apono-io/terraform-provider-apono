// Code generated by ogen, DO NOT EDIT.

package client

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/"

			if l := len("/api/"); len(elem) >= l && elem[0:l] == "/api/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "admin/v"

				if l := len("admin/v"); len(elem) >= l && elem[0:l] == "admin/v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '1': // Prefix: "1/"

					if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "access-scopes"

						if l := len("access-scopes"); len(elem) >= l && elem[0:l] == "access-scopes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListAccessScopesV1Request([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateAccessScopesV1Request([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteAccessScopesV1Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetAccessScopesV1Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateAccessScopesV1Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}

						}

					case 'g': // Prefix: "groups"

						if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListGroupsV1Request([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateGroupV1Request([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleDeleteGroupV1Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetGroupV1Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'm': // Prefix: "members"

									if l := len("members"); len(elem) >= l && elem[0:l] == "members" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleListGroupMembersV1Request([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										case "PUT":
											s.handleUpdateGroupMembersV1Request([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,PUT")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"

										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "email"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleRemoveGroupMemberV1Request([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											case "PUT":
												s.handleAddGroupMemberV1Request([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,PUT")
											}

											return
										}

									}

								case 'n': // Prefix: "name"

									if l := len("name"); len(elem) >= l && elem[0:l] == "name" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "PUT":
											s.handleUpdateGroupV1Request([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "PUT")
										}

										return
									}

								}

							}

						}

					}

				case '2': // Prefix: "2/"

					if l := len("2/"); len(elem) >= l && elem[0:l] == "2/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "access-flows"

						if l := len("access-flows"); len(elem) >= l && elem[0:l] == "access-flows" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListAccessFlowsV2Request([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateAccessFlowV2Request([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteAccessFlowV2Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetAccessFlowV2Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateAccessFlowV2Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}

						}

					case 'b': // Prefix: "bundles"

						if l := len("bundles"); len(elem) >= l && elem[0:l] == "bundles" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListBundlesV2Request([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateBundleV2Request([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteBundleV2Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetBundleV2Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateBundleV2Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}

						}

					}

				case '3': // Prefix: "3/"

					if l := len("3/"); len(elem) >= l && elem[0:l] == "3/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "connectors"

						if l := len("connectors"); len(elem) >= l && elem[0:l] == "connectors" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListConnectorsV3Request([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteConnectorV3Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetConnectorV3Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateConnectorV3Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}

						}

					case 'u': // Prefix: "users"

						if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListUsersV3Request([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetUserV3Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						}

					}

				case '4': // Prefix: "4/integrations"

					if l := len("4/integrations"); len(elem) >= l && elem[0:l] == "4/integrations" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListIntegrationsV4Request([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateIntegrationV4Request([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteIntegrationV4Request([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetIntegrationsByIdV4Request([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateIntegrationV4Request([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}

					}

				}

			case 'u': // Prefix: "user/v"

				if l := len("user/v"); len(elem) >= l && elem[0:l] == "user/v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '1': // Prefix: "1/a"

					if l := len("1/a"); len(elem) >= l && elem[0:l] == "1/a" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "ccess-sessions"

						if l := len("ccess-sessions"); len(elem) >= l && elem[0:l] == "ccess-sessions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListAccessSessionsV1Request([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetAccessSessionV1Request([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "access-details"

									if l := len("access-details"); len(elem) >= l && elem[0:l] == "access-details" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetAccessSessionAccessDetailsV1Request([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								case 'r': // Prefix: "reset-credentials"

									if l := len("reset-credentials"); len(elem) >= l && elem[0:l] == "reset-credentials" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleResetAccessSessionCredentialsV1Request([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							}

						}

					case 'v': // Prefix: "vailable-access/"

						if l := len("vailable-access/"); len(elem) >= l && elem[0:l] == "vailable-access/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "bundles"

							if l := len("bundles"); len(elem) >= l && elem[0:l] == "bundles" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListAvailableBundlesV1Request([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 'e': // Prefix: "entitlements"

							if l := len("entitlements"); len(elem) >= l && elem[0:l] == "entitlements" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListAvailableEntitlementsV1Request([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						}

					}

				case '4': // Prefix: "4/access-requests"

					if l := len("4/access-requests"); len(elem) >= l && elem[0:l] == "4/access-requests" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListAccessRequestsV4Request([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateAccessRequestV4Request([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetAccessRequestsV4Request([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "entitlements"

								if l := len("entitlements"); len(elem) >= l && elem[0:l] == "entitlements" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetAccessRequestEntitlementsV4Request([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							case 'r': // Prefix: "re"

								if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'q': // Prefix: "quest-again"

									if l := len("quest-again"); len(elem) >= l && elem[0:l] == "quest-again" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleRequestAccessAgainV4Request([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								case 'v': // Prefix: "voke"

									if l := len("voke"); len(elem) >= l && elem[0:l] == "voke" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleRevokeAccessRequestV4Request([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							}

						}

					}

				}

			case 'v': // Prefix: "v"

				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '1': // Prefix: "1/"

					if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "access-"

						if l := len("access-"); len(elem) >= l && elem[0:l] == "access-" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "bundles"

							if l := len("bundles"); len(elem) >= l && elem[0:l] == "bundles" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleListAccessBundlesRequest([0]string{}, elemIsEscaped, w, r)
								case "POST":
									s.handleCreateAccessBundleRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleDeleteAccessBundleRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetAccessBundleRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PATCH":
										s.handleUpdateAccessBundleRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PATCH")
									}

									return
								}

							}

						case 'f': // Prefix: "flows"

							if l := len("flows"); len(elem) >= l && elem[0:l] == "flows" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleListAccessFlowsV1Request([0]string{}, elemIsEscaped, w, r)
								case "POST":
									s.handleCreateAccessFlowV1Request([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleDeleteAccessFlowV1Request([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetAccessFlowV1Request([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PATCH":
										s.handleUpdateAccessFlowV1Request([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PATCH")
									}

									return
								}

							}

						}

					case 'c': // Prefix: "connector-action-params/"

						if l := len("connector-action-params/"); len(elem) >= l && elem[0:l] == "connector-action-params/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'g': // Prefix: "grant-access"

							if l := len("grant-access"); len(elem) >= l && elem[0:l] == "grant-access" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleGetGrantAccessConnectorActionParamsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'r': // Prefix: "revoke-access"

							if l := len("revoke-access"); len(elem) >= l && elem[0:l] == "revoke-access" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleGetRevokeAccessConnectorActionParamsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					}

				case '2': // Prefix: "2/"

					if l := len("2/"); len(elem) >= l && elem[0:l] == "2/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'b': // Prefix: "bulk/identities/attributes"

						if l := len("bulk/identities/attributes"); len(elem) >= l && elem[0:l] == "bulk/identities/attributes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleBulkDeleteAttributesFormIdentitiesRequest([0]string{}, elemIsEscaped, w, r)
							case "GET":
								s.handleListAttributesForIdentitiesRequest([0]string{}, elemIsEscaped, w, r)
							case "PUT":
								s.handleBulkUpsertAttributesForIdentitiesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}

					case 'c': // Prefix: "connectors"

						if l := len("connectors"); len(elem) >= l && elem[0:l] == "connectors" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleListConnectorsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 'i': // Prefix: "i"

						if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "dentities"

							if l := len("dentities"); len(elem) >= l && elem[0:l] == "dentities" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListIdentitiesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 'n': // Prefix: "ntegrations"

							if l := len("ntegrations"); len(elem) >= l && elem[0:l] == "ntegrations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleListIntegrationsV2Request([0]string{}, elemIsEscaped, w, r)
								case "POST":
									s.handleCreateIntegrationV2Request([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '-': // Prefix: "-catalog"

								if l := len("-catalog"); len(elem) >= l && elem[0:l] == "-catalog" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleListIntegrationConfigsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "type"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetIntegrationConfigRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								}

							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleDeleteIntegrationV2Request([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetIntegrationV2Request([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleUpdateIntegrationV2Request([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PUT")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/refresh"

									if l := len("/refresh"); len(elem) >= l && elem[0:l] == "/refresh" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleRefreshIntegrationV2Request([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							}

						}

					case 'u': // Prefix: "users"

						if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListUsersRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetUserRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						}

					}

				case '3': // Prefix: "3/"

					if l := len("3/"); len(elem) >= l && elem[0:l] == "3/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "ac"

						if l := len("ac"); len(elem) >= l && elem[0:l] == "ac" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "cess-requests"

							if l := len("cess-requests"); len(elem) >= l && elem[0:l] == "cess-requests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleListAccessRequestsRequest([0]string{}, elemIsEscaped, w, r)
								case "POST":
									s.handleCreateAccessRequestRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '-': // Prefix: "-bulk/revoke"

								if l := len("-bulk/revoke"); len(elem) >= l && elem[0:l] == "-bulk/revoke" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleRevokeAccessRequestsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetAccessRequestRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "access-details"

										if l := len("access-details"); len(elem) >= l && elem[0:l] == "access-details" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetAccessRequestDetailsRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									case 'r': // Prefix: "reset"

										if l := len("reset"); len(elem) >= l && elem[0:l] == "reset" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleResetAccessRequestCredentialsRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								}

							}

						case 't': // Prefix: "tivity"

							if l := len("tivity"); len(elem) >= l && elem[0:l] == "tivity" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListActivityRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						}

					case 'i': // Prefix: "integrations/"

						if l := len("integrations/"); len(elem) >= l && elem[0:l] == "integrations/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'r': // Prefix: "resources/"
							origElem := elem
							if l := len("resources/"); len(elem) >= l && elem[0:l] == "resources/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "resource_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/user-tags"

								if l := len("/user-tags"); len(elem) >= l && elem[0:l] == "/user-tags" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetResourceUserTagsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleUpdateResourceUserTagsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,PUT")
									}

									return
								}

							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "permissions"

								if l := len("permissions"); len(elem) >= l && elem[0:l] == "permissions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetIntegrationPermissionsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							case 'r': // Prefix: "resources"

								if l := len("resources"); len(elem) >= l && elem[0:l] == "resources" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetIntegrationResourcesRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							}

						}

					case 's': // Prefix: "selectable-integrations"

						if l := len("selectable-integrations"); len(elem) >= l && elem[0:l] == "selectable-integrations" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetSelectableIntegrationsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "integration_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'r': // Prefix: "resource-types"
									origElem := elem
									if l := len("resource-types"); len(elem) >= l && elem[0:l] == "resource-types" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetSelectableResourceTypesRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}
								// Param: "resource_type"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'p': // Prefix: "permissions"

										if l := len("permissions"); len(elem) >= l && elem[0:l] == "permissions" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetSelectablePermissionsRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									case 'r': // Prefix: "resources"

										if l := len("resources"); len(elem) >= l && elem[0:l] == "resources" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetSelectableResourcesRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									}

								}

							}

						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/"

			if l := len("/api/"); len(elem) >= l && elem[0:l] == "/api/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "admin/v"

				if l := len("admin/v"); len(elem) >= l && elem[0:l] == "admin/v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '1': // Prefix: "1/"

					if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "access-scopes"

						if l := len("access-scopes"); len(elem) >= l && elem[0:l] == "access-scopes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = ListAccessScopesV1Operation
								r.summary = "List Access Scopes"
								r.operationID = "listAccessScopesV1"
								r.pathPattern = "/api/admin/v1/access-scopes"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = CreateAccessScopesV1Operation
								r.summary = "Create Access Scope"
								r.operationID = "createAccessScopesV1"
								r.pathPattern = "/api/admin/v1/access-scopes"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = DeleteAccessScopesV1Operation
									r.summary = "Delete Access Scope"
									r.operationID = "deleteAccessScopesV1"
									r.pathPattern = "/api/admin/v1/access-scopes/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = GetAccessScopesV1Operation
									r.summary = "Get Access Scope"
									r.operationID = "getAccessScopesV1"
									r.pathPattern = "/api/admin/v1/access-scopes/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									r.name = UpdateAccessScopesV1Operation
									r.summary = "Update Access Scope"
									r.operationID = "updateAccessScopesV1"
									r.pathPattern = "/api/admin/v1/access-scopes/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					case 'g': // Prefix: "groups"

						if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = ListGroupsV1Operation
								r.summary = "List Groups"
								r.operationID = "listGroupsV1"
								r.pathPattern = "/api/admin/v1/groups"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = CreateGroupV1Operation
								r.summary = "Create Group"
								r.operationID = "createGroupV1"
								r.pathPattern = "/api/admin/v1/groups"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = DeleteGroupV1Operation
									r.summary = "Delete Group"
									r.operationID = "deleteGroupV1"
									r.pathPattern = "/api/admin/v1/groups/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = GetGroupV1Operation
									r.summary = "Get Group"
									r.operationID = "getGroupV1"
									r.pathPattern = "/api/admin/v1/groups/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'm': // Prefix: "members"

									if l := len("members"); len(elem) >= l && elem[0:l] == "members" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = ListGroupMembersV1Operation
											r.summary = "Get Group Members"
											r.operationID = "listGroupMembersV1"
											r.pathPattern = "/api/admin/v1/groups/{id}/members"
											r.args = args
											r.count = 1
											return r, true
										case "PUT":
											r.name = UpdateGroupMembersV1Operation
											r.summary = "Update Group Members"
											r.operationID = "updateGroupMembersV1"
											r.pathPattern = "/api/admin/v1/groups/{id}/members"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"

										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "email"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[1] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "DELETE":
												r.name = RemoveGroupMemberV1Operation
												r.summary = "Remove Group Member"
												r.operationID = "removeGroupMemberV1"
												r.pathPattern = "/api/admin/v1/groups/{id}/members/{email}"
												r.args = args
												r.count = 2
												return r, true
											case "PUT":
												r.name = AddGroupMemberV1Operation
												r.summary = "Add Group Member"
												r.operationID = "addGroupMemberV1"
												r.pathPattern = "/api/admin/v1/groups/{id}/members/{email}"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

									}

								case 'n': // Prefix: "name"

									if l := len("name"); len(elem) >= l && elem[0:l] == "name" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "PUT":
											r.name = UpdateGroupV1Operation
											r.summary = "Update Group"
											r.operationID = "updateGroupV1"
											r.pathPattern = "/api/admin/v1/groups/{id}/name"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								}

							}

						}

					}

				case '2': // Prefix: "2/"

					if l := len("2/"); len(elem) >= l && elem[0:l] == "2/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "access-flows"

						if l := len("access-flows"); len(elem) >= l && elem[0:l] == "access-flows" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = ListAccessFlowsV2Operation
								r.summary = "List access flows"
								r.operationID = "listAccessFlowsV2"
								r.pathPattern = "/api/admin/v2/access-flows"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = CreateAccessFlowV2Operation
								r.summary = "Create access flow"
								r.operationID = "createAccessFlowV2"
								r.pathPattern = "/api/admin/v2/access-flows"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = DeleteAccessFlowV2Operation
									r.summary = "Delete access flow"
									r.operationID = "deleteAccessFlowV2"
									r.pathPattern = "/api/admin/v2/access-flows/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = GetAccessFlowV2Operation
									r.summary = "Get access flow"
									r.operationID = "getAccessFlowV2"
									r.pathPattern = "/api/admin/v2/access-flows/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									r.name = UpdateAccessFlowV2Operation
									r.summary = "Update access flow"
									r.operationID = "updateAccessFlowV2"
									r.pathPattern = "/api/admin/v2/access-flows/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					case 'b': // Prefix: "bundles"

						if l := len("bundles"); len(elem) >= l && elem[0:l] == "bundles" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = ListBundlesV2Operation
								r.summary = "List Bundles"
								r.operationID = "listBundlesV2"
								r.pathPattern = "/api/admin/v2/bundles"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = CreateBundleV2Operation
								r.summary = "Create Bundle"
								r.operationID = "createBundleV2"
								r.pathPattern = "/api/admin/v2/bundles"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = DeleteBundleV2Operation
									r.summary = "Delete Bundle"
									r.operationID = "deleteBundleV2"
									r.pathPattern = "/api/admin/v2/bundles/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = GetBundleV2Operation
									r.summary = "Get Bundle"
									r.operationID = "getBundleV2"
									r.pathPattern = "/api/admin/v2/bundles/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									r.name = UpdateBundleV2Operation
									r.summary = "Update Bundle"
									r.operationID = "updateBundleV2"
									r.pathPattern = "/api/admin/v2/bundles/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					}

				case '3': // Prefix: "3/"

					if l := len("3/"); len(elem) >= l && elem[0:l] == "3/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "connectors"

						if l := len("connectors"); len(elem) >= l && elem[0:l] == "connectors" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = ListConnectorsV3Operation
								r.summary = "List Connectors"
								r.operationID = "listConnectorsV3"
								r.pathPattern = "/api/admin/v3/connectors"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = DeleteConnectorV3Operation
									r.summary = "Delete Connector"
									r.operationID = "deleteConnectorV3"
									r.pathPattern = "/api/admin/v3/connectors/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = GetConnectorV3Operation
									r.summary = "Get Connector"
									r.operationID = "getConnectorV3"
									r.pathPattern = "/api/admin/v3/connectors/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									r.name = UpdateConnectorV3Operation
									r.summary = "Update Connector"
									r.operationID = "updateConnectorV3"
									r.pathPattern = "/api/admin/v3/connectors/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					case 'u': // Prefix: "users"

						if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = ListUsersV3Operation
								r.summary = "List Users"
								r.operationID = "listUsersV3"
								r.pathPattern = "/api/admin/v3/users"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetUserV3Operation
									r.summary = "Get User"
									r.operationID = "getUserV3"
									r.pathPattern = "/api/admin/v3/users/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					}

				case '4': // Prefix: "4/integrations"

					if l := len("4/integrations"); len(elem) >= l && elem[0:l] == "4/integrations" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = ListIntegrationsV4Operation
							r.summary = "list integrations"
							r.operationID = "listIntegrationsV4"
							r.pathPattern = "/api/admin/v4/integrations"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = CreateIntegrationV4Operation
							r.summary = "create integration"
							r.operationID = "createIntegrationV4"
							r.pathPattern = "/api/admin/v4/integrations"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = DeleteIntegrationV4Operation
								r.summary = "delete integration"
								r.operationID = "deleteIntegrationV4"
								r.pathPattern = "/api/admin/v4/integrations/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = GetIntegrationsByIdV4Operation
								r.summary = "get integration by id"
								r.operationID = "getIntegrationsByIdV4"
								r.pathPattern = "/api/admin/v4/integrations/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = UpdateIntegrationV4Operation
								r.summary = "update integration"
								r.operationID = "updateIntegrationV4"
								r.pathPattern = "/api/admin/v4/integrations/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'u': // Prefix: "user/v"

				if l := len("user/v"); len(elem) >= l && elem[0:l] == "user/v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '1': // Prefix: "1/a"

					if l := len("1/a"); len(elem) >= l && elem[0:l] == "1/a" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "ccess-sessions"

						if l := len("ccess-sessions"); len(elem) >= l && elem[0:l] == "ccess-sessions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = ListAccessSessionsV1Operation
								r.summary = "List access sessions"
								r.operationID = "listAccessSessionsV1"
								r.pathPattern = "/api/user/v1/access-sessions"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = GetAccessSessionV1Operation
									r.summary = "Get access session"
									r.operationID = "getAccessSessionV1"
									r.pathPattern = "/api/user/v1/access-sessions/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "access-details"

									if l := len("access-details"); len(elem) >= l && elem[0:l] == "access-details" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetAccessSessionAccessDetailsV1Operation
											r.summary = "Get session access details"
											r.operationID = "getAccessSessionAccessDetailsV1"
											r.pathPattern = "/api/user/v1/access-sessions/{id}/access-details"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 'r': // Prefix: "reset-credentials"

									if l := len("reset-credentials"); len(elem) >= l && elem[0:l] == "reset-credentials" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = ResetAccessSessionCredentialsV1Operation
											r.summary = "Reset session credentials"
											r.operationID = "resetAccessSessionCredentialsV1"
											r.pathPattern = "/api/user/v1/access-sessions/{id}/reset-credentials"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								}

							}

						}

					case 'v': // Prefix: "vailable-access/"

						if l := len("vailable-access/"); len(elem) >= l && elem[0:l] == "vailable-access/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "bundles"

							if l := len("bundles"); len(elem) >= l && elem[0:l] == "bundles" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = ListAvailableBundlesV1Operation
									r.summary = "List available bundles"
									r.operationID = "listAvailableBundlesV1"
									r.pathPattern = "/api/user/v1/available-access/bundles"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'e': // Prefix: "entitlements"

							if l := len("entitlements"); len(elem) >= l && elem[0:l] == "entitlements" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = ListAvailableEntitlementsV1Operation
									r.summary = "List available entitlements"
									r.operationID = "listAvailableEntitlementsV1"
									r.pathPattern = "/api/user/v1/available-access/entitlements"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				case '4': // Prefix: "4/access-requests"

					if l := len("4/access-requests"); len(elem) >= l && elem[0:l] == "4/access-requests" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = ListAccessRequestsV4Operation
							r.summary = "List access requests"
							r.operationID = "listAccessRequestsV4"
							r.pathPattern = "/api/user/v4/access-requests"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = CreateAccessRequestV4Operation
							r.summary = "Create access request"
							r.operationID = "createAccessRequestV4"
							r.pathPattern = "/api/user/v4/access-requests"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetAccessRequestsV4Operation
								r.summary = "Get access request"
								r.operationID = "getAccessRequestsV4"
								r.pathPattern = "/api/user/v4/access-requests/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "entitlements"

								if l := len("entitlements"); len(elem) >= l && elem[0:l] == "entitlements" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GetAccessRequestEntitlementsV4Operation
										r.summary = "Get access request entitlements"
										r.operationID = "getAccessRequestEntitlementsV4"
										r.pathPattern = "/api/user/v4/access-requests/{id}/entitlements"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							case 'r': // Prefix: "re"

								if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'q': // Prefix: "quest-again"

									if l := len("quest-again"); len(elem) >= l && elem[0:l] == "quest-again" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = RequestAccessAgainV4Operation
											r.summary = "Request access again"
											r.operationID = "requestAccessAgainV4"
											r.pathPattern = "/api/user/v4/access-requests/{id}/request-again"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 'v': // Prefix: "voke"

									if l := len("voke"); len(elem) >= l && elem[0:l] == "voke" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = RevokeAccessRequestV4Operation
											r.summary = "Revoke access request"
											r.operationID = "revokeAccessRequestV4"
											r.pathPattern = "/api/user/v4/access-requests/{id}/revoke"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								}

							}

						}

					}

				}

			case 'v': // Prefix: "v"

				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '1': // Prefix: "1/"

					if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "access-"

						if l := len("access-"); len(elem) >= l && elem[0:l] == "access-" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "bundles"

							if l := len("bundles"); len(elem) >= l && elem[0:l] == "bundles" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = ListAccessBundlesOperation
									r.summary = "List Access Bundles"
									r.operationID = "listAccessBundles"
									r.pathPattern = "/api/v1/access-bundles"
									r.args = args
									r.count = 0
									return r, true
								case "POST":
									r.name = CreateAccessBundleOperation
									r.summary = "Create Access Bundle"
									r.operationID = "createAccessBundle"
									r.pathPattern = "/api/v1/access-bundles"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "DELETE":
										r.name = DeleteAccessBundleOperation
										r.summary = "Delete Access Bundle"
										r.operationID = "deleteAccessBundle"
										r.pathPattern = "/api/v1/access-bundles/{id}"
										r.args = args
										r.count = 1
										return r, true
									case "GET":
										r.name = GetAccessBundleOperation
										r.summary = "Get Access Bundle"
										r.operationID = "getAccessBundle"
										r.pathPattern = "/api/v1/access-bundles/{id}"
										r.args = args
										r.count = 1
										return r, true
									case "PATCH":
										r.name = UpdateAccessBundleOperation
										r.summary = "Update Access Bundle"
										r.operationID = "updateAccessBundle"
										r.pathPattern = "/api/v1/access-bundles/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

						case 'f': // Prefix: "flows"

							if l := len("flows"); len(elem) >= l && elem[0:l] == "flows" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = ListAccessFlowsV1Operation
									r.summary = "List Access Flows"
									r.operationID = "listAccessFlowsV1"
									r.pathPattern = "/api/v1/access-flows"
									r.args = args
									r.count = 0
									return r, true
								case "POST":
									r.name = CreateAccessFlowV1Operation
									r.summary = "Create Access Flow"
									r.operationID = "createAccessFlowV1"
									r.pathPattern = "/api/v1/access-flows"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "DELETE":
										r.name = DeleteAccessFlowV1Operation
										r.summary = "Delete Access Flow"
										r.operationID = "deleteAccessFlowV1"
										r.pathPattern = "/api/v1/access-flows/{id}"
										r.args = args
										r.count = 1
										return r, true
									case "GET":
										r.name = GetAccessFlowV1Operation
										r.summary = "Get Access Flow"
										r.operationID = "getAccessFlowV1"
										r.pathPattern = "/api/v1/access-flows/{id}"
										r.args = args
										r.count = 1
										return r, true
									case "PATCH":
										r.name = UpdateAccessFlowV1Operation
										r.summary = "Update Access Flow"
										r.operationID = "updateAccessFlowV1"
										r.pathPattern = "/api/v1/access-flows/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

						}

					case 'c': // Prefix: "connector-action-params/"

						if l := len("connector-action-params/"); len(elem) >= l && elem[0:l] == "connector-action-params/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'g': // Prefix: "grant-access"

							if l := len("grant-access"); len(elem) >= l && elem[0:l] == "grant-access" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = GetGrantAccessConnectorActionParamsOperation
									r.summary = "get grant-access connector action params"
									r.operationID = "getGrantAccessConnectorActionParams"
									r.pathPattern = "/api/v1/connector-action-params/grant-access"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'r': // Prefix: "revoke-access"

							if l := len("revoke-access"); len(elem) >= l && elem[0:l] == "revoke-access" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = GetRevokeAccessConnectorActionParamsOperation
									r.summary = "get revoke-access connector action params"
									r.operationID = "getRevokeAccessConnectorActionParams"
									r.pathPattern = "/api/v1/connector-action-params/revoke-access"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				case '2': // Prefix: "2/"

					if l := len("2/"); len(elem) >= l && elem[0:l] == "2/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'b': // Prefix: "bulk/identities/attributes"

						if l := len("bulk/identities/attributes"); len(elem) >= l && elem[0:l] == "bulk/identities/attributes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = BulkDeleteAttributesFormIdentitiesOperation
								r.summary = "Delete attributes from multiple identities"
								r.operationID = "bulkDeleteAttributesFormIdentities"
								r.pathPattern = "/api/v2/bulk/identities/attributes"
								r.args = args
								r.count = 0
								return r, true
							case "GET":
								r.name = ListAttributesForIdentitiesOperation
								r.summary = "List attributes for multiple identities"
								r.operationID = "listAttributesForIdentities"
								r.pathPattern = "/api/v2/bulk/identities/attributes"
								r.args = args
								r.count = 0
								return r, true
							case "PUT":
								r.name = BulkUpsertAttributesForIdentitiesOperation
								r.summary = "Adds or Updates attributes to multiple identities"
								r.operationID = "bulkUpsertAttributesForIdentities"
								r.pathPattern = "/api/v2/bulk/identities/attributes"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'c': // Prefix: "connectors"

						if l := len("connectors"); len(elem) >= l && elem[0:l] == "connectors" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = ListConnectorsOperation
								r.summary = "list connectors"
								r.operationID = "listConnectors"
								r.pathPattern = "/api/v2/connectors"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'i': // Prefix: "i"

						if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "dentities"

							if l := len("dentities"); len(elem) >= l && elem[0:l] == "dentities" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = ListIdentitiesOperation
									r.summary = "list identities, grantees and approvers"
									r.operationID = "listIdentities"
									r.pathPattern = "/api/v2/identities"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'n': // Prefix: "ntegrations"

							if l := len("ntegrations"); len(elem) >= l && elem[0:l] == "ntegrations" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = ListIntegrationsV2Operation
									r.summary = "list integrations"
									r.operationID = "listIntegrationsV2"
									r.pathPattern = "/api/v2/integrations"
									r.args = args
									r.count = 0
									return r, true
								case "POST":
									r.name = CreateIntegrationV2Operation
									r.summary = "create integration"
									r.operationID = "createIntegrationV2"
									r.pathPattern = "/api/v2/integrations"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '-': // Prefix: "-catalog"

								if l := len("-catalog"); len(elem) >= l && elem[0:l] == "-catalog" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = ListIntegrationConfigsOperation
										r.summary = "list integration configs"
										r.operationID = "listIntegrationConfigs"
										r.pathPattern = "/api/v2/integrations-catalog"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "type"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetIntegrationConfigOperation
											r.summary = "get integration config"
											r.operationID = "getIntegrationConfig"
											r.pathPattern = "/api/v2/integrations-catalog/{type}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								}

							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = DeleteIntegrationV2Operation
										r.summary = "delete integration"
										r.operationID = "deleteIntegrationV2"
										r.pathPattern = "/api/v2/integrations/{id}"
										r.args = args
										r.count = 1
										return r, true
									case "GET":
										r.name = GetIntegrationV2Operation
										r.summary = "get integration"
										r.operationID = "getIntegrationV2"
										r.pathPattern = "/api/v2/integrations/{id}"
										r.args = args
										r.count = 1
										return r, true
									case "PUT":
										r.name = UpdateIntegrationV2Operation
										r.summary = "update integration"
										r.operationID = "updateIntegrationV2"
										r.pathPattern = "/api/v2/integrations/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/refresh"

									if l := len("/refresh"); len(elem) >= l && elem[0:l] == "/refresh" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = RefreshIntegrationV2Operation
											r.summary = "refresh integration"
											r.operationID = "refreshIntegrationV2"
											r.pathPattern = "/api/v2/integrations/{id}/refresh"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								}

							}

						}

					case 'u': // Prefix: "users"

						if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = ListUsersOperation
								r.summary = "list users"
								r.operationID = "listUsers"
								r.pathPattern = "/api/v2/users"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetUserOperation
									r.summary = "get user by Id or Email"
									r.operationID = "getUser"
									r.pathPattern = "/api/v2/users/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					}

				case '3': // Prefix: "3/"

					if l := len("3/"); len(elem) >= l && elem[0:l] == "3/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "ac"

						if l := len("ac"); len(elem) >= l && elem[0:l] == "ac" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "cess-requests"

							if l := len("cess-requests"); len(elem) >= l && elem[0:l] == "cess-requests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = ListAccessRequestsOperation
									r.summary = "list access requests"
									r.operationID = "listAccessRequests"
									r.pathPattern = "/api/v3/access-requests"
									r.args = args
									r.count = 0
									return r, true
								case "POST":
									r.name = CreateAccessRequestOperation
									r.summary = "create access request"
									r.operationID = "createAccessRequest"
									r.pathPattern = "/api/v3/access-requests"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '-': // Prefix: "-bulk/revoke"

								if l := len("-bulk/revoke"); len(elem) >= l && elem[0:l] == "-bulk/revoke" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = RevokeAccessRequestsOperation
										r.summary = "Revoke multiple access requests"
										r.operationID = "revokeAccessRequests"
										r.pathPattern = "/api/v3/access-requests-bulk/revoke"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = GetAccessRequestOperation
										r.summary = "get access request"
										r.operationID = "getAccessRequest"
										r.pathPattern = "/api/v3/access-requests/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "access-details"

										if l := len("access-details"); len(elem) >= l && elem[0:l] == "access-details" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GetAccessRequestDetailsOperation
												r.summary = "get access request access details"
												r.operationID = "getAccessRequestDetails"
												r.pathPattern = "/api/v3/access-requests/{id}/access-details"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									case 'r': // Prefix: "reset"

										if l := len("reset"); len(elem) >= l && elem[0:l] == "reset" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = ResetAccessRequestCredentialsOperation
												r.summary = "reset access request credentials"
												r.operationID = "resetAccessRequestCredentials"
												r.pathPattern = "/api/v3/access-requests/{id}/reset"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									}

								}

							}

						case 't': // Prefix: "tivity"

							if l := len("tivity"); len(elem) >= l && elem[0:l] == "tivity" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = ListActivityOperation
									r.summary = "List Activity"
									r.operationID = "listActivity"
									r.pathPattern = "/api/v3/activity"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					case 'i': // Prefix: "integrations/"

						if l := len("integrations/"); len(elem) >= l && elem[0:l] == "integrations/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'r': // Prefix: "resources/"
							origElem := elem
							if l := len("resources/"); len(elem) >= l && elem[0:l] == "resources/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "resource_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/user-tags"

								if l := len("/user-tags"); len(elem) >= l && elem[0:l] == "/user-tags" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GetResourceUserTagsOperation
										r.summary = "get user tags of a resource"
										r.operationID = "getResourceUserTags"
										r.pathPattern = "/api/v3/integrations/resources/{resource_id}/user-tags"
										r.args = args
										r.count = 1
										return r, true
									case "PUT":
										r.name = UpdateResourceUserTagsOperation
										r.summary = "update user tags of a resource"
										r.operationID = "updateResourceUserTags"
										r.pathPattern = "/api/v3/integrations/resources/{resource_id}/user-tags"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "permissions"

								if l := len("permissions"); len(elem) >= l && elem[0:l] == "permissions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GetIntegrationPermissionsOperation
										r.summary = "get integration permissions for the entire tenant"
										r.operationID = "getIntegrationPermissions"
										r.pathPattern = "/api/v3/integrations/{id}/permissions"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							case 'r': // Prefix: "resources"

								if l := len("resources"); len(elem) >= l && elem[0:l] == "resources" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GetIntegrationResourcesOperation
										r.summary = "get integration resources for the entire tenant"
										r.operationID = "getIntegrationResources"
										r.pathPattern = "/api/v3/integrations/{id}/resources"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

						}

					case 's': // Prefix: "selectable-integrations"

						if l := len("selectable-integrations"); len(elem) >= l && elem[0:l] == "selectable-integrations" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetSelectableIntegrationsOperation
								r.summary = "get selectable integrations"
								r.operationID = "getSelectableIntegrations"
								r.pathPattern = "/api/v3/selectable-integrations"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "integration_id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'r': // Prefix: "resource-types"
									origElem := elem
									if l := len("resource-types"); len(elem) >= l && elem[0:l] == "resource-types" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetSelectableResourceTypesOperation
											r.summary = "get selectable resource types"
											r.operationID = "getSelectableResourceTypes"
											r.pathPattern = "/api/v3/selectable-integrations/{integration_id}/resource-types"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}
								// Param: "resource_type"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'p': // Prefix: "permissions"

										if l := len("permissions"); len(elem) >= l && elem[0:l] == "permissions" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GetSelectablePermissionsOperation
												r.summary = "get selectable permissions"
												r.operationID = "getSelectablePermissions"
												r.pathPattern = "/api/v3/selectable-integrations/{integration_id}/{resource_type}/permissions"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

									case 'r': // Prefix: "resources"

										if l := len("resources"); len(elem) >= l && elem[0:l] == "resources" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GetSelectableResourcesOperation
												r.summary = "get selectable resources"
												r.operationID = "getSelectableResources"
												r.pathPattern = "/api/v3/selectable-integrations/{integration_id}/{resource_type}/resources"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

									}

								}

							}

						}

					}

				}

			}

		}
	}
	return r, false
}
